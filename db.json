{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/download/getFromHtml.sh","path":"download/getFromHtml.sh","modified":0,"renderable":0},{"_id":"source/download/changeHtml.sh","path":"download/changeHtml.sh","modified":0,"renderable":0},{"_id":"source/download/nginx.conf","path":"download/nginx.conf","modified":0,"renderable":0},{"_id":"source/download/srpg-production-app.conf","path":"download/srpg-production-app.conf","modified":0,"renderable":0},{"_id":"source/download/raven-node-master.zip","path":"download/raven-node-master.zip","modified":0,"renderable":0},{"_id":"source/download/td-agent.conf","path":"download/td-agent.conf","modified":0,"renderable":0},{"_id":"source/download/srpg-app","path":"download/srpg-app","modified":0,"renderable":0},{"_id":"source/images/gq4.jpg","path":"images/gq4.jpg","modified":0,"renderable":0},{"_id":"source/images/789496A4-1F26-4748-B54B-4AEE762BFCC4.png","path":"images/789496A4-1F26-4748-B54B-4AEE762BFCC4.png","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/images/touxiang.jpg","path":"images/touxiang.jpg","modified":0,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"source/images/zy.jpg","path":"images/zy.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"source/images/gq5.jpg","path":"images/gq5.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/images/gril.jpg","path":"images/gril.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/gril2.jpg","path":"images/gril2.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"source/images/jyj.jpeg","path":"images/jyj.jpeg","modified":0,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":0,"renderable":0},{"_id":"source/images/snow.gif","path":"images/snow.gif","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":0,"renderable":0},{"_id":"source/images/gril3.jpg","path":"images/gril3.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home.png","path":"img/header_img/home.png","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0},{"_id":"themes/Life/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/Life/source/css/desktop.ini","path":"css/desktop.ini","modified":0,"renderable":1},{"_id":"themes/Life/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Life/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/Life/source/css/life.css","path":"css/life.css","modified":0,"renderable":1},{"_id":"themes/Life/source/css/nprogress.min.css","path":"css/nprogress.min.css","modified":0,"renderable":1},{"_id":"themes/Life/source/css/sidebar-light.css","path":"css/sidebar-light.css","modified":0,"renderable":1},{"_id":"themes/Life/source/css/valine.css","path":"css/valine.css","modified":0,"renderable":1},{"_id":"themes/Life/source/js/LeanStatistics.min.js","path":"js/LeanStatistics.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/Life.js","path":"js/Life.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/highlightjs-line-numbers.min.js","path":"js/highlightjs-line-numbers.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/jquery.qrcode.min.js","path":"js/jquery.qrcode.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/nprogress.min.js","path":"js/nprogress.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/js/tether.min.js","path":"js/tether.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/images/textbg.png","path":"images/textbg.png","modified":0,"renderable":1},{"_id":"themes/Life/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Life/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Life/source/js/jquery-2.2.4.min.js","path":"js/jquery-2.2.4.min.js","modified":0,"renderable":1},{"_id":"themes/Life/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Life/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Life/source/js/jquery.fancybox.js","path":"js/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/Life/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Life/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Life/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4f78b32c2961b00e650fd81f2c03eb730d3e8cab","modified":1583492109738},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1574868408000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1574868408000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1574868408000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1574868408000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1574868408000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1574868408000},{"_id":"source/_posts/.DS_Store","hash":"9ec3acd77c989dd1c22b252eb9aa9da53b701196","modified":1583492109736},{"_id":"source/_posts/Erlang-OTP学习.md","hash":"97a56b81a1d9493e764f27194d7f8cae8daf73cf","modified":1574868408000},{"_id":"source/_posts/ALC-Sentry.md","hash":"600babcdd40006f2deba6d310283727c60079dd7","modified":1574868408000},{"_id":"source/_posts/Erlang List模块函数使用大全.md","hash":"27f8dfce8038e12afd86d2cfde82e45e2d3cabd1","modified":1574868408000},{"_id":"source/_posts/Mysql笔记.md","hash":"3cc8a451037ebdede4a71f26bdaeb39adb457e41","modified":1574868408000},{"_id":"source/_posts/c-设计模式.md","hash":"fdf57e851cbb58607de40187b21697e4e98cebf2","modified":1574868408000},{"_id":"source/_posts/hello-world.md","hash":"47cef1dee695dd05c106ea30dfff9f1223334928","modified":1583490849815},{"_id":"source/_posts/alchemist-manage服务器部署.md","hash":"812d2ec0ae662ec97317f12323c24d2c01af1778","modified":1574868408000},{"_id":"source/_posts/hexo-安装遇到的问题.md","hash":"330cb564761b073fdd21ca846f847aee9ff6bdaa","modified":1574868408000},{"_id":"source/_posts/pomelo学习笔记.md","hash":"f6dfcd9079513dc6afa8a577875f117ec6c9bffd","modified":1574868408000},{"_id":"source/_posts/node笔记.md","hash":"5e4e3ed46ad5ae4f4c7a2f1b30faf1be71299b80","modified":1574868408000},{"_id":"source/_posts/充值流程.md","hash":"57e27c45433f2a6fb54e1874f6b1e52b9aa1c652","modified":1574868408000},{"_id":"source/_posts/redis笔记.md","hash":"4aa8cee6836309908e31fa0ef030665b089e8e8f","modified":1574868408000},{"_id":"source/_posts/游戏中大型比赛玩法设计思路.md","hash":"c188b9cb1b46f628508a6205d036fb378ac342ee","modified":1574868408000},{"_id":"source/_posts/游戏全局通知红点系统.md","hash":"550785266de33c325acdfde2df82855e52f18cee","modified":1574868408000},{"_id":"source/_posts/游戏运营活动框架思路.md","hash":"b24039b83ec6acf104fc34b02a2890480003a826","modified":1574868408000},{"_id":"source/_posts/翻译提取替换.md","hash":"99dad2baf9527909554b54d86a06102c975dd4ff","modified":1574868408000},{"_id":"source/about-me/index.md","hash":"2a4d9db45e229306710bfd1ef310003c2302789b","modified":1574868408000},{"_id":"source/_posts/项目各种配置文件.md","hash":"a2d2fe76b475e5efe19285cdbba0aa166f798693","modified":1574868408000},{"_id":"source/archives/index.md","hash":"40c6d6d8a40f8133e48eaf8111df4a361d6ac30d","modified":1574868408000},{"_id":"source/download/getFromHtml.sh","hash":"66c1337f61efafbf326b3bb98846393a6f598f66","modified":1574868408000},{"_id":"source/download/changeHtml.sh","hash":"8ff061723b21d514dd2526e7861085fd68b1c1ab","modified":1574868408000},{"_id":"source/categories/index.md","hash":"cac05c896340e6a2a19f61a120baad2370204693","modified":1574868408000},{"_id":"source/download/nginx.conf","hash":"558aae5ea9f1a4485d90048f7fe0451af1ab6edb","modified":1574868408000},{"_id":"source/download/srpg-production-app.conf","hash":"9ae2cf9e8eab38be6d44f29b1485a09a08bd40c2","modified":1574868408000},{"_id":"source/download/raven-node-master.zip","hash":"3b0cd04db33fbcdb354f0be4b1b656078db9cd69","modified":1574868408000},{"_id":"source/download/td-agent.conf","hash":"99343475bf45f20e6ffb1f4b40bf49fcf772e6d8","modified":1574868408000},{"_id":"source/download/srpg-app","hash":"30551081527637d5b82859de862470d26ff54943","modified":1574868408000},{"_id":"source/images/gq4.jpg","hash":"e3103bbcc52b8fe849bba411de6ddf62ff78a7b7","modified":1574868408000},{"_id":"source/images/.DS_Store","hash":"a609cbafe3010689451954812c8e32658add7d66","modified":1577513831017},{"_id":"source/images/789496A4-1F26-4748-B54B-4AEE762BFCC4.png","hash":"5f19f9f9dbe764589bf7658654996642eac59e98","modified":1574868408000},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1574868408000},{"_id":"source/tags/index.md","hash":"6e90522e25b27b8a7c8e4a28afd5f9ec630fca70","modified":1574868408000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1574868408000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1574868408000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1574868408000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1574868408000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1574868408000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1574868408000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1574868408000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1574868408000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1574868408000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1574868408000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1574868408000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1574868408000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1574868408000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1574868408000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1574868408000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1574868408000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1574868408000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1574868408000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1574868408000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1574868408000},{"_id":"source/images/touxiang.jpg","hash":"9970e2df9e6b53c56d7d6cd000a8bd8e839d800f","modified":1574868408000},{"_id":"source/_posts/ALC-Sentry/9E26651338B7EE1345DAFDEF0ADDB9C4.jpg","hash":"8e216bfbb1fb0741d36ea1234c39b84bbb59f618","modified":1574868408000},{"_id":"source/_posts/alchemist-manage服务器部署/AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg","hash":"af40cb7fa3ceb5c2b264eede744943d49027dae1","modified":1574868408000},{"_id":"source/_posts/ALC-Sentry/E4B1DB656739C13A7F75B5578E3CB678.jpg","hash":"f9f80d61e7a550da3807cc2a50d88c1a3fe7e287","modified":1574868408000},{"_id":"source/_posts/alchemist-manage服务器部署/A723432EDEBBCA112718CF1FD3B3CF71.jpg","hash":"2a5a39d425ea74b24301d7f40d92c30a4b2d5760","modified":1574868408000},{"_id":"source/_posts/游戏中大型比赛玩法设计思路/Er15647145661718.png","hash":"fedd4ae2f723c2ccf231d1fe4a69e16ae70f45f8","modified":1574868408000},{"_id":"source/_posts/游戏中大型比赛玩法设计思路/Er15647109579023.png","hash":"9503f8cfc1630d1ba9fffb1f7584e355bb4c7f0a","modified":1574868408000},{"_id":"source/_posts/游戏中大型比赛玩法设计思路/Er15647120482687.png","hash":"40a2cb144d553bdb032be6fdf4280cdc81c3c0f5","modified":1574868408000},{"_id":"source/_posts/游戏全局通知红点系统/Red15669620461084.png","hash":"8eb1e7fa79413733c92ec2123bb7d0c1da73d937","modified":1574868408000},{"_id":"source/_posts/翻译提取替换/326AD4E2572831FEFC87D564932D6106.jpg","hash":"00eed0dfb8dde7d822e347201b198643c649c10e","modified":1574868408000},{"_id":"source/_posts/游戏运营活动框架思路/1574411899.jpg","hash":"e03fc50214e51f2eb15c54ca3db8fc963389e494","modified":1574868408000},{"_id":"source/_posts/翻译提取替换/A46180F494E722BBE7AB60D25E81DD0B.jpg","hash":"750ab8de19b4d586e14b866d19da0e346b9dc7d2","modified":1574868408000},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1574868408000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1574868408000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1574868408000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1574868408000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1574868408000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1574868408000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1574868408000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1574868408000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1574868408000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1574868408000},{"_id":"source/_posts/游戏中大型比赛玩法设计思路/Er15646493808263.png","hash":"947230c0221aee34e17369ac3b9d6332a9d5e8f4","modified":1574868408000},{"_id":"source/_posts/游戏中大型比赛玩法设计思路/Er15646489002180.png","hash":"b79e567944dd758a9f36ac04fdb0eddc36dfe773","modified":1574868408000},{"_id":"source/images/zy.jpg","hash":"c3d3c8338e8e0182242fc094b36cecdce88dfe5b","modified":1574868408000},{"_id":"source/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1574868408000},{"_id":"source/images/gq5.jpg","hash":"c2c570789c437f711d9b5d5374aa13af64c5e800","modified":1574868408000},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1574868408000},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1574868408000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1574868408000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1574868408000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1574868408000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1574868408000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1574868408000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1574868408000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1574868408000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1574868408000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1574868408000},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1574868408000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1574868408000},{"_id":"source/images/gril.jpg","hash":"ec3c290a80bbacd3b9e4dcefbc7c68c40d32eded","modified":1574868408000},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1574868408000},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1574868408000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1574868408000},{"_id":"source/images/gril2.jpg","hash":"489f123825e0d43afc9f2027d53f896953f46e07","modified":1574868408000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1574868408000},{"_id":"source/images/jyj.jpeg","hash":"dd04379ba4236fe20ecdd7b177978a17bdeb0fdd","modified":1574868408000},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1574868408000},{"_id":"source/images/snow.gif","hash":"3ba44c12ad9164fa8be467b8e936d28d39ec6218","modified":1574868408000},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1574868408000},{"_id":"source/images/gril3.jpg","hash":"5af140ff23511f88cab0b3aea2253a4a6b41961f","modified":1574868408000},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1574868408000},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1574868408000},{"_id":"source/img/header_img/home.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1574868408000},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1574868408000},{"_id":"themes/Life/README.md","hash":"4220cfd4466bc19213f5a7742dbba21408d155fc","modified":1536159164000},{"_id":"themes/Life/_configxx.yml","hash":"d37328e392e5b46715206dad0de0a2c4a0a7a2ec","modified":1536159164000},{"_id":"themes/Life/.DS_Store","hash":"2d4c905dd943307fd9616a28d430d2ef523b5e87","modified":1585220225615},{"_id":"themes/Life/layout/category.swig","hash":"e4a31a38ad8b01b139c2e84f94dd8d2fe75b14c1","modified":1536159164000},{"_id":"themes/Life/layout/index.swig","hash":"1cc05ebbf1acf902958c0c2203c382bdeddbcd80","modified":1536159164000},{"_id":"themes/Life/layout/links.swig","hash":"64ae3fc3857afd1b4ad0a89e2fd6b74bc99d0fd0","modified":1536159164000},{"_id":"themes/Life/layout/page.swig","hash":"85f8d9a827ba72a014a24f42ff3d30446043f982","modified":1536159164000},{"_id":"themes/Life/layout/post.swig","hash":"3bcdc6a9cf59d61c47e8b05d2f67107971777e2d","modified":1536159164000},{"_id":"themes/Life/layout/tag.swig","hash":"5375383df06fc68d0eaa84522c7ff93c952ba829","modified":1536159164000},{"_id":"themes/Life/layout/includes/layout.swig","hash":"a0e846f2e36b6bd6a0ebcd79916f26f6a65ff9e6","modified":1536159164000},{"_id":"themes/Life/layout/includes/pagination.swig","hash":"4b568ef3800662af1ad65506972266cd171b0228","modified":1536159164000},{"_id":"themes/Life/layout/includes/recent-posts.swig","hash":"b6329ab3cc3aacee2a1d5850a7625dd31dba01b5","modified":1536159164000},{"_id":"themes/Life/source/css/atom-one-dark.css","hash":"61c6450da68f17eefa091ffda833253c44e54590","modified":1536159164000},{"_id":"themes/Life/source/css/desktop.ini","hash":"ea1d49ca6b9ec13dd1711d05eae65479e1489656","modified":1536159164000},{"_id":"themes/Life/source/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536159164000},{"_id":"themes/Life/source/css/jquery.fancybox.css","hash":"e1fdf02768336a6a7418000fa9692b7f594ec3be","modified":1536159164000},{"_id":"themes/Life/source/css/life.css","hash":"fac7f817005bb16d53857096769fb1d81da9c692","modified":1536159164000},{"_id":"themes/Life/source/css/nprogress.min.css","hash":"79a4f6785c09b8546a37f927e4a5d89af7156171","modified":1536159164000},{"_id":"themes/Life/source/css/sidebar-light.css","hash":"ca4980f2656c5f9d227ac723b3bacdd7626c43c2","modified":1536159164000},{"_id":"themes/Life/source/css/valine.css","hash":"fea0b733e67efdc7e2903d071ac69ea5f585acb6","modified":1536159164000},{"_id":"themes/Life/source/js/LeanStatistics.min.js","hash":"1caff888de8d7768be805845d9be62da693b0ae1","modified":1536159164000},{"_id":"themes/Life/source/js/Life.js","hash":"c334334a3124864be3c84c138d8920d82ccd1621","modified":1536159164000},{"_id":"themes/Life/source/js/Valine.min.js","hash":"0bf9b618d277e3ff5afc6105bf45c8b38d7e14c6","modified":1536159164000},{"_id":"themes/Life/source/js/bootstrap.min.js","hash":"6107d146e54a67c9998230abf839301575d05702","modified":1536159164000},{"_id":"themes/Life/source/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1536159164000},{"_id":"themes/Life/source/js/highlightjs-line-numbers.min.js","hash":"45082980517d85e647858458f9478f414e574023","modified":1536159164000},{"_id":"themes/Life/source/js/jquery.pjax.js","hash":"13485a1e2dc9c8df28267549de1b8af8f39061d9","modified":1536159164000},{"_id":"themes/Life/source/js/jquery.qrcode.min.js","hash":"f424bd339870510d1160d1c5da5d698aedbb452e","modified":1536159164000},{"_id":"themes/Life/source/js/nprogress.min.js","hash":"3cca20b36156d9974312555d55db3fed194a3d04","modified":1536159164000},{"_id":"themes/Life/source/js/tether.min.js","hash":"cbdd0a2b2dd7a9cfc5db3f33e34323afa0ca55a3","modified":1536159164000},{"_id":"themes/Life/source/images/textbg.png","hash":"3f9716da8547bb8b4005195fc168bd1d9fc59f9a","modified":1536159164000},{"_id":"themes/Life/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536159164000},{"_id":"themes/Life/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536159164000},{"_id":"themes/Life/source/js/jquery-2.2.4.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1536159164000},{"_id":"themes/Life/source/css/bootstrap.min.css","hash":"b3ce9b487cefc71a1d7d9d698aaa2b1a09844615","modified":1536159164000},{"_id":"themes/Life/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536159164000},{"_id":"themes/Life/source/js/jquery.fancybox.js","hash":"086414c21f2e432d8a4742ea40972d4c6b7439a8","modified":1536159164000},{"_id":"themes/Life/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536159164000},{"_id":"themes/Life/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536159164000},{"_id":"themes/Life/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1536159164000},{"_id":"public/content.json","hash":"9459c007c4df54381a6f4459b4c3061e8630e9a0","modified":1585220663651},{"_id":"public/about-me/index.html","hash":"42a5a96eafb6849e9404e8473f6b2b5c9e01bfee","modified":1585220663678},{"_id":"public/tags/index.html","hash":"fdb1799d515981bb3bc83b925dc36002a003f221","modified":1585220663678},{"_id":"public/categories/index.html","hash":"fa101fe694e952abf44e1206f46cb3b106b8fa0d","modified":1585220663678},{"_id":"public/archives/2018/page/2/index.html","hash":"84c158169f275650d472aab822cc0d0fd1d7ea61","modified":1585220663678},{"_id":"public/archives/2018/12/index.html","hash":"f6a9973fab7d37db614a09a23a56abcdacc23977","modified":1585220663678},{"_id":"public/archives/2019/03/index.html","hash":"b5c43bbafafc7ac0eca3666d5aa431b0a7e2c7fe","modified":1585220663678},{"_id":"public/archives/2019/04/index.html","hash":"70786161b12b5f6e7366ef9b962abba3b1a46e7d","modified":1585220663678},{"_id":"public/archives/2019/05/index.html","hash":"3e099192bb6faeb256a43a8afb15e2765622ec5a","modified":1585220663679},{"_id":"public/archives/2019/08/index.html","hash":"db2dd454157527d795d8573bb4e40d5f70f5380a","modified":1585220663679},{"_id":"public/categories/服务端框架/index.html","hash":"c94a07179a9347b3d624f960ed8e3b73aa40e22e","modified":1585220663679},{"_id":"public/categories/开发语言/index.html","hash":"423ee310a5f3db12ee49e62bfc26c28850ca5965","modified":1585220663679},{"_id":"public/categories/脚本工具/index.html","hash":"9e9932102e793e3ed6e0be987793a2bd3c8bd740","modified":1585220663679},{"_id":"public/tags/Erlang/index.html","hash":"2c23ef87f1ab84a78e2be875dd487125f67f3dd2","modified":1585220663679},{"_id":"public/tags/mysql/index.html","hash":"dbd6067df32fee49dfbc8435e7ceac0a1a05b833","modified":1585220663679},{"_id":"public/tags/Sentry/index.html","hash":"cbecbedb1094d562bf81f2d406d086e526f88795","modified":1585220663680},{"_id":"public/tags/c-设计模式/index.html","hash":"3cb51a4b7f1606d7143c93c4699b15db1be7409a","modified":1585220663680},{"_id":"public/tags/Ruby-on-Rails/index.html","hash":"9842aae8f8b8ba45a52e520b389417b2c3d68ece","modified":1585220663680},{"_id":"public/tags/Capistrano-自动部署工具/index.html","hash":"c1cb5da171f49fdc8adaefb40dd56b4b75a3d7e6","modified":1585220663680},{"_id":"public/tags/hexo/index.html","hash":"ad848acb94d51248d117e91ad73d620c3602b339","modified":1585220663681},{"_id":"public/tags/redis/index.html","hash":"af747b3f45b0ad2d051bd08e792c735e13cee05e","modified":1585220663681},{"_id":"public/tags/nginx/index.html","hash":"e52381a71bfcb45ade83c293dc935bda0f37fcd2","modified":1585220663681},{"_id":"public/tags/td-agent/index.html","hash":"751ee6a7eb6c690aa12664df8df5baac803fa9f2","modified":1585220663681},{"_id":"public/archives/index.html","hash":"d2464c3a4fc9605aa4ea1bcf758c1b2e6f6bf37f","modified":1585220663681},{"_id":"public/2019/11/22/游戏运营活动框架思路/index.html","hash":"6b99928adddf8f70833a3b435685eb3759709fee","modified":1585220663681},{"_id":"public/2019/08/23/游戏全局通知红点系统/index.html","hash":"5816d2c9ad898453f59901622eda06656693c84d","modified":1585220663681},{"_id":"public/2019/07/30/游戏中大型比赛玩法设计思路/index.html","hash":"59486f762eac85d91a1294d24591a66888af1a44","modified":1585220663681},{"_id":"public/2019/05/07/Erlang List模块函数使用大全/index.html","hash":"c2c0026aafe11290225cb08f448eb31aae39dda4","modified":1585220663681},{"_id":"public/2019/04/09/Erlang-OTP学习/index.html","hash":"440ff9e03422d763ca4d6982af072579a8572188","modified":1585220663682},{"_id":"public/2018/12/25/c-设计模式/index.html","hash":"a165baed0efe25779b81a3512cfa1d77abdd956c","modified":1585220663682},{"_id":"public/2018/10/31/Mysql笔记/index.html","hash":"f403ceb9989ddd77028723d98c931ea803db4421","modified":1585220663682},{"_id":"public/2019/03/06/充值流程/index.html","hash":"d21c2152fccf84fcab3c3659d730382983ffcf99","modified":1585220663682},{"_id":"public/2018/08/21/node笔记/index.html","hash":"e01d19d0310ccd8ff4170f05924e31faa4a7cf9a","modified":1585220663682},{"_id":"public/2018/08/03/翻译提取替换/index.html","hash":"c2a43f1d33ee60ddddc45c9f2dc23bab426d6eb9","modified":1585220663682},{"_id":"public/2018/10/23/pomelo学习笔记/index.html","hash":"df2b5affc6e475a6dff1506af66bbc5fae10b8e9","modified":1585220663682},{"_id":"public/2018/08/01/redis笔记/index.html","hash":"d8779c1f6d3a429f3cfba53118889f0780be2541","modified":1585220663682},{"_id":"public/2018/07/24/ALC-Sentry/index.html","hash":"f41003e0a10280072597ea43aab2a035c64eb854","modified":1585220663683},{"_id":"public/2018/07/31/项目各种配置文件/index.html","hash":"df8d3aa09f4b591cd70c4d7f0b50ff2af1bb6923","modified":1585220663683},{"_id":"public/2018/07/11/alchemist-manage服务器部署/index.html","hash":"eb6d4697b81d1664cac57293036cc122445c94c9","modified":1585220663684},{"_id":"public/2018/07/01/hello-world/index.html","hash":"83431f08a8e672d4b813f5a9931c2e566e80f3f8","modified":1585220663684},{"_id":"public/2018/07/03/hexo-安装遇到的问题/index.html","hash":"618670d498f1f4cef969ddbcfd78e0735e3a6975","modified":1585220663684},{"_id":"public/archives/page/2/index.html","hash":"38ba146001b18ef90519ee898aa9c8e57ba78e8d","modified":1585220663684},{"_id":"public/archives/2018/index.html","hash":"3db40967db769678f9108b1b7b8bd12c3151724e","modified":1585220663684},{"_id":"public/archives/2018/07/index.html","hash":"153816fdba0c03016cb2d31d0a57747814642fb6","modified":1585220663684},{"_id":"public/archives/2018/08/index.html","hash":"a6b203d1bf1edc0e94f396ad8b0779befd2a081c","modified":1585220663684},{"_id":"public/archives/2018/10/index.html","hash":"7ed3d223cc77e3f04690cc1893ee4258c46df014","modified":1585220663684},{"_id":"public/archives/2019/index.html","hash":"8583d268fb97e9122520efdf6fef2a5359ec9a35","modified":1585220663684},{"_id":"public/archives/2019/07/index.html","hash":"f05ebdb9e7fb4bdea90acdfac97418d8ccc1444b","modified":1585220663684},{"_id":"public/archives/2019/11/index.html","hash":"efcb9881ef974f8fb3e65805216bf28a3844c646","modified":1585220663684},{"_id":"public/categories/数据库/index.html","hash":"74d3de9ebd253df3798ee8e3d242338c0aae6183","modified":1585220663685},{"_id":"public/categories/开发环境安装/index.html","hash":"5ec5eb6844d77a6d146075a120b94098515270ac","modified":1585220663685},{"_id":"public/index.html","hash":"96f231f428b81dff70b8158160bf68ed1fb1a489","modified":1585220663685},{"_id":"public/page/2/index.html","hash":"5aafb8352af4f6804151f5a378f0dac884c105cf","modified":1585220663686},{"_id":"public/tags/node-js/index.html","hash":"a0d810629525b352d39fa6942dd7bfc47c8b0f5a","modified":1585220663686},{"_id":"public/tags/游戏/index.html","hash":"54e4fdf52d2d860b57393752740e6fe893f60762","modified":1585220663687},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1585220663698},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1585220663698},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1585220663698},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1585220663698},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1585220663698},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1585220663698},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1585220663698},{"_id":"public/css/desktop.ini","hash":"ea1d49ca6b9ec13dd1711d05eae65479e1489656","modified":1585220663699},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1585220663699},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1585220663699},{"_id":"public/images/textbg.png","hash":"3f9716da8547bb8b4005195fc168bd1d9fc59f9a","modified":1585220663699},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1585220663701},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1585220664583},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585220664584},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1585220664595},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1585220664595},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1585220664596},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1585220664597},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1585220664597},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1585220664597},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1585220664597},{"_id":"public/css/atom-one-dark.css","hash":"61c6450da68f17eefa091ffda833253c44e54590","modified":1585220664597},{"_id":"public/css/nprogress.min.css","hash":"79a4f6785c09b8546a37f927e4a5d89af7156171","modified":1585220664597},{"_id":"public/css/valine.css","hash":"fea0b733e67efdc7e2903d071ac69ea5f585acb6","modified":1585220664597},{"_id":"public/css/sidebar-light.css","hash":"ca4980f2656c5f9d227ac723b3bacdd7626c43c2","modified":1585220664598},{"_id":"public/js/LeanStatistics.min.js","hash":"1caff888de8d7768be805845d9be62da693b0ae1","modified":1585220664598},{"_id":"public/js/Life.js","hash":"c334334a3124864be3c84c138d8920d82ccd1621","modified":1585220664598},{"_id":"public/js/highlightjs-line-numbers.min.js","hash":"45082980517d85e647858458f9478f414e574023","modified":1585220664598},{"_id":"public/js/jquery.qrcode.min.js","hash":"f424bd339870510d1160d1c5da5d698aedbb452e","modified":1585220664598},{"_id":"public/js/nprogress.min.js","hash":"3cca20b36156d9974312555d55db3fed194a3d04","modified":1585220664598},{"_id":"public/css/style.css","hash":"d4cfa90089c78a8b791252afae9fafa3b5658900","modified":1585220664598},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1585220664598},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1585220664598},{"_id":"public/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1585220664598},{"_id":"public/css/jquery.fancybox.css","hash":"e1fdf02768336a6a7418000fa9692b7f594ec3be","modified":1585220664598},{"_id":"public/css/life.css","hash":"fac7f817005bb16d53857096769fb1d81da9c692","modified":1585220664599},{"_id":"public/js/Valine.min.js","hash":"0bf9b618d277e3ff5afc6105bf45c8b38d7e14c6","modified":1585220664599},{"_id":"public/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1585220664599},{"_id":"public/js/jquery.pjax.js","hash":"13485a1e2dc9c8df28267549de1b8af8f39061d9","modified":1585220664599},{"_id":"public/js/tether.min.js","hash":"cbdd0a2b2dd7a9cfc5db3f33e34323afa0ca55a3","modified":1585220664599},{"_id":"public/js/jquery-2.2.4.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1585220664599},{"_id":"public/js/bootstrap.min.js","hash":"6107d146e54a67c9998230abf839301575d05702","modified":1585220664599},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585220664600},{"_id":"public/css/bootstrap.min.css","hash":"b3ce9b487cefc71a1d7d9d698aaa2b1a09844615","modified":1585220664631},{"_id":"public/js/jquery.fancybox.js","hash":"086414c21f2e432d8a4742ea40972d4c6b7439a8","modified":1585220664631},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1585220664632},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1585220664649},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585220664649},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1585220664649},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1585220664655},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1585220664674}],"Category":[{"name":"数据库","_id":"ck88nc90v00071d8njqfp6sf1"},{"name":"开发环境安装","_id":"ck88nc914000d1d8ni08omwpg"},{"name":"服务端框架","_id":"ck88nc91k000u1d8noqfb1brg"},{"name":"开发语言","_id":"ck88nc91n00111d8nl8gs8qm0"},{"name":"脚本工具","_id":"ck88nc91q00171d8nunuecmxh"}],"Data":[],"Page":[{"layout":"About-me","title":"About-me","date":"2018-10-03T02:48:33.000Z","description":"一个靠写代码为生的天才职业电竞选手","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)\n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，\n>\n>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！\n\n### 兴趣方向\n\n> 游戏。\n\n### 联系我\n\n>Email: 574215066@qq.com\n\n","source":"about-me/index.md","raw":"---\nlayout: \"About-me\"\ntitle: \"About-me\"\ndate: 2018-10-03 10:48:33\ndescription: \"一个靠写代码为生的天才职业电竞选手\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)\n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，\n>\n>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！\n\n### 兴趣方向\n\n> 游戏。\n\n### 联系我\n\n>Email: 574215066@qq.com\n\n","updated":"2019-11-27T15:26:48.000Z","path":"about-me/index.html","comments":1,"_id":"ck88nc90e00011d8n82j6pyuq","content":"<h3 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h3><blockquote>\n<p>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)</p>\n</blockquote>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p>\n<p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p>\n</blockquote>\n<h3 id=\"兴趣方向\"><a href=\"#兴趣方向\" class=\"headerlink\" title=\"兴趣方向\"></a>兴趣方向</h3><blockquote>\n<p>游戏。</p>\n</blockquote>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<p>Email: <a href=\"mailto:574215066@qq.com\" target=\"_blank\" rel=\"noopener\">574215066@qq.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h3><blockquote>\n<p>Just do it !    (翻译：我只是个搞 IT的！哭笑脸)</p>\n</blockquote>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p>\n<p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p>\n</blockquote>\n<h3 id=\"兴趣方向\"><a href=\"#兴趣方向\" class=\"headerlink\" title=\"兴趣方向\"></a>兴趣方向</h3><blockquote>\n<p>游戏。</p>\n</blockquote>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<p>Email: <a href=\"mailto:574215066@qq.com\" target=\"_blank\" rel=\"noopener\">574215066@qq.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2019-11-27T15:26:48.000Z","path":"archives/index.html","_id":"ck88nc90h00031d8n1brk6t4v","content":"","site":{"data":{}},"excerpt":"","more":""},{"ayout":"categories","title":"Categories","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2018-09-20T12:49:56.000Z","description":"Hey, this is categories","_content":"","source":"categories/index.md","raw":"---\nayout: \"categories\"\ntitle: \"Categories\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2018-09-20 20:49:56\ndescription: \"Hey, this is categories\"\n---\n","updated":"2019-11-27T15:26:48.000Z","path":"categories/index.html","layout":"page","_id":"ck88nc90o00061d8nf8xab8lv","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"tags","date":"2018-07-03T09:44:08.000Z","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: tags\ndate: 2018-07-03 17:44:08\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.png\"\n---\n","updated":"2019-11-27T15:26:48.000Z","path":"tags/index.html","comments":1,"_id":"ck88nc92m001x1d8nsh8pb9lv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Erlang OTP学习","date":"2019-04-09T08:50:32.000Z","_content":"\n1.-behaviour(gen_server) \n它表示让编译器检查，当前module是否实现了gen_server指定的所有回调接口\n\n2.gen_server:start_link(ServerName, Module, Args, Options) -> Result \n这个方法用来启动一个server，其中： \n参数ServerName指定了服务名 \n参数Module指定了该server的callback模块 \n参数Args将作为服务初始化的启动参数（服务初始化时会调用：Module:init([Args])） \n参数Options指定了一些特性参数，通常可以直接使用[] \n\n如果服务启动成功，返回{ok, Pid} \n\n3.Module:init([Args]) \n这个方法会在服务初始化时被回调，参数Args就是gen_server:start_link中倒数第二个参数，若初始化成功，该方法放回{ok, State},其中State将作为启动服务的State \n\n4.gen_server:call(ServerRef, Request) \n这个方法供callback模块向ServerRef代表的服务发送Request请求（callback模块通常会在之上再封装一层接口供客户端调用，譬如这里的add，find方法），注意该方法是一个同步调用，它会一直等待服务器返回一个响应消息（除非等待超时，默认5s） \n\n5.Module:handle_call(Request, From, State) -> Result \n这是一个回调方法，用来处理gen_server:call(ServerRef, Request)发出的请求，其中： \nRequest，表示客户端请求 \nFrom，表示请求来自哪个客户端 \nState，表示当前服务器状态 \n\nResult为handle_call 请求处理结果，它有以下几种类型 \n{reply,Reply,NewState} \n{reply,Reply,NewState,Timeout} \n{reply,Reply,NewState,hibernate} \n{noreply,NewState} \n{noreply,NewState,Timeout} \n{noreply,NewState,hibernate} \n{stop,Reason,Reply,NewState} | {stop,Reason,NewState} \n\n这几种返回值有什么区别呢？ \n如果返回的是以reply开头，那么Reply将会作为响应返回给客户端 \n如果返回的是以noreply开头，那么服务器将不会返回任何消息给客户端（这会导致客户端阻塞，因为客户端调用的gen_server:call方法是一个同步调用，当它发出请求后，会一直等待服务器发送响应消息，除非等待超时） \n\n6.gen_server:cast(ServerRef, Request) \n这个方法同gen_server:call(ServerRef, Request)，但它最大的区别就是该调用是异步的，它不需要等待服务器返回任何处理结果 \n\n7.Module:handle_cast(Request, State) -> Result \n这个方法用来处理gen_server:cast(ServerRef, Request)发出的请求，由于不会返回结果给客户端，所以参数列表中也没有From \n\n8.检查进程是否加载\n``` bash\nerlang:whereis(?MODULE).\n```\n\n9.查看进程的信息\n``` bash\nerlang:process_info(pid(0,PID,0)).\n```","source":"_posts/Erlang-OTP学习.md","raw":"---\ntitle: Erlang OTP学习\ndate: 2019-04-09 16:50:32\ntags:\n\t- Erlang\n---\n\n1.-behaviour(gen_server) \n它表示让编译器检查，当前module是否实现了gen_server指定的所有回调接口\n\n2.gen_server:start_link(ServerName, Module, Args, Options) -> Result \n这个方法用来启动一个server，其中： \n参数ServerName指定了服务名 \n参数Module指定了该server的callback模块 \n参数Args将作为服务初始化的启动参数（服务初始化时会调用：Module:init([Args])） \n参数Options指定了一些特性参数，通常可以直接使用[] \n\n如果服务启动成功，返回{ok, Pid} \n\n3.Module:init([Args]) \n这个方法会在服务初始化时被回调，参数Args就是gen_server:start_link中倒数第二个参数，若初始化成功，该方法放回{ok, State},其中State将作为启动服务的State \n\n4.gen_server:call(ServerRef, Request) \n这个方法供callback模块向ServerRef代表的服务发送Request请求（callback模块通常会在之上再封装一层接口供客户端调用，譬如这里的add，find方法），注意该方法是一个同步调用，它会一直等待服务器返回一个响应消息（除非等待超时，默认5s） \n\n5.Module:handle_call(Request, From, State) -> Result \n这是一个回调方法，用来处理gen_server:call(ServerRef, Request)发出的请求，其中： \nRequest，表示客户端请求 \nFrom，表示请求来自哪个客户端 \nState，表示当前服务器状态 \n\nResult为handle_call 请求处理结果，它有以下几种类型 \n{reply,Reply,NewState} \n{reply,Reply,NewState,Timeout} \n{reply,Reply,NewState,hibernate} \n{noreply,NewState} \n{noreply,NewState,Timeout} \n{noreply,NewState,hibernate} \n{stop,Reason,Reply,NewState} | {stop,Reason,NewState} \n\n这几种返回值有什么区别呢？ \n如果返回的是以reply开头，那么Reply将会作为响应返回给客户端 \n如果返回的是以noreply开头，那么服务器将不会返回任何消息给客户端（这会导致客户端阻塞，因为客户端调用的gen_server:call方法是一个同步调用，当它发出请求后，会一直等待服务器发送响应消息，除非等待超时） \n\n6.gen_server:cast(ServerRef, Request) \n这个方法同gen_server:call(ServerRef, Request)，但它最大的区别就是该调用是异步的，它不需要等待服务器返回任何处理结果 \n\n7.Module:handle_cast(Request, State) -> Result \n这个方法用来处理gen_server:cast(ServerRef, Request)发出的请求，由于不会返回结果给客户端，所以参数列表中也没有From \n\n8.检查进程是否加载\n``` bash\nerlang:whereis(?MODULE).\n```\n\n9.查看进程的信息\n``` bash\nerlang:process_info(pid(0,PID,0)).\n```","slug":"Erlang-OTP学习","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc90a00001d8n040vxf7q","content":"<p>1.-behaviour(gen_server)<br>它表示让编译器检查，当前module是否实现了gen_server指定的所有回调接口</p>\n<p>2.gen_server:start_link(ServerName, Module, Args, Options) -&gt; Result<br>这个方法用来启动一个server，其中：<br>参数ServerName指定了服务名<br>参数Module指定了该server的callback模块<br>参数Args将作为服务初始化的启动参数（服务初始化时会调用：Module:init([Args])）<br>参数Options指定了一些特性参数，通常可以直接使用[] </p>\n<p>如果服务启动成功，返回{ok, Pid} </p>\n<p>3.Module:init([Args])<br>这个方法会在服务初始化时被回调，参数Args就是gen_server:start_link中倒数第二个参数，若初始化成功，该方法放回{ok, State},其中State将作为启动服务的State </p>\n<p>4.gen_server:call(ServerRef, Request)<br>这个方法供callback模块向ServerRef代表的服务发送Request请求（callback模块通常会在之上再封装一层接口供客户端调用，譬如这里的add，find方法），注意该方法是一个同步调用，它会一直等待服务器返回一个响应消息（除非等待超时，默认5s） </p>\n<p>5.Module:handle_call(Request, From, State) -&gt; Result<br>这是一个回调方法，用来处理gen_server:call(ServerRef, Request)发出的请求，其中：<br>Request，表示客户端请求<br>From，表示请求来自哪个客户端<br>State，表示当前服务器状态 </p>\n<p>Result为handle_call 请求处理结果，它有以下几种类型<br>{reply,Reply,NewState}<br>{reply,Reply,NewState,Timeout}<br>{reply,Reply,NewState,hibernate}<br>{noreply,NewState}<br>{noreply,NewState,Timeout}<br>{noreply,NewState,hibernate}<br>{stop,Reason,Reply,NewState} | {stop,Reason,NewState} </p>\n<p>这几种返回值有什么区别呢？<br>如果返回的是以reply开头，那么Reply将会作为响应返回给客户端<br>如果返回的是以noreply开头，那么服务器将不会返回任何消息给客户端（这会导致客户端阻塞，因为客户端调用的gen_server:call方法是一个同步调用，当它发出请求后，会一直等待服务器发送响应消息，除非等待超时） </p>\n<p>6.gen_server:cast(ServerRef, Request)<br>这个方法同gen_server:call(ServerRef, Request)，但它最大的区别就是该调用是异步的，它不需要等待服务器返回任何处理结果 </p>\n<p>7.Module:handle_cast(Request, State) -&gt; Result<br>这个方法用来处理gen_server:cast(ServerRef, Request)发出的请求，由于不会返回结果给客户端，所以参数列表中也没有From </p>\n<p>8.检查进程是否加载<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erlang:whereis(?MODULE).</span><br></pre></td></tr></table></figure></p>\n<p>9.查看进程的信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erlang:process_info(pid(0,PID,0)).</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.-behaviour(gen_server)<br>它表示让编译器检查，当前module是否实现了gen_server指定的所有回调接口</p>\n<p>2.gen_server:start_link(ServerName, Module, Args, Options) -&gt; Result<br>这个方法用来启动一个server，其中：<br>参数ServerName指定了服务名<br>参数Module指定了该server的callback模块<br>参数Args将作为服务初始化的启动参数（服务初始化时会调用：Module:init([Args])）<br>参数Options指定了一些特性参数，通常可以直接使用[] </p>\n<p>如果服务启动成功，返回{ok, Pid} </p>\n<p>3.Module:init([Args])<br>这个方法会在服务初始化时被回调，参数Args就是gen_server:start_link中倒数第二个参数，若初始化成功，该方法放回{ok, State},其中State将作为启动服务的State </p>\n<p>4.gen_server:call(ServerRef, Request)<br>这个方法供callback模块向ServerRef代表的服务发送Request请求（callback模块通常会在之上再封装一层接口供客户端调用，譬如这里的add，find方法），注意该方法是一个同步调用，它会一直等待服务器返回一个响应消息（除非等待超时，默认5s） </p>\n<p>5.Module:handle_call(Request, From, State) -&gt; Result<br>这是一个回调方法，用来处理gen_server:call(ServerRef, Request)发出的请求，其中：<br>Request，表示客户端请求<br>From，表示请求来自哪个客户端<br>State，表示当前服务器状态 </p>\n<p>Result为handle_call 请求处理结果，它有以下几种类型<br>{reply,Reply,NewState}<br>{reply,Reply,NewState,Timeout}<br>{reply,Reply,NewState,hibernate}<br>{noreply,NewState}<br>{noreply,NewState,Timeout}<br>{noreply,NewState,hibernate}<br>{stop,Reason,Reply,NewState} | {stop,Reason,NewState} </p>\n<p>这几种返回值有什么区别呢？<br>如果返回的是以reply开头，那么Reply将会作为响应返回给客户端<br>如果返回的是以noreply开头，那么服务器将不会返回任何消息给客户端（这会导致客户端阻塞，因为客户端调用的gen_server:call方法是一个同步调用，当它发出请求后，会一直等待服务器发送响应消息，除非等待超时） </p>\n<p>6.gen_server:cast(ServerRef, Request)<br>这个方法同gen_server:call(ServerRef, Request)，但它最大的区别就是该调用是异步的，它不需要等待服务器返回任何处理结果 </p>\n<p>7.Module:handle_cast(Request, State) -&gt; Result<br>这个方法用来处理gen_server:cast(ServerRef, Request)发出的请求，由于不会返回结果给客户端，所以参数列表中也没有From </p>\n<p>8.检查进程是否加载<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erlang:whereis(?MODULE).</span><br></pre></td></tr></table></figure></p>\n<p>9.查看进程的信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erlang:process_info(pid(0,PID,0)).</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Mysql笔记","date":"2018-10-31T07:04:42.000Z","_content":"\n第1章 SQL基础\n1.数据分为DDL(数据定义语言)，DML(数据操纵语言)，DCL(数据控制语言)\n\t1.1 DDL语句\n\t``` bash\n\tmysql -uroot -p\n\tcreate database test1;\n\tuse test1;\n\tshow tables;   \t\t\t\t\t\t\t\t#查看所有表\n\tdrop database test1;\n\tcreate table emp(ename varchar(10),hiredate date,sal decimal(2,10),deptno int(2));\n\tdesc emp;\t\t\t\t\t\t\t\t\t#查看表信息\n\tshow create table emp \\G;\t\t\t\t\t#\\G使得记录能够按照字段竖向排列 以便显示更长内容\n\tdrop table emp;\n\talter table emp modify ename varchar(20);\t#修改表字段\n\talter table emp add column age int(3);\t\t#添加字段\n\talter table emp drop colum age\t\t\t\t#删除字段\n\talter table emp change age age123 int(4);\t#字段改名同时修改类型\n\talter table emp add birth date after ename;\t#修改字段排列顺序\n\talter table emp rename emp1;\n\t```\n\n<!-- more -->\n\t1.2 DML语句 增删改查\n\t``` bash\n\tinsert into emp (ename,sal) values('dony',1000);\n\tdelete from emp where ename = 'xxx';\n\tselect distinct age from emp1;\t\t\t\t\t\t\t\t\t\t\t\t#查询的内容去重\n\tselect * from emp order by age,deptno desc;\t\t\t\t\t\t\t\t\t#根据某个字段排序\n \tselect age,count(1) from emp group by age with rollup;\t\t\t\t\t\t#分类统计计数及总数\n \tselect age,count(1) from emp group by age having count(1)>1;\n \tselect ename,deptname from emp,dept where emp.age = dept.age;\t\t\t\t#联查,内链接\n \tselect ename,deptname from emp left jion dept on emp.deptno = dept.deptno;\t#表链接很多情况下优于子查询\n \tselect * from dept union all select * from emp;\t\t\t\t\t\t\t\t#集合显示不去重\n \tselect * from dept union select * from emp;\t\t\t\t\t\t\t\t\t#集合显示去重\n\t```\n\tYou can't specify target table ' for update in FROM clause\n\tMysql不让对查询到的目标语句进行更新\n\t``` bash\n\tDELETE FROM playeritems WHERE id IN(SELECT mid FROM (SELECT min(id) as mid FROM playeritems WHERE uid = '1300200112870961' GROUP BY iname HAVING count(iname) > 1 )as tmp);\n\t```\n\n\t1.3 DCL语句\n\t``` bash\n\tgrant select,insert on sakila.* to 'z1@localhost' identified by '123'; \t\t#赋予用户权限\n\trevoke insert on sakila.* from 'z1@localhost';\t\t\t\t\t\t\t\t#回收权限\n\t```\n\n2.常用函数\n\t``` bash\n\tselect NOW();\t\t\t\t\t\t\t\t\t#xxxx-xx-xx xx:xx:xx\n\tselect UNIX_TIMESTAMP(now());\t\t\t\t\t#时间戳\n\tselect FROM_UNIXTIME(时间戳);\t\t\t\t\t#xxxx-xx-xx xx:xx:xx\n\tIF(value,t,f)\t\t\t\t\t\t\t\t\t#如果value为真，返回t,否则返回f\n\tselect if(a > 2000, 'high','low') from B\n\tIFNULL(value1,value2)\t\t\t\t\t\t\t#如果value1不为空，返回value1,否则返回value2\n\tselect ifnull(a , 0) from B\n\tCASE WHEN value THEN res1 ... ELSE def END\t\t#如果value1真，返回res1,否则返回def\n\tselect case when a<2000 then 'low' else 'high' end from B\n\tCASE exp WHEN value THEN res1 ... ELSE def END\t#如果exp = value1真，返回res1,否则返回def\n\tselect case a when 1000 then 'low' when 2000 then 'mid' else 'high' end from B\n\t```\n\n第2章 存储引擎\n1.mysql的存储引擎有好多种，这边记录2种\n\t1.1 MyISAM 不支持事务、不支持外键、速度快、表锁\n\t1.2 InnoDB 支持提交、回滚、奔溃恢复能力的事务安全，行锁\n\n2.myssql事务\n``` bash\nstart transaction;\nsql 操作\ncommit and chain;\n```\n\n3.防止sql注入\n``` bash\n$re = \"/(|\\'|(\\%27)|\\;|(\\%3b)|\\=|(\\%3d)|\\(|(\\%28)|\\)|(\\%29)|(\\/*) |(\\%2f%2a)|(\\ */)|(\\%2a%2f)|\\+|(\\%2b)|\\<|(\\%3c)|\\>|(\\%3e)|\\(--))|\\[|\\%5b|\\]|\\%5d)/\";\n\nif(preg_match($re, $aa) >0){\n\techo(\"参数不对\");\n\treturn 0;\n}\n```\n\n4.SQL MODE\nANSI 使语法行为更符合sql\nSTRICT_TRANS_TABLES 试用于事务，严格模式，报错不警告,不允许非法日期\nTRADITIONAL 严格模式，适用于事务非事务，不警告直接报错\n\n5.sql分区\nRANGE分区：基于一个给定连续区间范围，把数据分配到不同分区\nLIST分区：类似RANGE\nHASH分区：基于给定的分区个数，把数据分配到不同分区\nKEY分区：类似于HASH分区\nRANGE\\LIST\\HASH分区键必须INT型\n\n好处4点\n存储更多数据、优化查询、快速删除数据、获得更大查询吞吐量\nRange分区利用取值范围将数据分成分区\n``` bash\nCREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY RANGE(ID)(\nPARTITION p0 VALUES LESS THAN (6),\nPARTITION p1 VALUES LESS THAN (11),\nPARTITION pmax VALUES LESS THAN maxvalue\n);\n```\nLIST分区是建立离散的之列表告诉数据库特定值在哪个分区\n``` bash\nCREATE TABLE expense(\nexpense_date DATE NOT NULL,\ncategory INT,\namount DECIMAL (10,3)\n)\nPARTITION BY LIST(category)(\nPARTITION p0 VALUES IN(3,5),#可字符串在5.5版本后\nPARTITION p1 VALUES IN(1,10),\nPARTITION p2 VALUES IN(4,9),\nPARTITION p3 VALUES IN(2),\nPARTITION p4 VALUES IN(6)\n);\n```\nColumns分区可分为 RANGE Columns和LIST Columns分区都支持int\\date\\string,还支持多列\n``` bash\nCREATE TABLE expense(\na INT,\nb INT\n)\nPARTITION BY RANGE COLUMS(a,b)(\nPARTITION p0 VALUES IN(0,10),#可字符串在5.5版本后\nPARTITION p1 VALUES IN(10,10),\nPARTITION p2 VALUES IN(10,29)\n);\n```\nHASH分区用来分散热点读，确保数据在预留分区平均分布，有常规分区和线性分区\n``` bash\n#常规 平衡不方便\nCREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY HASH(ID) PARTITIONS 4;\n#线性 快速不平衡\nCREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY LINEAR HASH(ID) PARTITIONS 4;\n```\nkey分区\n类似HASH分区，数据类型除TEXThe BLOB以外都可以\n\nRANGE&LIST 分区管理 分区被删除了分区中的数据也被删除了\n``` bash\nalter table xxx drop partition p2; #删\nalter table xxx add partition (partiton p5 values less than (2025)) #增  不能添加一个包含现有分区值列表中的任意值分区\nalter table xxx reorganize partition p3 into (\n\tpartition p2 values less than (2005),\n\tpartition p3 values less than (2015)\n);\t\t\t#拆分\nalter table xxx reorganize partition p1,p2,p3 into (\n\tpartition p1 values less than (2015)\n);\t\t#合并\n```\n\nHASH&KEY 分区管理\n``` bash\nalter table xxx coalesce partition 2; #原4删2\nalter table xxx coalesce partition 8; #原4加8\n```\n\n6.SQL优化\n1. 通过慢查询日志定位效率低的sql,在查询过程中出现的情况可以用show processlist命令查看mysql进程，看锁表及进程状态\n2. 将慢的sql提取做explain分析，type的性能如下\n\tALL,全表扫瞄\n\tindex,索引全扫描\n\trange,索引范围扫描 常见<\\<=\\>\\>=\\between\n\tref,使用非唯一索引扫描或者唯一索引前缀扫描（联合索引）\n\teq_ref,使用唯一索引\n\tconst/system,单表中最多有一个匹配行\n\tNULL，不查表直接得到结果\n\t自上而下效率越来越高\n3. 通过show profile分析sql\n``` bash\n\tselect @@have_profiling;\t#查询是否支持\n\tselect @@profiling;\t\t#查询是否开启\n\tset profiling=1;\t\t#开启\n\tshow profiles;\t\t\t#显示sql的执行排列\n\tshow profile for query 4;\t#查找具体某一条的状态\n\tshow profile cpu for query 4;\t#查询莫一条在具体（all\\cpu\\block io\\context\\switch\\page faults）\n```\n\n\n","source":"_posts/Mysql笔记.md","raw":"---\ntitle: Mysql笔记\ndate: 2018-10-31 15:04:42\ncategories: \"数据库\"\ntags:\n\t- mysql\n---\n\n第1章 SQL基础\n1.数据分为DDL(数据定义语言)，DML(数据操纵语言)，DCL(数据控制语言)\n\t1.1 DDL语句\n\t``` bash\n\tmysql -uroot -p\n\tcreate database test1;\n\tuse test1;\n\tshow tables;   \t\t\t\t\t\t\t\t#查看所有表\n\tdrop database test1;\n\tcreate table emp(ename varchar(10),hiredate date,sal decimal(2,10),deptno int(2));\n\tdesc emp;\t\t\t\t\t\t\t\t\t#查看表信息\n\tshow create table emp \\G;\t\t\t\t\t#\\G使得记录能够按照字段竖向排列 以便显示更长内容\n\tdrop table emp;\n\talter table emp modify ename varchar(20);\t#修改表字段\n\talter table emp add column age int(3);\t\t#添加字段\n\talter table emp drop colum age\t\t\t\t#删除字段\n\talter table emp change age age123 int(4);\t#字段改名同时修改类型\n\talter table emp add birth date after ename;\t#修改字段排列顺序\n\talter table emp rename emp1;\n\t```\n\n<!-- more -->\n\t1.2 DML语句 增删改查\n\t``` bash\n\tinsert into emp (ename,sal) values('dony',1000);\n\tdelete from emp where ename = 'xxx';\n\tselect distinct age from emp1;\t\t\t\t\t\t\t\t\t\t\t\t#查询的内容去重\n\tselect * from emp order by age,deptno desc;\t\t\t\t\t\t\t\t\t#根据某个字段排序\n \tselect age,count(1) from emp group by age with rollup;\t\t\t\t\t\t#分类统计计数及总数\n \tselect age,count(1) from emp group by age having count(1)>1;\n \tselect ename,deptname from emp,dept where emp.age = dept.age;\t\t\t\t#联查,内链接\n \tselect ename,deptname from emp left jion dept on emp.deptno = dept.deptno;\t#表链接很多情况下优于子查询\n \tselect * from dept union all select * from emp;\t\t\t\t\t\t\t\t#集合显示不去重\n \tselect * from dept union select * from emp;\t\t\t\t\t\t\t\t\t#集合显示去重\n\t```\n\tYou can't specify target table ' for update in FROM clause\n\tMysql不让对查询到的目标语句进行更新\n\t``` bash\n\tDELETE FROM playeritems WHERE id IN(SELECT mid FROM (SELECT min(id) as mid FROM playeritems WHERE uid = '1300200112870961' GROUP BY iname HAVING count(iname) > 1 )as tmp);\n\t```\n\n\t1.3 DCL语句\n\t``` bash\n\tgrant select,insert on sakila.* to 'z1@localhost' identified by '123'; \t\t#赋予用户权限\n\trevoke insert on sakila.* from 'z1@localhost';\t\t\t\t\t\t\t\t#回收权限\n\t```\n\n2.常用函数\n\t``` bash\n\tselect NOW();\t\t\t\t\t\t\t\t\t#xxxx-xx-xx xx:xx:xx\n\tselect UNIX_TIMESTAMP(now());\t\t\t\t\t#时间戳\n\tselect FROM_UNIXTIME(时间戳);\t\t\t\t\t#xxxx-xx-xx xx:xx:xx\n\tIF(value,t,f)\t\t\t\t\t\t\t\t\t#如果value为真，返回t,否则返回f\n\tselect if(a > 2000, 'high','low') from B\n\tIFNULL(value1,value2)\t\t\t\t\t\t\t#如果value1不为空，返回value1,否则返回value2\n\tselect ifnull(a , 0) from B\n\tCASE WHEN value THEN res1 ... ELSE def END\t\t#如果value1真，返回res1,否则返回def\n\tselect case when a<2000 then 'low' else 'high' end from B\n\tCASE exp WHEN value THEN res1 ... ELSE def END\t#如果exp = value1真，返回res1,否则返回def\n\tselect case a when 1000 then 'low' when 2000 then 'mid' else 'high' end from B\n\t```\n\n第2章 存储引擎\n1.mysql的存储引擎有好多种，这边记录2种\n\t1.1 MyISAM 不支持事务、不支持外键、速度快、表锁\n\t1.2 InnoDB 支持提交、回滚、奔溃恢复能力的事务安全，行锁\n\n2.myssql事务\n``` bash\nstart transaction;\nsql 操作\ncommit and chain;\n```\n\n3.防止sql注入\n``` bash\n$re = \"/(|\\'|(\\%27)|\\;|(\\%3b)|\\=|(\\%3d)|\\(|(\\%28)|\\)|(\\%29)|(\\/*) |(\\%2f%2a)|(\\ */)|(\\%2a%2f)|\\+|(\\%2b)|\\<|(\\%3c)|\\>|(\\%3e)|\\(--))|\\[|\\%5b|\\]|\\%5d)/\";\n\nif(preg_match($re, $aa) >0){\n\techo(\"参数不对\");\n\treturn 0;\n}\n```\n\n4.SQL MODE\nANSI 使语法行为更符合sql\nSTRICT_TRANS_TABLES 试用于事务，严格模式，报错不警告,不允许非法日期\nTRADITIONAL 严格模式，适用于事务非事务，不警告直接报错\n\n5.sql分区\nRANGE分区：基于一个给定连续区间范围，把数据分配到不同分区\nLIST分区：类似RANGE\nHASH分区：基于给定的分区个数，把数据分配到不同分区\nKEY分区：类似于HASH分区\nRANGE\\LIST\\HASH分区键必须INT型\n\n好处4点\n存储更多数据、优化查询、快速删除数据、获得更大查询吞吐量\nRange分区利用取值范围将数据分成分区\n``` bash\nCREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY RANGE(ID)(\nPARTITION p0 VALUES LESS THAN (6),\nPARTITION p1 VALUES LESS THAN (11),\nPARTITION pmax VALUES LESS THAN maxvalue\n);\n```\nLIST分区是建立离散的之列表告诉数据库特定值在哪个分区\n``` bash\nCREATE TABLE expense(\nexpense_date DATE NOT NULL,\ncategory INT,\namount DECIMAL (10,3)\n)\nPARTITION BY LIST(category)(\nPARTITION p0 VALUES IN(3,5),#可字符串在5.5版本后\nPARTITION p1 VALUES IN(1,10),\nPARTITION p2 VALUES IN(4,9),\nPARTITION p3 VALUES IN(2),\nPARTITION p4 VALUES IN(6)\n);\n```\nColumns分区可分为 RANGE Columns和LIST Columns分区都支持int\\date\\string,还支持多列\n``` bash\nCREATE TABLE expense(\na INT,\nb INT\n)\nPARTITION BY RANGE COLUMS(a,b)(\nPARTITION p0 VALUES IN(0,10),#可字符串在5.5版本后\nPARTITION p1 VALUES IN(10,10),\nPARTITION p2 VALUES IN(10,29)\n);\n```\nHASH分区用来分散热点读，确保数据在预留分区平均分布，有常规分区和线性分区\n``` bash\n#常规 平衡不方便\nCREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY HASH(ID) PARTITIONS 4;\n#线性 快速不平衡\nCREATE TABLE emp(\nid INT NOT NULL,\nNAME VARCHAR(20),\nage INT\n)\nPARTITION BY LINEAR HASH(ID) PARTITIONS 4;\n```\nkey分区\n类似HASH分区，数据类型除TEXThe BLOB以外都可以\n\nRANGE&LIST 分区管理 分区被删除了分区中的数据也被删除了\n``` bash\nalter table xxx drop partition p2; #删\nalter table xxx add partition (partiton p5 values less than (2025)) #增  不能添加一个包含现有分区值列表中的任意值分区\nalter table xxx reorganize partition p3 into (\n\tpartition p2 values less than (2005),\n\tpartition p3 values less than (2015)\n);\t\t\t#拆分\nalter table xxx reorganize partition p1,p2,p3 into (\n\tpartition p1 values less than (2015)\n);\t\t#合并\n```\n\nHASH&KEY 分区管理\n``` bash\nalter table xxx coalesce partition 2; #原4删2\nalter table xxx coalesce partition 8; #原4加8\n```\n\n6.SQL优化\n1. 通过慢查询日志定位效率低的sql,在查询过程中出现的情况可以用show processlist命令查看mysql进程，看锁表及进程状态\n2. 将慢的sql提取做explain分析，type的性能如下\n\tALL,全表扫瞄\n\tindex,索引全扫描\n\trange,索引范围扫描 常见<\\<=\\>\\>=\\between\n\tref,使用非唯一索引扫描或者唯一索引前缀扫描（联合索引）\n\teq_ref,使用唯一索引\n\tconst/system,单表中最多有一个匹配行\n\tNULL，不查表直接得到结果\n\t自上而下效率越来越高\n3. 通过show profile分析sql\n``` bash\n\tselect @@have_profiling;\t#查询是否支持\n\tselect @@profiling;\t\t#查询是否开启\n\tset profiling=1;\t\t#开启\n\tshow profiles;\t\t\t#显示sql的执行排列\n\tshow profile for query 4;\t#查找具体某一条的状态\n\tshow profile cpu for query 4;\t#查询莫一条在具体（all\\cpu\\block io\\context\\switch\\page faults）\n```\n\n\n","slug":"Mysql笔记","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc90f00021d8nu6tmgja9","content":"<p>第1章 SQL基础<br>1.数据分为DDL(数据定义语言)，DML(数据操纵语言)，DCL(数据控制语言)<br>    1.1 DDL语句<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">create database test1;</span><br><span class=\"line\">use test1;</span><br><span class=\"line\">show tables;   \t\t\t\t\t\t\t\t<span class=\"comment\">#查看所有表</span></span><br><span class=\"line\">drop database test1;</span><br><span class=\"line\">create table emp(ename varchar(10),hiredate date,sal decimal(2,10),deptno int(2));</span><br><span class=\"line\">desc emp;\t\t\t\t\t\t\t\t\t<span class=\"comment\">#查看表信息</span></span><br><span class=\"line\">show create table emp \\G;\t\t\t\t\t<span class=\"comment\">#\\G使得记录能够按照字段竖向排列 以便显示更长内容</span></span><br><span class=\"line\">drop table emp;</span><br><span class=\"line\">alter table emp modify ename varchar(20);\t<span class=\"comment\">#修改表字段</span></span><br><span class=\"line\">alter table emp add column age int(3);\t\t<span class=\"comment\">#添加字段</span></span><br><span class=\"line\">alter table emp drop colum age\t\t\t\t<span class=\"comment\">#删除字段</span></span><br><span class=\"line\">alter table emp change age age123 int(4);\t<span class=\"comment\">#字段改名同时修改类型</span></span><br><span class=\"line\">alter table emp add birth date after ename;\t<span class=\"comment\">#修改字段排列顺序</span></span><br><span class=\"line\">alter table emp rename emp1;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<pre><code>1.2 DML语句 增删改查\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into emp (ename,sal) values(<span class=\"string\">'dony'</span>,1000);</span><br><span class=\"line\">delete from emp <span class=\"built_in\">where</span> ename = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\">select distinct age from emp1;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">#查询的内容去重</span></span><br><span class=\"line\">select * from emp order by age,deptno desc;\t\t\t\t\t\t\t\t\t<span class=\"comment\">#根据某个字段排序</span></span><br><span class=\"line\">\tselect age,count(1) from emp group by age with rollup;\t\t\t\t\t\t<span class=\"comment\">#分类统计计数及总数</span></span><br><span class=\"line\">\tselect age,count(1) from emp group by age having count(1)&gt;1;</span><br><span class=\"line\">\tselect ename,deptname from emp,dept <span class=\"built_in\">where</span> emp.age = dept.age;\t\t\t\t<span class=\"comment\">#联查,内链接</span></span><br><span class=\"line\">\tselect ename,deptname from emp left jion dept on emp.deptno = dept.deptno;\t<span class=\"comment\">#表链接很多情况下优于子查询</span></span><br><span class=\"line\">\tselect * from dept union all select * from emp;\t\t\t\t\t\t\t\t<span class=\"comment\">#集合显示不去重</span></span><br><span class=\"line\">\tselect * from dept union select * from emp;\t\t\t\t\t\t\t\t\t<span class=\"comment\">#集合显示去重</span></span><br></pre></td></tr></table></figure>\n\nYou can&apos;t specify target table &apos; for update in FROM clause\nMysql不让对查询到的目标语句进行更新\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM playeritems WHERE id IN(SELECT mid FROM (SELECT min(id) as mid FROM playeritems WHERE uid = <span class=\"string\">'1300200112870961'</span> GROUP BY iname HAVING count(iname) &gt; 1 )as tmp);</span><br></pre></td></tr></table></figure>\n\n1.3 DCL语句\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant select,insert on sakila.* to <span class=\"string\">'z1@localhost'</span> identified by <span class=\"string\">'123'</span>; \t\t<span class=\"comment\">#赋予用户权限</span></span><br><span class=\"line\">revoke insert on sakila.* from <span class=\"string\">'z1@localhost'</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">#回收权限</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>2.常用函数<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select NOW();\t\t\t\t\t\t\t\t\t<span class=\"comment\">#xxxx-xx-xx xx:xx:xx</span></span><br><span class=\"line\">select UNIX_TIMESTAMP(now());\t\t\t\t\t<span class=\"comment\">#时间戳</span></span><br><span class=\"line\">select FROM_UNIXTIME(时间戳);\t\t\t\t\t<span class=\"comment\">#xxxx-xx-xx xx:xx:xx</span></span><br><span class=\"line\">IF(value,t,f)\t\t\t\t\t\t\t\t\t<span class=\"comment\">#如果value为真，返回t,否则返回f</span></span><br><span class=\"line\">select <span class=\"keyword\">if</span>(a &gt; 2000, <span class=\"string\">'high'</span>,<span class=\"string\">'low'</span>) from B</span><br><span class=\"line\">IFNULL(value1,value2)\t\t\t\t\t\t\t<span class=\"comment\">#如果value1不为空，返回value1,否则返回value2</span></span><br><span class=\"line\">select ifnull(a , 0) from B</span><br><span class=\"line\">CASE WHEN value THEN res1 ... ELSE def END\t\t<span class=\"comment\">#如果value1真，返回res1,否则返回def</span></span><br><span class=\"line\">select <span class=\"keyword\">case</span> when a&lt;2000 <span class=\"keyword\">then</span> <span class=\"string\">'low'</span> <span class=\"keyword\">else</span> <span class=\"string\">'high'</span> end from B</span><br><span class=\"line\">CASE exp WHEN value THEN res1 ... ELSE def END\t<span class=\"comment\">#如果exp = value1真，返回res1,否则返回def</span></span><br><span class=\"line\">select <span class=\"keyword\">case</span> a when 1000 <span class=\"keyword\">then</span> <span class=\"string\">'low'</span> when 2000 <span class=\"keyword\">then</span> <span class=\"string\">'mid'</span> <span class=\"keyword\">else</span> <span class=\"string\">'high'</span> end from B</span><br></pre></td></tr></table></figure></p>\n<p>第2章 存储引擎<br>1.mysql的存储引擎有好多种，这边记录2种<br>    1.1 MyISAM 不支持事务、不支持外键、速度快、表锁<br>    1.2 InnoDB 支持提交、回滚、奔溃恢复能力的事务安全，行锁</p>\n<p>2.myssql事务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start transaction;</span><br><span class=\"line\">sql 操作</span><br><span class=\"line\">commit and chain;</span><br></pre></td></tr></table></figure></p>\n<p>3.防止sql注入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$re</span> = <span class=\"string\">\"/(|\\'|(\\%27)|\\;|(\\%3b)|\\=|(\\%3d)|\\(|(\\%28)|\\)|(\\%29)|(\\/*) |(\\%2f%2a)|(\\ */)|(\\%2a%2f)|\\+|(\\%2b)|\\&lt;|(\\%3c)|\\&gt;|(\\%3e)|\\(--))|\\[|\\%5b|\\]|\\%5d)/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(preg_match(<span class=\"variable\">$re</span>, <span class=\"variable\">$aa</span>) &gt;0)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span>(<span class=\"string\">\"参数不对\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.SQL MODE<br>ANSI 使语法行为更符合sql<br>STRICT_TRANS_TABLES 试用于事务，严格模式，报错不警告,不允许非法日期<br>TRADITIONAL 严格模式，适用于事务非事务，不警告直接报错</p>\n<p>5.sql分区<br>RANGE分区：基于一个给定连续区间范围，把数据分配到不同分区<br>LIST分区：类似RANGE<br>HASH分区：基于给定的分区个数，把数据分配到不同分区<br>KEY分区：类似于HASH分区<br>RANGE\\LIST\\HASH分区键必须INT型</p>\n<p>好处4点<br>存储更多数据、优化查询、快速删除数据、获得更大查询吞吐量<br>Range分区利用取值范围将数据分成分区<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE emp(</span><br><span class=\"line\">id INT NOT NULL,</span><br><span class=\"line\">NAME VARCHAR(20),</span><br><span class=\"line\">age INT</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY RANGE(ID)(</span><br><span class=\"line\">PARTITION p0 VALUES LESS THAN (6),</span><br><span class=\"line\">PARTITION p1 VALUES LESS THAN (11),</span><br><span class=\"line\">PARTITION pmax VALUES LESS THAN maxvalue</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>LIST分区是建立离散的之列表告诉数据库特定值在哪个分区<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE expense(</span><br><span class=\"line\">expense_date DATE NOT NULL,</span><br><span class=\"line\">category INT,</span><br><span class=\"line\">amount DECIMAL (10,3)</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY LIST(category)(</span><br><span class=\"line\">PARTITION p0 VALUES IN(3,5),<span class=\"comment\">#可字符串在5.5版本后</span></span><br><span class=\"line\">PARTITION p1 VALUES IN(1,10),</span><br><span class=\"line\">PARTITION p2 VALUES IN(4,9),</span><br><span class=\"line\">PARTITION p3 VALUES IN(2),</span><br><span class=\"line\">PARTITION p4 VALUES IN(6)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>Columns分区可分为 RANGE Columns和LIST Columns分区都支持int\\date\\string,还支持多列<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE expense(</span><br><span class=\"line\">a INT,</span><br><span class=\"line\">b INT</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY RANGE COLUMS(a,b)(</span><br><span class=\"line\">PARTITION p0 VALUES IN(0,10),<span class=\"comment\">#可字符串在5.5版本后</span></span><br><span class=\"line\">PARTITION p1 VALUES IN(10,10),</span><br><span class=\"line\">PARTITION p2 VALUES IN(10,29)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>HASH分区用来分散热点读，确保数据在预留分区平均分布，有常规分区和线性分区<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#常规 平衡不方便</span></span><br><span class=\"line\">CREATE TABLE emp(</span><br><span class=\"line\">id INT NOT NULL,</span><br><span class=\"line\">NAME VARCHAR(20),</span><br><span class=\"line\">age INT</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY HASH(ID) PARTITIONS 4;</span><br><span class=\"line\"><span class=\"comment\">#线性 快速不平衡</span></span><br><span class=\"line\">CREATE TABLE emp(</span><br><span class=\"line\">id INT NOT NULL,</span><br><span class=\"line\">NAME VARCHAR(20),</span><br><span class=\"line\">age INT</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY LINEAR HASH(ID) PARTITIONS 4;</span><br></pre></td></tr></table></figure></p>\n<p>key分区<br>类似HASH分区，数据类型除TEXThe BLOB以外都可以</p>\n<p>RANGE&amp;LIST 分区管理 分区被删除了分区中的数据也被删除了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table xxx drop partition p2; <span class=\"comment\">#删</span></span><br><span class=\"line\">alter table xxx add partition (partiton p5 values less than (2025)) <span class=\"comment\">#增  不能添加一个包含现有分区值列表中的任意值分区</span></span><br><span class=\"line\">alter table xxx reorganize partition p3 into (</span><br><span class=\"line\">\tpartition p2 values less than (2005),</span><br><span class=\"line\">\tpartition p3 values less than (2015)</span><br><span class=\"line\">);\t\t\t<span class=\"comment\">#拆分</span></span><br><span class=\"line\">alter table xxx reorganize partition p1,p2,p3 into (</span><br><span class=\"line\">\tpartition p1 values less than (2015)</span><br><span class=\"line\">);\t\t<span class=\"comment\">#合并</span></span><br></pre></td></tr></table></figure></p>\n<p>HASH&amp;KEY 分区管理<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table xxx coalesce partition 2; <span class=\"comment\">#原4删2</span></span><br><span class=\"line\">alter table xxx coalesce partition 8; <span class=\"comment\">#原4加8</span></span><br></pre></td></tr></table></figure></p>\n<p>6.SQL优化</p>\n<ol>\n<li>通过慢查询日志定位效率低的sql,在查询过程中出现的情况可以用show processlist命令查看mysql进程，看锁表及进程状态</li>\n<li>将慢的sql提取做explain分析，type的性能如下<br> ALL,全表扫瞄<br> index,索引全扫描<br> range,索引范围扫描 常见&lt;\\&lt;=>>=\\between<br> ref,使用非唯一索引扫描或者唯一索引前缀扫描（联合索引）<br> eq_ref,使用唯一索引<br> const/system,单表中最多有一个匹配行<br> NULL，不查表直接得到结果<br> 自上而下效率越来越高</li>\n<li>通过show profile分析sql<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@have_profiling;\t<span class=\"comment\">#查询是否支持</span></span><br><span class=\"line\">select @@profiling;\t\t<span class=\"comment\">#查询是否开启</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> profiling=1;\t\t<span class=\"comment\">#开启</span></span><br><span class=\"line\">show profiles;\t\t\t<span class=\"comment\">#显示sql的执行排列</span></span><br><span class=\"line\">show profile <span class=\"keyword\">for</span> query 4;\t<span class=\"comment\">#查找具体某一条的状态</span></span><br><span class=\"line\">show profile cpu <span class=\"keyword\">for</span> query 4;\t<span class=\"comment\">#查询莫一条在具体（all\\cpu\\block io\\context\\switch\\page faults）</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>第1章 SQL基础<br>1.数据分为DDL(数据定义语言)，DML(数据操纵语言)，DCL(数据控制语言)<br>    1.1 DDL语句<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">create database test1;</span><br><span class=\"line\">use test1;</span><br><span class=\"line\">show tables;   \t\t\t\t\t\t\t\t<span class=\"comment\">#查看所有表</span></span><br><span class=\"line\">drop database test1;</span><br><span class=\"line\">create table emp(ename varchar(10),hiredate date,sal decimal(2,10),deptno int(2));</span><br><span class=\"line\">desc emp;\t\t\t\t\t\t\t\t\t<span class=\"comment\">#查看表信息</span></span><br><span class=\"line\">show create table emp \\G;\t\t\t\t\t<span class=\"comment\">#\\G使得记录能够按照字段竖向排列 以便显示更长内容</span></span><br><span class=\"line\">drop table emp;</span><br><span class=\"line\">alter table emp modify ename varchar(20);\t<span class=\"comment\">#修改表字段</span></span><br><span class=\"line\">alter table emp add column age int(3);\t\t<span class=\"comment\">#添加字段</span></span><br><span class=\"line\">alter table emp drop colum age\t\t\t\t<span class=\"comment\">#删除字段</span></span><br><span class=\"line\">alter table emp change age age123 int(4);\t<span class=\"comment\">#字段改名同时修改类型</span></span><br><span class=\"line\">alter table emp add birth date after ename;\t<span class=\"comment\">#修改字段排列顺序</span></span><br><span class=\"line\">alter table emp rename emp1;</span><br></pre></td></tr></table></figure></p>","more":"<pre><code>1.2 DML语句 增删改查\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into emp (ename,sal) values(<span class=\"string\">'dony'</span>,1000);</span><br><span class=\"line\">delete from emp <span class=\"built_in\">where</span> ename = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\">select distinct age from emp1;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">#查询的内容去重</span></span><br><span class=\"line\">select * from emp order by age,deptno desc;\t\t\t\t\t\t\t\t\t<span class=\"comment\">#根据某个字段排序</span></span><br><span class=\"line\">\tselect age,count(1) from emp group by age with rollup;\t\t\t\t\t\t<span class=\"comment\">#分类统计计数及总数</span></span><br><span class=\"line\">\tselect age,count(1) from emp group by age having count(1)&gt;1;</span><br><span class=\"line\">\tselect ename,deptname from emp,dept <span class=\"built_in\">where</span> emp.age = dept.age;\t\t\t\t<span class=\"comment\">#联查,内链接</span></span><br><span class=\"line\">\tselect ename,deptname from emp left jion dept on emp.deptno = dept.deptno;\t<span class=\"comment\">#表链接很多情况下优于子查询</span></span><br><span class=\"line\">\tselect * from dept union all select * from emp;\t\t\t\t\t\t\t\t<span class=\"comment\">#集合显示不去重</span></span><br><span class=\"line\">\tselect * from dept union select * from emp;\t\t\t\t\t\t\t\t\t<span class=\"comment\">#集合显示去重</span></span><br></pre></td></tr></table></figure>\n\nYou can&apos;t specify target table &apos; for update in FROM clause\nMysql不让对查询到的目标语句进行更新\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM playeritems WHERE id IN(SELECT mid FROM (SELECT min(id) as mid FROM playeritems WHERE uid = <span class=\"string\">'1300200112870961'</span> GROUP BY iname HAVING count(iname) &gt; 1 )as tmp);</span><br></pre></td></tr></table></figure>\n\n1.3 DCL语句\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant select,insert on sakila.* to <span class=\"string\">'z1@localhost'</span> identified by <span class=\"string\">'123'</span>; \t\t<span class=\"comment\">#赋予用户权限</span></span><br><span class=\"line\">revoke insert on sakila.* from <span class=\"string\">'z1@localhost'</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">#回收权限</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>2.常用函数<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select NOW();\t\t\t\t\t\t\t\t\t<span class=\"comment\">#xxxx-xx-xx xx:xx:xx</span></span><br><span class=\"line\">select UNIX_TIMESTAMP(now());\t\t\t\t\t<span class=\"comment\">#时间戳</span></span><br><span class=\"line\">select FROM_UNIXTIME(时间戳);\t\t\t\t\t<span class=\"comment\">#xxxx-xx-xx xx:xx:xx</span></span><br><span class=\"line\">IF(value,t,f)\t\t\t\t\t\t\t\t\t<span class=\"comment\">#如果value为真，返回t,否则返回f</span></span><br><span class=\"line\">select <span class=\"keyword\">if</span>(a &gt; 2000, <span class=\"string\">'high'</span>,<span class=\"string\">'low'</span>) from B</span><br><span class=\"line\">IFNULL(value1,value2)\t\t\t\t\t\t\t<span class=\"comment\">#如果value1不为空，返回value1,否则返回value2</span></span><br><span class=\"line\">select ifnull(a , 0) from B</span><br><span class=\"line\">CASE WHEN value THEN res1 ... ELSE def END\t\t<span class=\"comment\">#如果value1真，返回res1,否则返回def</span></span><br><span class=\"line\">select <span class=\"keyword\">case</span> when a&lt;2000 <span class=\"keyword\">then</span> <span class=\"string\">'low'</span> <span class=\"keyword\">else</span> <span class=\"string\">'high'</span> end from B</span><br><span class=\"line\">CASE exp WHEN value THEN res1 ... ELSE def END\t<span class=\"comment\">#如果exp = value1真，返回res1,否则返回def</span></span><br><span class=\"line\">select <span class=\"keyword\">case</span> a when 1000 <span class=\"keyword\">then</span> <span class=\"string\">'low'</span> when 2000 <span class=\"keyword\">then</span> <span class=\"string\">'mid'</span> <span class=\"keyword\">else</span> <span class=\"string\">'high'</span> end from B</span><br></pre></td></tr></table></figure></p>\n<p>第2章 存储引擎<br>1.mysql的存储引擎有好多种，这边记录2种<br>    1.1 MyISAM 不支持事务、不支持外键、速度快、表锁<br>    1.2 InnoDB 支持提交、回滚、奔溃恢复能力的事务安全，行锁</p>\n<p>2.myssql事务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start transaction;</span><br><span class=\"line\">sql 操作</span><br><span class=\"line\">commit and chain;</span><br></pre></td></tr></table></figure></p>\n<p>3.防止sql注入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$re</span> = <span class=\"string\">\"/(|\\'|(\\%27)|\\;|(\\%3b)|\\=|(\\%3d)|\\(|(\\%28)|\\)|(\\%29)|(\\/*) |(\\%2f%2a)|(\\ */)|(\\%2a%2f)|\\+|(\\%2b)|\\&lt;|(\\%3c)|\\&gt;|(\\%3e)|\\(--))|\\[|\\%5b|\\]|\\%5d)/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(preg_match(<span class=\"variable\">$re</span>, <span class=\"variable\">$aa</span>) &gt;0)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span>(<span class=\"string\">\"参数不对\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.SQL MODE<br>ANSI 使语法行为更符合sql<br>STRICT_TRANS_TABLES 试用于事务，严格模式，报错不警告,不允许非法日期<br>TRADITIONAL 严格模式，适用于事务非事务，不警告直接报错</p>\n<p>5.sql分区<br>RANGE分区：基于一个给定连续区间范围，把数据分配到不同分区<br>LIST分区：类似RANGE<br>HASH分区：基于给定的分区个数，把数据分配到不同分区<br>KEY分区：类似于HASH分区<br>RANGE\\LIST\\HASH分区键必须INT型</p>\n<p>好处4点<br>存储更多数据、优化查询、快速删除数据、获得更大查询吞吐量<br>Range分区利用取值范围将数据分成分区<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE emp(</span><br><span class=\"line\">id INT NOT NULL,</span><br><span class=\"line\">NAME VARCHAR(20),</span><br><span class=\"line\">age INT</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY RANGE(ID)(</span><br><span class=\"line\">PARTITION p0 VALUES LESS THAN (6),</span><br><span class=\"line\">PARTITION p1 VALUES LESS THAN (11),</span><br><span class=\"line\">PARTITION pmax VALUES LESS THAN maxvalue</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>LIST分区是建立离散的之列表告诉数据库特定值在哪个分区<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE expense(</span><br><span class=\"line\">expense_date DATE NOT NULL,</span><br><span class=\"line\">category INT,</span><br><span class=\"line\">amount DECIMAL (10,3)</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY LIST(category)(</span><br><span class=\"line\">PARTITION p0 VALUES IN(3,5),<span class=\"comment\">#可字符串在5.5版本后</span></span><br><span class=\"line\">PARTITION p1 VALUES IN(1,10),</span><br><span class=\"line\">PARTITION p2 VALUES IN(4,9),</span><br><span class=\"line\">PARTITION p3 VALUES IN(2),</span><br><span class=\"line\">PARTITION p4 VALUES IN(6)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>Columns分区可分为 RANGE Columns和LIST Columns分区都支持int\\date\\string,还支持多列<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE expense(</span><br><span class=\"line\">a INT,</span><br><span class=\"line\">b INT</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY RANGE COLUMS(a,b)(</span><br><span class=\"line\">PARTITION p0 VALUES IN(0,10),<span class=\"comment\">#可字符串在5.5版本后</span></span><br><span class=\"line\">PARTITION p1 VALUES IN(10,10),</span><br><span class=\"line\">PARTITION p2 VALUES IN(10,29)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>HASH分区用来分散热点读，确保数据在预留分区平均分布，有常规分区和线性分区<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#常规 平衡不方便</span></span><br><span class=\"line\">CREATE TABLE emp(</span><br><span class=\"line\">id INT NOT NULL,</span><br><span class=\"line\">NAME VARCHAR(20),</span><br><span class=\"line\">age INT</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY HASH(ID) PARTITIONS 4;</span><br><span class=\"line\"><span class=\"comment\">#线性 快速不平衡</span></span><br><span class=\"line\">CREATE TABLE emp(</span><br><span class=\"line\">id INT NOT NULL,</span><br><span class=\"line\">NAME VARCHAR(20),</span><br><span class=\"line\">age INT</span><br><span class=\"line\">)</span><br><span class=\"line\">PARTITION BY LINEAR HASH(ID) PARTITIONS 4;</span><br></pre></td></tr></table></figure></p>\n<p>key分区<br>类似HASH分区，数据类型除TEXThe BLOB以外都可以</p>\n<p>RANGE&amp;LIST 分区管理 分区被删除了分区中的数据也被删除了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table xxx drop partition p2; <span class=\"comment\">#删</span></span><br><span class=\"line\">alter table xxx add partition (partiton p5 values less than (2025)) <span class=\"comment\">#增  不能添加一个包含现有分区值列表中的任意值分区</span></span><br><span class=\"line\">alter table xxx reorganize partition p3 into (</span><br><span class=\"line\">\tpartition p2 values less than (2005),</span><br><span class=\"line\">\tpartition p3 values less than (2015)</span><br><span class=\"line\">);\t\t\t<span class=\"comment\">#拆分</span></span><br><span class=\"line\">alter table xxx reorganize partition p1,p2,p3 into (</span><br><span class=\"line\">\tpartition p1 values less than (2015)</span><br><span class=\"line\">);\t\t<span class=\"comment\">#合并</span></span><br></pre></td></tr></table></figure></p>\n<p>HASH&amp;KEY 分区管理<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table xxx coalesce partition 2; <span class=\"comment\">#原4删2</span></span><br><span class=\"line\">alter table xxx coalesce partition 8; <span class=\"comment\">#原4加8</span></span><br></pre></td></tr></table></figure></p>\n<p>6.SQL优化</p>\n<ol>\n<li>通过慢查询日志定位效率低的sql,在查询过程中出现的情况可以用show processlist命令查看mysql进程，看锁表及进程状态</li>\n<li>将慢的sql提取做explain分析，type的性能如下<br> ALL,全表扫瞄<br> index,索引全扫描<br> range,索引范围扫描 常见&lt;\\&lt;=>>=\\between<br> ref,使用非唯一索引扫描或者唯一索引前缀扫描（联合索引）<br> eq_ref,使用唯一索引<br> const/system,单表中最多有一个匹配行<br> NULL，不查表直接得到结果<br> 自上而下效率越来越高</li>\n<li>通过show profile分析sql<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@have_profiling;\t<span class=\"comment\">#查询是否支持</span></span><br><span class=\"line\">select @@profiling;\t\t<span class=\"comment\">#查询是否开启</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> profiling=1;\t\t<span class=\"comment\">#开启</span></span><br><span class=\"line\">show profiles;\t\t\t<span class=\"comment\">#显示sql的执行排列</span></span><br><span class=\"line\">show profile <span class=\"keyword\">for</span> query 4;\t<span class=\"comment\">#查找具体某一条的状态</span></span><br><span class=\"line\">show profile cpu <span class=\"keyword\">for</span> query 4;\t<span class=\"comment\">#查询莫一条在具体（all\\cpu\\block io\\context\\switch\\page faults）</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"ALC_Sentry","date":"2018-07-24T08:06:55.000Z","_content":"1) 安装环境\n执行命令创建名为sentry的数据库\ncreatedb -E utf-8 sentry\n为sentry项目初始化数据\nsentry --config=~/.sentry/sentry.conf.py upgrade\n创建新用户\nsentry --config=~/.sentry/sentry.conf.py createuser\n然后就可以启动服务了\nsentry --config=~/.sentry/sentry.conf.py start\n另外，还需要启动Worker\nsentry --config=~/.sentry/sentry.conf.py celery worker -B\n假设web服务器端口是9000，那么访问localhost:9000就能开始使用sentry了！\n\n\nsource /usr/local/vir-sentry/bin/activate \nsentry --config=~/.sentry/sentry.conf.py start >> /usr/local/vir-sentry/logs/sentry.log 2>&1 &\n<!-- more -->\n\n2）相关命令\n2.1启动 \nsu - webapp \nsource /usr/local/vir-sentry/bin/activate\nsupervisord -c /etc/supervisord.conf \nsupervisorctl start all \n2.2关闭命令 \nsu - webapp\nsource /usr/local/vir-sentry/bin/activate\nsupervisorctl stop all \nkillall supervisord\n\n*创建账号 sentry createuser\n3)基于node的测试demo\n[raven-node-master.zip](/download/raven-node-master.zip)\n\n4.）界面显示\n![9E26651338B7EE1345DAFDEF0ADDB9C4](9E26651338B7EE1345DAFDEF0ADDB9C4.jpg)\n\nweb 服务器相关配置\t\n![E4B1DB656739C13A7F75B5578E3CB678](E4B1DB656739C13A7F75B5578E3CB678.jpg)","source":"_posts/ALC-Sentry.md","raw":"---\ntitle: ALC_Sentry\ndate: 2018-07-24 16:06:55\ncategories: \"开发环境安装\"\ntags:\n\t- Sentry\n---\n1) 安装环境\n执行命令创建名为sentry的数据库\ncreatedb -E utf-8 sentry\n为sentry项目初始化数据\nsentry --config=~/.sentry/sentry.conf.py upgrade\n创建新用户\nsentry --config=~/.sentry/sentry.conf.py createuser\n然后就可以启动服务了\nsentry --config=~/.sentry/sentry.conf.py start\n另外，还需要启动Worker\nsentry --config=~/.sentry/sentry.conf.py celery worker -B\n假设web服务器端口是9000，那么访问localhost:9000就能开始使用sentry了！\n\n\nsource /usr/local/vir-sentry/bin/activate \nsentry --config=~/.sentry/sentry.conf.py start >> /usr/local/vir-sentry/logs/sentry.log 2>&1 &\n<!-- more -->\n\n2）相关命令\n2.1启动 \nsu - webapp \nsource /usr/local/vir-sentry/bin/activate\nsupervisord -c /etc/supervisord.conf \nsupervisorctl start all \n2.2关闭命令 \nsu - webapp\nsource /usr/local/vir-sentry/bin/activate\nsupervisorctl stop all \nkillall supervisord\n\n*创建账号 sentry createuser\n3)基于node的测试demo\n[raven-node-master.zip](/download/raven-node-master.zip)\n\n4.）界面显示\n![9E26651338B7EE1345DAFDEF0ADDB9C4](9E26651338B7EE1345DAFDEF0ADDB9C4.jpg)\n\nweb 服务器相关配置\t\n![E4B1DB656739C13A7F75B5578E3CB678](E4B1DB656739C13A7F75B5578E3CB678.jpg)","slug":"ALC-Sentry","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc90n00051d8n3fq4gh7n","content":"<p>1) 安装环境<br>执行命令创建名为sentry的数据库<br>createdb -E utf-8 sentry<br>为sentry项目初始化数据<br>sentry –config=~/.sentry/sentry.conf.py upgrade<br>创建新用户<br>sentry –config=~/.sentry/sentry.conf.py createuser<br>然后就可以启动服务了<br>sentry –config=~/.sentry/sentry.conf.py start<br>另外，还需要启动Worker<br>sentry –config=~/.sentry/sentry.conf.py celery worker -B<br>假设web服务器端口是9000，那么访问localhost:9000就能开始使用sentry了！</p>\n<p>source /usr/local/vir-sentry/bin/activate<br>sentry –config=~/.sentry/sentry.conf.py start &gt;&gt; /usr/local/vir-sentry/logs/sentry.log 2&gt;&amp;1 &amp;<br><a id=\"more\"></a></p>\n<p>2）相关命令<br>2.1启动<br>su - webapp<br>source /usr/local/vir-sentry/bin/activate<br>supervisord -c /etc/supervisord.conf<br>supervisorctl start all<br>2.2关闭命令<br>su - webapp<br>source /usr/local/vir-sentry/bin/activate<br>supervisorctl stop all<br>killall supervisord</p>\n<p>*创建账号 sentry createuser<br>3)基于node的测试demo<br><a href=\"/download/raven-node-master.zip\">raven-node-master.zip</a></p>\n<p>4.）界面显示<br><img src=\"9E26651338B7EE1345DAFDEF0ADDB9C4.jpg\" alt=\"9E26651338B7EE1345DAFDEF0ADDB9C4\"></p>\n<p>web 服务器相关配置<br><img src=\"E4B1DB656739C13A7F75B5578E3CB678.jpg\" alt=\"E4B1DB656739C13A7F75B5578E3CB678\"></p>\n","site":{"data":{}},"excerpt":"<p>1) 安装环境<br>执行命令创建名为sentry的数据库<br>createdb -E utf-8 sentry<br>为sentry项目初始化数据<br>sentry –config=~/.sentry/sentry.conf.py upgrade<br>创建新用户<br>sentry –config=~/.sentry/sentry.conf.py createuser<br>然后就可以启动服务了<br>sentry –config=~/.sentry/sentry.conf.py start<br>另外，还需要启动Worker<br>sentry –config=~/.sentry/sentry.conf.py celery worker -B<br>假设web服务器端口是9000，那么访问localhost:9000就能开始使用sentry了！</p>\n<p>source /usr/local/vir-sentry/bin/activate<br>sentry –config=~/.sentry/sentry.conf.py start &gt;&gt; /usr/local/vir-sentry/logs/sentry.log 2&gt;&amp;1 &amp;<br>","more":"</p>\n<p>2）相关命令<br>2.1启动<br>su - webapp<br>source /usr/local/vir-sentry/bin/activate<br>supervisord -c /etc/supervisord.conf<br>supervisorctl start all<br>2.2关闭命令<br>su - webapp<br>source /usr/local/vir-sentry/bin/activate<br>supervisorctl stop all<br>killall supervisord</p>\n<p>*创建账号 sentry createuser<br>3)基于node的测试demo<br><a href=\"/download/raven-node-master.zip\">raven-node-master.zip</a></p>\n<p>4.）界面显示<br><img src=\"9E26651338B7EE1345DAFDEF0ADDB9C4.jpg\" alt=\"9E26651338B7EE1345DAFDEF0ADDB9C4\"></p>\n<p>web 服务器相关配置<br><img src=\"E4B1DB656739C13A7F75B5578E3CB678.jpg\" alt=\"E4B1DB656739C13A7F75B5578E3CB678\"></p>"},{"title":"c++设计模式","date":"2018-12-25T14:38:51.000Z","_content":"\nc++设计模式：\n\n简单工厂模式\n\n工厂模式有一种非常形象的描述，建立对象的类就如一个工厂，而需要被建立的对象就是一个个产品；在工厂中加工产品，使用产品的人，不用在乎产品是如何生产出来的。从软件开发的角度来说，这样就有效的降低了模块之间的耦合。\n\n使用情景： \n  在不确定会有多少个处理操作时应该考虑使用简单工厂模式，如针对同样的接收到的数据，处理的逻辑可能会不同，可能以后还会增加新的操作。 \n案例： \n如果实现计算器的功能时，对于同样的输入数据，可能执行加、减、乘、除，甚至其他的功能。因此可以抽象出一个操作的抽象类或是接口，提供一个统一的处理方法(此处为process)，然后每种操作创建出一个子类出来。而判断具体使用哪个具体的实现类是在工厂类中进行判断的(将存放操作的变量传递给工厂的生产方法)。工厂类始终返回的是这个抽象类，这样如果对原有功能进行更改或是新添加新的功能，也不会对原来的其他类做修改，只编译修改的那个类或是新的类就可以了。 \n这样就做到了把耦合降到最低，同时也便于维护。 \n\n \n\n \n\n \n\n简单工厂：针对同样的数据，不同的操作用同一个接口\n\n工厂方法：针对同样的数据，不同的操作用不同的接口\n\n抽象工厂：针对不同的数据，不同的操作用不同的接口\n\n \n\n策略模式：依赖c++的多态，抽象类的指针可以访问所有子类对象，（纯虚函数），可以用一个指针访问所有策略的实现类\n\n \n\n \n\n单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式(不能让一个程序打开两次  如：不能同时打开2个迅雷  迅雷用的单例模式)\n\n \n\n访问者模式:适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。访问者模式将有关的行为集中到一个访问者对象中(做任何更改不需要修改基类，不依赖虚函数)\n\n \n\n观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。(QT的信号机制，Windows的消息机制都应用了观察者模式，还有订阅邮件，邮件到了就会给你发邮件)\n\n \n\n建造者模式：使得产品内部表象可以独立地变化，客户不必知道产品内部组成的细节。可以强制实行一种分步骤进行的建造过程。用一个接口完成不同的操作，需要对客户的需求进行把握。(如：登陆QQ，自动选择所在地的服务器)\n\n \n\n解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。(如：360读取lua脚本，这个细节的实现就是解释器模式)\n\n \n\n命令模式：把发出命令的责任和执行命令的责任分割开，委派给不同的对象允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。(命令模式在客户端与服务器之间用的最多 (C/S架构))\n\n \n\n模板模式：不同的子类可以以不同的方式实现这些抽象方法，\n\n从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，\n\n而将逻辑的细节留给具体的子类去实现。(适用于本地化，做一个软件，在日本是日文，美国是英语...)\n\n \n\n桥接模式：将抽象化与实现化脱离，使得二者可以独立的变化，\n\n也就是指在一个软件系统的抽象化和实现化之间使用组合聚合关系而不是继承关系，从而使两者可以独立的变化。(相当于配电脑去装机，把各个模块组合到一起)\n\n适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。\n\n \n\n外观模式：外部与一个子系统的通信必须通过一个统一的外观对象进行。每一个子系统只有一个外观类，而且此外观类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个外观类。(多个子系统方法都需要一个外观类统一管理，用统一的接口方便消费者使用)\n\n \n\n享元模式：享元模式大幅度的降低内存中对象的数量，使用享元模式主要是为了优化内存，相同功能可以并行使用。\n\n \n\n原型模式：允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。\n\n \n\n责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。(例如：晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi, 可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了)\n\n \n\n中介者模式：中介者模式包装了一系列对象相互作用的方式，\n\n使得这些对象不必相互明显作用。从而使他们可以松散偶合。\n\n当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。（如：TCP/IP打洞技术）\n\n \n\n装饰模式：装饰模式以对客户端透明的方式扩展对象的功能是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。\n\n \n\n状态模式：意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。(如：到了晚上12点要睡觉，到了早上8点要起床...这就是状态)\n\n \n\n合成模式：将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。(用于树状结构)\n\n","source":"_posts/c-设计模式.md","raw":"---\ntitle: c++设计模式\ndate: 2018-12-25 22:38:51\ntags:\n\tc++\n\t设计模式\n---\n\nc++设计模式：\n\n简单工厂模式\n\n工厂模式有一种非常形象的描述，建立对象的类就如一个工厂，而需要被建立的对象就是一个个产品；在工厂中加工产品，使用产品的人，不用在乎产品是如何生产出来的。从软件开发的角度来说，这样就有效的降低了模块之间的耦合。\n\n使用情景： \n  在不确定会有多少个处理操作时应该考虑使用简单工厂模式，如针对同样的接收到的数据，处理的逻辑可能会不同，可能以后还会增加新的操作。 \n案例： \n如果实现计算器的功能时，对于同样的输入数据，可能执行加、减、乘、除，甚至其他的功能。因此可以抽象出一个操作的抽象类或是接口，提供一个统一的处理方法(此处为process)，然后每种操作创建出一个子类出来。而判断具体使用哪个具体的实现类是在工厂类中进行判断的(将存放操作的变量传递给工厂的生产方法)。工厂类始终返回的是这个抽象类，这样如果对原有功能进行更改或是新添加新的功能，也不会对原来的其他类做修改，只编译修改的那个类或是新的类就可以了。 \n这样就做到了把耦合降到最低，同时也便于维护。 \n\n \n\n \n\n \n\n简单工厂：针对同样的数据，不同的操作用同一个接口\n\n工厂方法：针对同样的数据，不同的操作用不同的接口\n\n抽象工厂：针对不同的数据，不同的操作用不同的接口\n\n \n\n策略模式：依赖c++的多态，抽象类的指针可以访问所有子类对象，（纯虚函数），可以用一个指针访问所有策略的实现类\n\n \n\n \n\n单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式(不能让一个程序打开两次  如：不能同时打开2个迅雷  迅雷用的单例模式)\n\n \n\n访问者模式:适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。访问者模式将有关的行为集中到一个访问者对象中(做任何更改不需要修改基类，不依赖虚函数)\n\n \n\n观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。(QT的信号机制，Windows的消息机制都应用了观察者模式，还有订阅邮件，邮件到了就会给你发邮件)\n\n \n\n建造者模式：使得产品内部表象可以独立地变化，客户不必知道产品内部组成的细节。可以强制实行一种分步骤进行的建造过程。用一个接口完成不同的操作，需要对客户的需求进行把握。(如：登陆QQ，自动选择所在地的服务器)\n\n \n\n解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。(如：360读取lua脚本，这个细节的实现就是解释器模式)\n\n \n\n命令模式：把发出命令的责任和执行命令的责任分割开，委派给不同的对象允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。(命令模式在客户端与服务器之间用的最多 (C/S架构))\n\n \n\n模板模式：不同的子类可以以不同的方式实现这些抽象方法，\n\n从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，\n\n而将逻辑的细节留给具体的子类去实现。(适用于本地化，做一个软件，在日本是日文，美国是英语...)\n\n \n\n桥接模式：将抽象化与实现化脱离，使得二者可以独立的变化，\n\n也就是指在一个软件系统的抽象化和实现化之间使用组合聚合关系而不是继承关系，从而使两者可以独立的变化。(相当于配电脑去装机，把各个模块组合到一起)\n\n适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。\n\n \n\n外观模式：外部与一个子系统的通信必须通过一个统一的外观对象进行。每一个子系统只有一个外观类，而且此外观类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个外观类。(多个子系统方法都需要一个外观类统一管理，用统一的接口方便消费者使用)\n\n \n\n享元模式：享元模式大幅度的降低内存中对象的数量，使用享元模式主要是为了优化内存，相同功能可以并行使用。\n\n \n\n原型模式：允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。\n\n \n\n责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。(例如：晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi, 可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了)\n\n \n\n中介者模式：中介者模式包装了一系列对象相互作用的方式，\n\n使得这些对象不必相互明显作用。从而使他们可以松散偶合。\n\n当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。（如：TCP/IP打洞技术）\n\n \n\n装饰模式：装饰模式以对客户端透明的方式扩展对象的功能是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。\n\n \n\n状态模式：意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。(如：到了晚上12点要睡觉，到了早上8点要起床...这就是状态)\n\n \n\n合成模式：将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。(用于树状结构)\n\n","slug":"c-设计模式","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc90w00081d8nq7cgg1wz","content":"<p>c++设计模式：</p>\n<p>简单工厂模式</p>\n<p>工厂模式有一种非常形象的描述，建立对象的类就如一个工厂，而需要被建立的对象就是一个个产品；在工厂中加工产品，使用产品的人，不用在乎产品是如何生产出来的。从软件开发的角度来说，这样就有效的降低了模块之间的耦合。</p>\n<p>使用情景：<br>  在不确定会有多少个处理操作时应该考虑使用简单工厂模式，如针对同样的接收到的数据，处理的逻辑可能会不同，可能以后还会增加新的操作。<br>案例：<br>如果实现计算器的功能时，对于同样的输入数据，可能执行加、减、乘、除，甚至其他的功能。因此可以抽象出一个操作的抽象类或是接口，提供一个统一的处理方法(此处为process)，然后每种操作创建出一个子类出来。而判断具体使用哪个具体的实现类是在工厂类中进行判断的(将存放操作的变量传递给工厂的生产方法)。工厂类始终返回的是这个抽象类，这样如果对原有功能进行更改或是新添加新的功能，也不会对原来的其他类做修改，只编译修改的那个类或是新的类就可以了。<br>这样就做到了把耦合降到最低，同时也便于维护。 </p>\n<p>简单工厂：针对同样的数据，不同的操作用同一个接口</p>\n<p>工厂方法：针对同样的数据，不同的操作用不同的接口</p>\n<p>抽象工厂：针对不同的数据，不同的操作用不同的接口</p>\n<p>策略模式：依赖c++的多态，抽象类的指针可以访问所有子类对象，（纯虚函数），可以用一个指针访问所有策略的实现类</p>\n<p>单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式(不能让一个程序打开两次  如：不能同时打开2个迅雷  迅雷用的单例模式)</p>\n<p>访问者模式:适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。访问者模式将有关的行为集中到一个访问者对象中(做任何更改不需要修改基类，不依赖虚函数)</p>\n<p>观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。(QT的信号机制，Windows的消息机制都应用了观察者模式，还有订阅邮件，邮件到了就会给你发邮件)</p>\n<p>建造者模式：使得产品内部表象可以独立地变化，客户不必知道产品内部组成的细节。可以强制实行一种分步骤进行的建造过程。用一个接口完成不同的操作，需要对客户的需求进行把握。(如：登陆QQ，自动选择所在地的服务器)</p>\n<p>解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。(如：360读取lua脚本，这个细节的实现就是解释器模式)</p>\n<p>命令模式：把发出命令的责任和执行命令的责任分割开，委派给不同的对象允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。(命令模式在客户端与服务器之间用的最多 (C/S架构))</p>\n<p>模板模式：不同的子类可以以不同的方式实现这些抽象方法，</p>\n<p>从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，</p>\n<p>而将逻辑的细节留给具体的子类去实现。(适用于本地化，做一个软件，在日本是日文，美国是英语…)</p>\n<p>桥接模式：将抽象化与实现化脱离，使得二者可以独立的变化，</p>\n<p>也就是指在一个软件系统的抽象化和实现化之间使用组合聚合关系而不是继承关系，从而使两者可以独立的变化。(相当于配电脑去装机，把各个模块组合到一起)</p>\n<p>适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。</p>\n<p>外观模式：外部与一个子系统的通信必须通过一个统一的外观对象进行。每一个子系统只有一个外观类，而且此外观类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个外观类。(多个子系统方法都需要一个外观类统一管理，用统一的接口方便消费者使用)</p>\n<p>享元模式：享元模式大幅度的降低内存中对象的数量，使用享元模式主要是为了优化内存，相同功能可以并行使用。</p>\n<p>原型模式：允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。</p>\n<p>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。(例如：晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi, 可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了)</p>\n<p>中介者模式：中介者模式包装了一系列对象相互作用的方式，</p>\n<p>使得这些对象不必相互明显作用。从而使他们可以松散偶合。</p>\n<p>当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。（如：TCP/IP打洞技术）</p>\n<p>装饰模式：装饰模式以对客户端透明的方式扩展对象的功能是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。</p>\n<p>状态模式：意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。(如：到了晚上12点要睡觉，到了早上8点要起床…这就是状态)</p>\n<p>合成模式：将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。(用于树状结构)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>c++设计模式：</p>\n<p>简单工厂模式</p>\n<p>工厂模式有一种非常形象的描述，建立对象的类就如一个工厂，而需要被建立的对象就是一个个产品；在工厂中加工产品，使用产品的人，不用在乎产品是如何生产出来的。从软件开发的角度来说，这样就有效的降低了模块之间的耦合。</p>\n<p>使用情景：<br>  在不确定会有多少个处理操作时应该考虑使用简单工厂模式，如针对同样的接收到的数据，处理的逻辑可能会不同，可能以后还会增加新的操作。<br>案例：<br>如果实现计算器的功能时，对于同样的输入数据，可能执行加、减、乘、除，甚至其他的功能。因此可以抽象出一个操作的抽象类或是接口，提供一个统一的处理方法(此处为process)，然后每种操作创建出一个子类出来。而判断具体使用哪个具体的实现类是在工厂类中进行判断的(将存放操作的变量传递给工厂的生产方法)。工厂类始终返回的是这个抽象类，这样如果对原有功能进行更改或是新添加新的功能，也不会对原来的其他类做修改，只编译修改的那个类或是新的类就可以了。<br>这样就做到了把耦合降到最低，同时也便于维护。 </p>\n<p>简单工厂：针对同样的数据，不同的操作用同一个接口</p>\n<p>工厂方法：针对同样的数据，不同的操作用不同的接口</p>\n<p>抽象工厂：针对不同的数据，不同的操作用不同的接口</p>\n<p>策略模式：依赖c++的多态，抽象类的指针可以访问所有子类对象，（纯虚函数），可以用一个指针访问所有策略的实现类</p>\n<p>单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式(不能让一个程序打开两次  如：不能同时打开2个迅雷  迅雷用的单例模式)</p>\n<p>访问者模式:适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。访问者模式将有关的行为集中到一个访问者对象中(做任何更改不需要修改基类，不依赖虚函数)</p>\n<p>观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。(QT的信号机制，Windows的消息机制都应用了观察者模式，还有订阅邮件，邮件到了就会给你发邮件)</p>\n<p>建造者模式：使得产品内部表象可以独立地变化，客户不必知道产品内部组成的细节。可以强制实行一种分步骤进行的建造过程。用一个接口完成不同的操作，需要对客户的需求进行把握。(如：登陆QQ，自动选择所在地的服务器)</p>\n<p>解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。(如：360读取lua脚本，这个细节的实现就是解释器模式)</p>\n<p>命令模式：把发出命令的责任和执行命令的责任分割开，委派给不同的对象允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。(命令模式在客户端与服务器之间用的最多 (C/S架构))</p>\n<p>模板模式：不同的子类可以以不同的方式实现这些抽象方法，</p>\n<p>从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，</p>\n<p>而将逻辑的细节留给具体的子类去实现。(适用于本地化，做一个软件，在日本是日文，美国是英语…)</p>\n<p>桥接模式：将抽象化与实现化脱离，使得二者可以独立的变化，</p>\n<p>也就是指在一个软件系统的抽象化和实现化之间使用组合聚合关系而不是继承关系，从而使两者可以独立的变化。(相当于配电脑去装机，把各个模块组合到一起)</p>\n<p>适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。</p>\n<p>外观模式：外部与一个子系统的通信必须通过一个统一的外观对象进行。每一个子系统只有一个外观类，而且此外观类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个外观类。(多个子系统方法都需要一个外观类统一管理，用统一的接口方便消费者使用)</p>\n<p>享元模式：享元模式大幅度的降低内存中对象的数量，使用享元模式主要是为了优化内存，相同功能可以并行使用。</p>\n<p>原型模式：允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。</p>\n<p>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。(例如：晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi, 可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了)</p>\n<p>中介者模式：中介者模式包装了一系列对象相互作用的方式，</p>\n<p>使得这些对象不必相互明显作用。从而使他们可以松散偶合。</p>\n<p>当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。（如：TCP/IP打洞技术）</p>\n<p>装饰模式：装饰模式以对客户端透明的方式扩展对象的功能是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。</p>\n<p>状态模式：意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。(如：到了晚上12点要睡觉，到了早上8点要起床…这就是状态)</p>\n<p>合成模式：将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。(用于树状结构)</p>\n"},{"title":"alchemist_manage服务器部署","date":"2018-07-11T08:55:25.000Z","_content":"\n1. manage服务器代码上传\ncopy srpg_too 目录到 /var/webapps/alchemist_mnt    (文件所有者必须为webapp)\n2. ruby运行环境构建\n2.1 检查依赖\n-ruby(v2.2.2p95~)\n-gem bundle\n-Node.js\n-npm\n-bower\n-msyql\n-redis\n2.1 设置gem源为淘宝源\nGemfile （描述gem之间依赖文件）需要如下修改\nsource 'https://gems.ruby-china.org/'\n2.2  安装gem file\nsu  - webapp\nbundle install\n2.2.1 安装bundle 命令不存在，。\ngem install bundle\n2.2.2 提示gem命令不存在，就执行rbenv global 2.2.2， 如果无法运行就重新安装ruby 2.2.2 版本，流程如下\nsu - webapp\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\ncd ~/.rbenv && src/configure && make -C src\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bash_profile\n~/.rbenv/bin/rbenv init\necho 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\nsource ~/.bash_profile\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nrbenv install 2.2.2\nrbenv global 2.2.2\nruby -v\n<!-- more -->\n3. Cap环境部署\n3.1 配置SSH无密码登录\n配置config/deploy/produciton.rb ssh无密码登陆（id_rsa.pub和authorized_keys） 设置authorized_keys，记得chmod 600，否则无法生效）\n3.1.1 生成sshkey:\ncd ~/.ssh\nssh-keygen\n输入公钥名：id_rsa\n![AADD68F1E0BFC2CE65796C5F7EEBD67E](AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg)\n3.1.2 配置authorized_keys\ncat  id_rsa.pub >> authorized_keys\nchmod -R 600 authorized_keys\nchmod 700 ~/.ssh\n备注：如果还是无法实现无密码登录，再清空下~/.ssh/koown_hosts文件（echo \"\" > ~/.sshown_hosts);\n![AADD68F1E0BFC2CE65796C5F7EEBD67E](AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg)\n3.1.3执行以下deploy命令：production环境为例\n cd current\n  bundle exec cap production mkdir:sockets \nbundle exec cap production bower:install\n4.前端bower模块安装\n4.1 Node.js 安装bower\nnpm install -g bower --registry=https://registry.npm.taobao.org   (-g不一定要)\n4.2install Bowerfile\n  \tbundle exec rake bower:install\n4.3 manage server DB构建\n bundle exec rake maint:create maint:migrate\n \n4.4 添加管理账号\n  bundle exec rake maint:seed\n\n4.5  配置crontab \n    缺少crontab 会影响预约奖励发放\n    cd 根目录（current/）\n    gem install whenever ，检查config/schedule.rb是否存在\n    whenever -w（写入到crontab 中）\n    查看log/cron_log.log日志是否已生成。\n","source":"_posts/alchemist-manage服务器部署.md","raw":"---\ntitle: alchemist_manage服务器部署\ndate: 2018-07-11 16:55:25\ncategories: \"开发环境安装\"\ntags:\n\t- Ruby on Rails\n\t- Capistrano 自动部署工具\n---\n\n1. manage服务器代码上传\ncopy srpg_too 目录到 /var/webapps/alchemist_mnt    (文件所有者必须为webapp)\n2. ruby运行环境构建\n2.1 检查依赖\n-ruby(v2.2.2p95~)\n-gem bundle\n-Node.js\n-npm\n-bower\n-msyql\n-redis\n2.1 设置gem源为淘宝源\nGemfile （描述gem之间依赖文件）需要如下修改\nsource 'https://gems.ruby-china.org/'\n2.2  安装gem file\nsu  - webapp\nbundle install\n2.2.1 安装bundle 命令不存在，。\ngem install bundle\n2.2.2 提示gem命令不存在，就执行rbenv global 2.2.2， 如果无法运行就重新安装ruby 2.2.2 版本，流程如下\nsu - webapp\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\ncd ~/.rbenv && src/configure && make -C src\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bash_profile\n~/.rbenv/bin/rbenv init\necho 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\nsource ~/.bash_profile\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nrbenv install 2.2.2\nrbenv global 2.2.2\nruby -v\n<!-- more -->\n3. Cap环境部署\n3.1 配置SSH无密码登录\n配置config/deploy/produciton.rb ssh无密码登陆（id_rsa.pub和authorized_keys） 设置authorized_keys，记得chmod 600，否则无法生效）\n3.1.1 生成sshkey:\ncd ~/.ssh\nssh-keygen\n输入公钥名：id_rsa\n![AADD68F1E0BFC2CE65796C5F7EEBD67E](AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg)\n3.1.2 配置authorized_keys\ncat  id_rsa.pub >> authorized_keys\nchmod -R 600 authorized_keys\nchmod 700 ~/.ssh\n备注：如果还是无法实现无密码登录，再清空下~/.ssh/koown_hosts文件（echo \"\" > ~/.sshown_hosts);\n![AADD68F1E0BFC2CE65796C5F7EEBD67E](AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg)\n3.1.3执行以下deploy命令：production环境为例\n cd current\n  bundle exec cap production mkdir:sockets \nbundle exec cap production bower:install\n4.前端bower模块安装\n4.1 Node.js 安装bower\nnpm install -g bower --registry=https://registry.npm.taobao.org   (-g不一定要)\n4.2install Bowerfile\n  \tbundle exec rake bower:install\n4.3 manage server DB构建\n bundle exec rake maint:create maint:migrate\n \n4.4 添加管理账号\n  bundle exec rake maint:seed\n\n4.5  配置crontab \n    缺少crontab 会影响预约奖励发放\n    cd 根目录（current/）\n    gem install whenever ，检查config/schedule.rb是否存在\n    whenever -w（写入到crontab 中）\n    查看log/cron_log.log日志是否已生成。\n","slug":"alchemist-manage服务器部署","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc90x00091d8n3nixzklw","content":"<ol>\n<li>manage服务器代码上传<br>copy srpg_too 目录到 /var/webapps/alchemist_mnt    (文件所有者必须为webapp)</li>\n<li>ruby运行环境构建<br>2.1 检查依赖<br>-ruby(v2.2.2p95~)<br>-gem bundle<br>-Node.js<br>-npm<br>-bower<br>-msyql<br>-redis<br>2.1 设置gem源为淘宝源<br>Gemfile （描述gem之间依赖文件）需要如下修改<br>source ‘<a href=\"https://gems.ruby-china.org/&#39;\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/&#39;</a><br>2.2  安装gem file<br>su  - webapp<br>bundle install<br>2.2.1 安装bundle 命令不存在，。<br>gem install bundle<br>2.2.2 提示gem命令不存在，就执行rbenv global 2.2.2， 如果无法运行就重新安装ruby 2.2.2 版本，流程如下<br>su - webapp<br>git clone <a href=\"https://github.com/rbenv/rbenv.git\" target=\"_blank\" rel=\"noopener\">https://github.com/rbenv/rbenv.git</a> ~/.rbenv<br>cd ~/.rbenv &amp;&amp; src/configure &amp;&amp; make -C src<br>echo ‘export PATH=”$HOME/.rbenv/bin:$PATH”‘ &gt;&gt; ~/.bash_profile<br>~/.rbenv/bin/rbenv init<br>echo ‘eval “$(rbenv init -)”‘ &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br>git clone <a href=\"https://github.com/rbenv/ruby-build.git\" target=\"_blank\" rel=\"noopener\">https://github.com/rbenv/ruby-build.git</a> ~/.rbenv/plugins/ruby-build<br>rbenv install 2.2.2<br>rbenv global 2.2.2<br>ruby -v<a id=\"more\"></a></li>\n<li>Cap环境部署<br>3.1 配置SSH无密码登录<br>配置config/deploy/produciton.rb ssh无密码登陆（id_rsa.pub和authorized_keys） 设置authorized_keys，记得chmod 600，否则无法生效）<br>3.1.1 生成sshkey:<br>cd ~/.ssh<br>ssh-keygen<br>输入公钥名：id_rsa<br><img src=\"AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg\" alt=\"AADD68F1E0BFC2CE65796C5F7EEBD67E\"><br>3.1.2 配置authorized_keys<br>cat  id_rsa.pub &gt;&gt; authorized_keys<br>chmod -R 600 authorized_keys<br>chmod 700 ~/.ssh<br>备注：如果还是无法实现无密码登录，再清空下~/.ssh/koown_hosts文件（echo “” &gt; ~/.sshown_hosts);<br><img src=\"AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg\" alt=\"AADD68F1E0BFC2CE65796C5F7EEBD67E\"><br>3.1.3执行以下deploy命令：production环境为例<br>cd current<br>bundle exec cap production mkdir:sockets<br>bundle exec cap production bower:install<br>4.前端bower模块安装<br>4.1 Node.js 安装bower<br>npm install -g bower –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a>   (-g不一定要)<br>4.2install Bowerfile<br>   bundle exec rake bower:install<br>4.3 manage server DB构建<br>bundle exec rake maint:create maint:migrate</li>\n</ol>\n<p>4.4 添加管理账号<br>  bundle exec rake maint:seed</p>\n<p>4.5  配置crontab<br>    缺少crontab 会影响预约奖励发放<br>    cd 根目录（current/）<br>    gem install whenever ，检查config/schedule.rb是否存在<br>    whenever -w（写入到crontab 中）<br>    查看log/cron_log.log日志是否已生成。</p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>manage服务器代码上传<br>copy srpg_too 目录到 /var/webapps/alchemist_mnt    (文件所有者必须为webapp)</li>\n<li>ruby运行环境构建<br>2.1 检查依赖<br>-ruby(v2.2.2p95~)<br>-gem bundle<br>-Node.js<br>-npm<br>-bower<br>-msyql<br>-redis<br>2.1 设置gem源为淘宝源<br>Gemfile （描述gem之间依赖文件）需要如下修改<br>source ‘<a href=\"https://gems.ruby-china.org/&#39;\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/&#39;</a><br>2.2  安装gem file<br>su  - webapp<br>bundle install<br>2.2.1 安装bundle 命令不存在，。<br>gem install bundle<br>2.2.2 提示gem命令不存在，就执行rbenv global 2.2.2， 如果无法运行就重新安装ruby 2.2.2 版本，流程如下<br>su - webapp<br>git clone <a href=\"https://github.com/rbenv/rbenv.git\" target=\"_blank\" rel=\"noopener\">https://github.com/rbenv/rbenv.git</a> ~/.rbenv<br>cd ~/.rbenv &amp;&amp; src/configure &amp;&amp; make -C src<br>echo ‘export PATH=”$HOME/.rbenv/bin:$PATH”‘ &gt;&gt; ~/.bash_profile<br>~/.rbenv/bin/rbenv init<br>echo ‘eval “$(rbenv init -)”‘ &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br>git clone <a href=\"https://github.com/rbenv/ruby-build.git\" target=\"_blank\" rel=\"noopener\">https://github.com/rbenv/ruby-build.git</a> ~/.rbenv/plugins/ruby-build<br>rbenv install 2.2.2<br>rbenv global 2.2.2<br>ruby -v","more":"</li>\n<li>Cap环境部署<br>3.1 配置SSH无密码登录<br>配置config/deploy/produciton.rb ssh无密码登陆（id_rsa.pub和authorized_keys） 设置authorized_keys，记得chmod 600，否则无法生效）<br>3.1.1 生成sshkey:<br>cd ~/.ssh<br>ssh-keygen<br>输入公钥名：id_rsa<br><img src=\"AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg\" alt=\"AADD68F1E0BFC2CE65796C5F7EEBD67E\"><br>3.1.2 配置authorized_keys<br>cat  id_rsa.pub &gt;&gt; authorized_keys<br>chmod -R 600 authorized_keys<br>chmod 700 ~/.ssh<br>备注：如果还是无法实现无密码登录，再清空下~/.ssh/koown_hosts文件（echo “” &gt; ~/.sshown_hosts);<br><img src=\"AADD68F1E0BFC2CE65796C5F7EEBD67E.jpg\" alt=\"AADD68F1E0BFC2CE65796C5F7EEBD67E\"><br>3.1.3执行以下deploy命令：production环境为例<br>cd current<br>bundle exec cap production mkdir:sockets<br>bundle exec cap production bower:install<br>4.前端bower模块安装<br>4.1 Node.js 安装bower<br>npm install -g bower –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a>   (-g不一定要)<br>4.2install Bowerfile<br>   bundle exec rake bower:install<br>4.3 manage server DB构建<br>bundle exec rake maint:create maint:migrate</li>\n</ol>\n<p>4.4 添加管理账号<br>  bundle exec rake maint:seed</p>\n<p>4.5  配置crontab<br>    缺少crontab 会影响预约奖励发放<br>    cd 根目录（current/）<br>    gem install whenever ，检查config/schedule.rb是否存在<br>    whenever -w（写入到crontab 中）<br>    查看log/cron_log.log日志是否已生成。</p>"},{"title":"hexo 常用笔记","date":"2018-07-03T09:39:12.000Z","_content":"建站的过程网上一大把就不记录了，主要写下遇到的几个问题\n1. github上的项目名称一定要和自己在github上的用户名一致，否则会生成静态文件后点开会白屏\n2. 多看看官方手册上面有详细记录https://hexo.io/zh-cn/docs\n\nhexo g -d\nhexo clean\nhexo s\nhexo目录下执行这样一句话npm install hexo-asset-image --save，这是下载安装一个可以上传本地图片的插件,再运行hexo n \"xxxx\"来生成md博文","source":"_posts/hexo-安装遇到的问题.md","raw":"---\ntitle: hexo 常用笔记\ndate: 2018-07-03 17:39:12\ncategories: \"开发环境安装\"\ntags:\n\t- node.js\n\t- hexo\n---\n建站的过程网上一大把就不记录了，主要写下遇到的几个问题\n1. github上的项目名称一定要和自己在github上的用户名一致，否则会生成静态文件后点开会白屏\n2. 多看看官方手册上面有详细记录https://hexo.io/zh-cn/docs\n\nhexo g -d\nhexo clean\nhexo s\nhexo目录下执行这样一句话npm install hexo-asset-image --save，这是下载安装一个可以上传本地图片的插件,再运行hexo n \"xxxx\"来生成md博文","slug":"hexo-安装遇到的问题","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc90z000c1d8nndpo53ze","content":"<p>建站的过程网上一大把就不记录了，主要写下遇到的几个问题</p>\n<ol>\n<li>github上的项目名称一定要和自己在github上的用户名一致，否则会生成静态文件后点开会白屏</li>\n<li>多看看官方手册上面有详细记录<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs</a></li>\n</ol>\n<p>hexo g -d<br>hexo clean<br>hexo s<br>hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件,再运行hexo n “xxxx”来生成md博文</p>\n","site":{"data":{}},"excerpt":"","more":"<p>建站的过程网上一大把就不记录了，主要写下遇到的几个问题</p>\n<ol>\n<li>github上的项目名称一定要和自己在github上的用户名一致，否则会生成静态文件后点开会白屏</li>\n<li>多看看官方手册上面有详细记录<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs</a></li>\n</ol>\n<p>hexo g -d<br>hexo clean<br>hexo s<br>hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件,再运行hexo n “xxxx”来生成md博文</p>\n"},{"title":"Hello World","date":"2018-07-01T08:06:55.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-07-01 16:06:55\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2020-03-06T10:34:09.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc915000e1d8nghp6tspw","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Erlang List模块函数使用大全","date":"2019-05-07T11:49:16.000Z","_content":"\nErlang List模块函数使用大全\n\n一，带函数Pred\n1, all(Pred, List) -> boolean()\n如果List中的每个元素作为Pred函数的参数执行，结果都返回true，那么all函数返回true，\n否则返回false\n\n例子：\n\nlists:all(fun(E) -> true end,[1,2,3,4]).\n\n结果\n\ntrue\n\n\n2, any(Pred, List) -> boolean()\n如果List中至少有一个元素作为Pred函数的参数执行，结果返回true，那么any函数返回true，\n否则返回false\n\n例子\n\nlists:any(fun(E) -> is_integer(E) end,[q,2,a,4]).\n\n结果\n\ntrue\n\n \n\n3，dropwhile(Pred, List1) -> List2\n将List1列表中的元素作为参数执行Pred函数，如果返回true，将其丢弃，最后返回剩余元素\n组成的列表\n\n例子\n\nlists:dropwhile(fun(E) -> is_atom(E) end,[a,1,2,a,b]).\n\n结果\n\n[1,2,a,b]\n\n4，filter(Pred, List1) -> List2\n返回一个列表，这个列表是由List1中执行Pred函数返回true的元素组成。\n\nlists:filter(fun(E) -> is_integer(E) end,[q,2,a,4]).\n\n结果：\n\n[2,4]\n\n <!-- more -->\n\n5，map(Fun, List1) -> List2\n将List1中的每个元素去在Fun中执行，然后返回一个元素，最后返回的这些元素组成一个列表，\n返回给List2\n例子：\nlists:map(fun(X)->[X,X] end, [a,b,c]).\n结果：[[a,a],[b,b],[c,c]]\n\n \n\n6，flatmap(Fun, List1) -> List2\n这个函数和map比较类似，相当于执行了\nlists:append(lists:map(List1)).\n也就是把map的结果进行append处理\n例子：\nlists:flatmap(fun(X)->[X,X] end, [a,b,c]).\n结果：[a,a,b,b,c,c]\n\n \n\n7，foldl(Fun, Acc0, List) -> Acc1\nFun这个函数有两个参数\n第一个参数是List中的元素，第二个参数是Fun函数执行完后的返回值，这个参数第一次执行时\n就是Acc0\n例子：对[1,2,3,4,5]求和\nlists:foldl(fun(X, Sum) -> X + Sum end, 0, [1,2,3,4,5]).\n结果：15\n执行过程：首先，Fun第一次执行时，X的值取列表List的第一个元素1，Sum取0,\n  Fun第二次执行时，X的值取列表List的第二个元素2，Sum取Fun第一次的返回值\n  依次轮推，直到List中每个元素执行完，最后foldl返回最后一次的结果。\n\n \n\n8，foldr(Fun, Acc0, List) -> Acc1\nfoldr这个函数和foldl比较相似\n不过是Fun执行时，X的值先取List的最后一个，然后取倒数第二个。\n\n \n\n9，foreach(Fun, List) -> ok\n以List中的每个元素为参数执行Fun函数，执行顺序按照List中元素的顺序，这个函数最后返回ok。是单边的\n例子 lists:foreach(fun(X)->\n  %%using X to do somethings \n  %%\n  end,List)\n\n \n\n10，keymap(Fun, N, TupleList1) -> TupleList2\n对TupleList1中的每个元素的第N项作为参数在Fun中处理，然后这个第N项最后就被替换为Fun执行完返回的值\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}].\nlists:keymap(fun(X)-> \n  list_to_atom(X) \n  end,2,List1).\n结果：\n[{name,zhangjing},{name,zhangsan}]\n\n \n\n11，mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}\n这个函数等于是把map和foldl函数结合起来。将List1中的每一个元素执行Fun函数，执行后花括号的第一个值作为返回值返回，\n第二个值作为参数传给Fun，作为下一次用。\n例子：\nlists:mapfoldl(fun(X, Sum) -> {2*X, X+Sum} end,\n0, [1,2,3,4,5]).\n{[2,4,6,8,10],15}\n\n \n\n12，mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}\n这个函数相当于将map和foldr结合起来\n\n\n13，merge(Fun, List1, List2) -> List3\n这个函数的功能也是把List1和List2合并到一起，只不过是List1和List2的元素要作为参数在Fun中执行，如果\nFun返回true，那么返回值就是List1在前，List2在后。否则，反之。\n例子\nlists:merge(fun(A,B)-> false end, [3,4],[2,1]).\n结果\n[2,1,3,4]\n\n \n\n14，partition(Pred, List) -> {Satisfying, NotSatisfying}\n这个函数的功能是将List分成两个List1和List2，List1是将List元素作为参数去Pred函数中执行返回true的元素组成，\nList2由Pred返回false的元素组成。\n注意，返回的是一个元组\n例子\nlists:partition(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]).\n结果\n{[1,3,5,7],[2,4,6]}\n\n\n15，sort(Fun, List1) -> List2\n如果Fun函数返回true，则排序是从小到大的顺序，否则，从大到小。\n其中Fun有两个参数。\n例子\nlists:sort(fun(A,B)-> false end,[1,2,3]).\n结果\n[3,2,1]\n\n\n16，splitwith(Pred, List) -> {List1, List2}\n将List分成List1和List2，\nList1由List中元素在Pred函数返回true的组成，但是有一点，如果遇到为false的，则将剩下的元素\n全部放到List2中，List1中就只有前面为true的。\n例子\nlists:splitwith(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e]).\n结果\n{[a,b],[1,c,d,2,3,4,e]}\n\n\n17，takewhile(Pred, List1) -> List2\nList1中的元素element依次执行Pred(element),如果返回true，则获取这个元素，直到有元素执行Pred(element)返回false\n例子\nlists:takewhile(fun(E)-> is_atom(E) end,[a,b,1,e,{c},[d]]).\n结果\n[a,b]\n\n\n18,umerge(Fun, List1, List2) -> List3\n这个函数和merge不同的是 当Fun返回true时，返回的List3中不能出现相同的元素\n疑问：但是当Fun返回false时，List3中可以有相同的元素。\n例子(Fun返回true的情况)\nlists:umerge(fun(A,B)-> true end,[1,2],[2,3]).\n结果\n[1,2,3]\n(Fun为false的情况)\nlists:umerge(fun(A,B)-> false end,[1,2],[2,3]).\n[2,3,1,2]\n好神奇，竟然2有重复\n\n \n\n19，usort(Fun, List1) -> List2\n按照Fun函数进行排序，如果Fun返回true，那么只返回List1的第一个元素\n如果Fun返回false，那么List1从大到小排序\n例子1\nlists:usort(fun(A,B) -> true end, [1,2,2,3,4]).\n结果\n[1]\n\n例子2\nlists:usort(fun(A,B) -> false end, [1,2,2,3,4]).\n结果\n[4,3,2,2,1]\n\n\n20，zipwith(Combine, List1, List2) -> List3\n将List1和list2中的每个元素执行Combine函数，然后返回一个元素，List3就是由Combine函数返回的一个个元素组成的。\n功能和map有点像，但是这里是对两个列表的操作。\n例子\nlists:zipwith(fun(X, Y) -> X+Y end, [1,2,3], [4,5,6]).\n结果\n[5,7,9]\n\n \n\n21，zipwith3(Combine, List1, List2, List3) -> List4\n将List1和list2，list3中的每个元素执行Combine函数，然后返回一个元素，List4就是由Combine函数返回的一个个元素组成的。\n功能和map有点像，但是这里是对三个列表的操作。\n例子\nlists:zipwith3(fun(X, Y, Z) -> X+Y+Z end, [1,2,3], [4,5,6],[7,8,9]).\n结果\n[12,15,18]\n\n \n\n二，不带函数Pred\n1，append(ListOfLists) -> List1\nListOfLists都是由List组成的，而List一个列表，里面可以是任何类型的元素\n这个函数就是将ListOfLists里面的所有列表的元素按顺序编成一个列表\n提示：ListOfLists里面的元素必须都是列表才能用这个函数\n\n例子\n\nlists:append([[1, 2, 3], [a, b], [4, 5, 6]]).\n\n结果：\n\n[1,2,3,a,b,4,5,6]\n\n\n2，append(List1, List2) -> List3\n将List1和List2两个列表连接起来，组成一个列表，然后返回新的这个列表\n这个函数的功能等同于List1 ++ List2\n\n例子\n\nlists:append(\"abc\", \"def\").\n\n结果\n\n\"abcdef\"\n\n \n\n3，concat(Things) -> string()\n这里的Things是一个列表，里面由atom() | integer() | float() | string()\n将这个列表里面的元素拼成一个字符串，然后返回\n\n例子\n\nlists:concat([doc, '/', file, '.', 3]).\n\n结果\n\ndoc/file.3\"\n\n \n\n4，delete(Elem, List1) -> List2\nList1是由很多Element组成的，这个函数的功能是在List1中寻找第一个和Elem元素一样的，\n然后删除之，返回删除后新的列表。\n\n例子\n\nlists:delete({name,\"zhangsan\"},[{name,\"lisi\"},{name,\"zhangsan\"},{name,\"wangmazi\"})).\n\n结果\n\n[{name,\"lisi\"},{name,\"wangmazi\"}]\n\n \n\n5，duplicate(N, Elem) -> List\n返回一个由N个Elem组成的列表。\n\n例子\n\nlists:duplicate(5,\"test\").\n\n结果\n\n[\"test\",\"test\",\"test\",\"test\",\"test\"]\n\n \n\n6，flatlength(DeepList) -> integer() >= 0\n我的理解是DeepList就是列表里面套列表\n计算列表的长度，即用flatten函数将DeepList转化成List后元素的个数\n这个函数和length()的区别就是：\nlength函数是得到列表元素的个数，\n而flatlength函数是先将DeepList转化成List后的个数\n譬如说List = [1,2,[3,4]]这个列表用\nlength(List)求的值是：3\nlists:flatlength(List)求的值是：4\n其实lists:flatlength(List) = length(flatten(List))\n\n7，flatten(DeepList) -> List\n将DeepList变成只有term()的list\n例子：\nlists:flatten([[a,a],[b,b],[c,c]]).\n结果：\n[a,a,b,b,c,c]\n\n \n\n8，flatten(DeepList, Tail) -> List\n就是将DeepList变成只有term的List后，在后面再加一个Tail。\n例子：\nlists:flatten([[a,a],[b,b],[c,c]],[dd]).\n结果：\n[a,a,b,b,c,c,dd]\n\n \n\n9,keydelete(Key, N, TupleList1) -> TupleList2\n这个函数适合处理列表里面的元素是元组的情况\n删除TupleList1中元素第N个元素和Key一致的元素，只删除第一个一样的，后面一样的不删除\n例子：\nList = [{name,\"zhangjing\"},{sex,\"male\"},{name,\"zhangsan\"},{sex,\"male\"}],\nlists:keydelete(\"male\",2,List)\n结果：\n[{name,\"zhangjing\"},{name,\"zhangsan\"},{sex,\"male\"}]\n\n \n\n10,keyfind(Key, N, TupleList) -> Tuple | false\n查找TupleList中的一个Tuple，如果查找到，返回，如果没有查找到，则返回false\n这个Tuple必须满足第N个元素和key是一样。\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}].\nlists:keyfind(\"zhangjing\",2,List1)\n结果：{name,\"zhangjing\"}\n\n \n\n11，keymember(Key, N, TupleList) -> boolean()\n如果TupleList中的元素中存在第N个元素和key一致，则返回true，否则返回false\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}].\nlists:keymember(\"zhangjing\",2,List1).\n结果：true\n\n \n\n12，keymerge(N, TupleList1, TupleList2) -> TupleList3\n将TupleList1和TupleList2进行混合，组成一个TupleList，\n新组成的TupleList是按照Tuple的第N个元素进行排序的\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}].\nList2 = [{nick,\"zj\"},{nick,\"zs\"}].\nlists:keymerge(2,List1,List2).\n结果：\n[{name,\"zhangjing\"},\n {name,\"zhangsan\"},\n {nick,\"zj\"},\n {nick,\"zs\"}]\n\n \n\n13，keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2\n在TupleList1的Tuple中找出第N个元素和Key一致，然后用NewTuple将这个Tuple替换掉，如果没有找到\n，则返回原来的TupleList1\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}]\nlists:keyreplace(\"zhangjing\",2,List1,{nickname,\"netzj\"}).\n结果：\n[{nickname,\"netzj\"},{name,\"zhangsan\"}]\n\n \n\n14，keysearch(Key, N, TupleList) -> {value, Tuple} | false\n这个函数和keyfind差不多，就是返回值的结构不一样\n也是在TupleList中找一个Tuple，这个Tuple的第N个元素和Key一样。\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}]\nlists:keysearch(\"zhangjing\",2,List1).\n结果：\n{value,{name,\"zhangjing\"}}\n\n \n\n15，keysort(N, TupleList1) -> TupleList2\n对TupleList1中的Tuple按照第N个元素进行排序，然后返回一个新的顺序的TupleList。\n不过这种排序是固定的。\n例子：\nList1 = [{name,\"zhangsan\"},{name,\"zhangjing\"}].\nlists:keysort(2,List1).\n结果：\n[{name,\"zhangjing\"},{name,\"zhangsan\"}]\n\n \n\n16，keystore(Key, N, TupleList1, NewTuple) -> TupleList2\n这个函数和keyreplace函数比较像，不同的是，这个keystore在没有找到对应的Tuple时，\n会将这个NewTuple追加在这个TupleList1的最后。\n例子：\nList1 = [{name,\"zhangsan\"},{name,\"zhangjing\"}].\n找到了的情况\nlists:keystore(\"zhangjing\",2,List1,{name,\"netzhangjing\"}).\n[{name,\"netzhangjing\"},{name,\"zhangsan\"}]\n没有找到的情况\nlists:keystore(\"zhanging\",2,List1,{name,\"netzhangjing\"}).\n[{name,\"zhangjing\"},{name,\"zhangsan\"},{name,\"netzhangjing\"}]\n\n \n\n17，keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false\n在TupleList1中找Tuple，这个Tuple的第N个元素和Key一致，如果找到了这么一个Tuple\n那么返回，{value, Tuple, TupleList2} 其中TupleList2是去掉Tuple的TupleList1.\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"},{name,\"lisi\"}].\nlists:keytake(\"zhangjing\",2,List1).\n结果：\n{value,{name,\"zhangjing\"},[{name,\"zhangsan\"},{name,\"lisi\"}]}\n\n \n\n18，last(List) -> Last\n返回：List最后一个元素\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"},{name,\"lisi\"}].\nlists:last(List1).\n结果：\n{name,\"lisi\"}\n\n \n\n19，max(List) -> Max\n取出List中最大的元素，一般List是整型时比较适合。\n例子：\nlists:max([1,10,15,6]).\n结果：\n15\n\n \n\n20，member(Elem, List) -> boolean()\n如果Elem和List中的某个元素匹配（相同），那么返回true，否则返回false\n例子\nlists:member({sex,\"1\"},[{sex,\"1\"},{sex,\"2\"},{sex,\"3\"}]).\n结果：\ntrue\n\n21，merge(ListOfLists) -> List1\nListOfLists是一个列表，里面由子列表构成\n这个函数的功能就是将这些子列表合并成一个列表。\n例子：\nlists:merge([[{11}],[{22}],[{33}]]).\n结果\n[{11},{22},{33}]\n\n \n\n22，merge(List1, List2) -> List3\nList1和List2分别是一个列表，这个函数的功能是将这两个列表合并成一个列表。\n例子：\nlists:merge([11],[22]).\n结果\n[11,22]\n[2,1,3,4]\n\n\n23, merge3(List1, List2, List3) -> List4\n将List1，List2，List3合并成一个列表\n例子\nlists:merge3([11],[22],[33,44]).\n结果：\n[11,22,33,44]\n\n \n\n24，min(List) -> Min\n返回List中的最小的元素，和max函数对应\n例子\nlists:min([1,2,3]).\n结果\n1\n\n \n\n25，nth(N, List) -> Elem\n返回List中的第N个元素。\n例子\nlists:nth(2,[{name,\"zhangsan\"},{name,\"lisi\"},{name,\"wangmazi\"}]).\n结果\n{name,\"lisi\"}\n\n \n\n26，nthtail(N, List) -> Tail\n返回List列表中第N个元素后面的元素\n例子\nlists:nthtail(3, [a, b, c, d, e]).\n结果\n[d,e]\n\n\n27，prefix(List1, List2) -> boolean()\n如果List1是List2的前缀(也就是说List1和List2前部分相同)，那么返回true，否则返回false\n\n28，reverse(List1) -> List2\n将List1反转\n例子\nlists:reverse([1,2,3,4]).\n结果\n[4,3,2,1]\n\n \n\n29,reverse(List1, Tail) -> List2\n将List1反转，然后将Tail接在反转List1的后面，然后返回\n例子\nlists:reverse([1, 2, 3, 4], [a, b, c]).\n[4,3,2,1,a,b,c]\n\n \n\n30，seq(From, To) -> Seq\n其中From和To都是整型，这个函数返回一个从From到To的一个整型列表。\n例子\nlists:seq(1,10).\n结果\n[1,2,3,4,5,6,7,8,9,10]\n\n \n\n31，seq(From, To, Incr) -> Seq\n返回一个整型列表，这个列表的后一个元素比前一个元素大Incr。\n例子\nlists:seq(1,10,4).\n[1,5,9]\n\n \n\n32，sort(List1) -> List2\n将List1中的元素从小到大排序，然后返回新的一个列表。\n例子\nlists:sort([3,2,1]).\n结果\n[1,2,3]\n\n\n33，split(N, List1) -> {List2, List3}\n将List1分成List2和List3\n其中List2包括List1的前N个元素，List3包含剩余的。\n例子\nlists:split(3,[1,2,3,4,5]).\n结果\n{[1,2,3],[4,5]}\n\n\n这个函数和partition数有区别，partition是遍历全部的List，而splitwith在遍历时遇到false的情况\n则马上结束遍历，返回结果。\n\n34，sublist(List1, Len) -> List2\n返回从第一个元素到第Len个元素的列表，这个Len大于List1的长度时，返回全部。\n例子\nlists:sublist([1,2,3,4,5,6],3).\n结果\n[1,2,3]\n\n \n\n35，sublist(List1, Start, Len) -> List2\n返回从List1的第Start个位置开始，后面Len个元素的列表。\n例子\nlists:sublist([1,2,3,4], 2, 2).\n结果\n[2,3]\n\n \n\n36，subtract(List1, List2) -> List3\n等同于 List1 -- List2\n这个函数功能是返回一个List1的副本，对于List2中的每个元素，第一次在List1副本中出现时被删掉。\n例子\nlists:subtract(\"112233\",\"12\"). \n结果\n\"1233\"\n\n \n\n37，suffix(List1, List2) -> boolean()\n如果List1是List2的后缀，那么返回true，否则返回false\n例子\nlists:suffix(\"22\",\"1122\").\n结果\ntrue\n\n \n\n38，sum(List) -> number()\n返回List中每个元素的和。其中List中的元素都应该是number()类型的。\n例子\nlists:sum([1,2,3,4]). \n结果\n10\n\n\n39，ukeymerge(N, TupleList1, TupleList2) -> TupleList3\nTupleList1和TupleList2里面的元素都是元组\n将TupleList1和TupleList2合并，合并的规则是按照元组的第N个元素，如果第N个元素有相同的，那么保留TupleList1中\n的，删除TupleList2中的。\n\n \n\n40，ukeysort(N, TupleList1) -> TupleList2\nTupleList1里面的元素都是元组\n这个函数也同样返回一个元素是元组的列表，返回的这个列表是按照元组的第N个元素来排序的，如果元组中有出现\n第N个元素相同的情况，删除掉后面的一个元组。\n例子\nlists:ukeysort(1,[{name,\"zhangsan\"},{sex,\"male\"},{name,\"himan\"}]).\n结果\n[{name,\"zhangsan\"},{sex,\"male\"}]\n\n \n\n41，umerge(ListOfLists) -> List1\n这个函数和merge唯一不同的就是，里面不能出现相同的元素，如果出现相同的，那么删除之，只保留一个唯一的\n例子\nlists:umerge([[1,2],[2,3]]).\n结果\n[1,2,3]\n分析：由于[[1,2],[2,3]]中merge后是[1,2,2,3],这个时候有两个相同的元素2，所以只保存一个2，所以结果是[1,2,3].\n\n\n42，umerge3(List1, List2, List3) -> List4\n将List1, List2, List3合并\n和merge3不同的是返回的List4中不能出现重复的元素\n例子\nlists:merge3([1,2],[2,3],[3,4]).\n结果\n[1,2,3,4]\n\n \n\n43，unzip(List1) -> {List2, List3}\nList1里面的元素是元组，每个元组由两个元素组成，返回值List2包含每个List1中每个元组的第一个元素\n返回值List3包含每个List1中每个元组的第二个元素。\n例子\nlists:unzip([{name,\"zhangsan\"},{sex,\"male\"},{city,\"hangzhou\"}]).\n结果\n{[name,sex,city],[\"zhangsan\",\"male\",\"hangzhou\"]}\n\n \n\n44，unzip3(List1) -> {List2, List3, List4}\nList1里面的元素是元组，每个元组由三个元素组成，返回值List2包含每个List1中每个元组的第一个元素；\n返回值List3包含每个List1中每个元组的第二个元素；返回值List4包含每个List1中每个元组的第三个元素。\n例子\nlists:unzip3([{name,\"zhangsan\",\"apple\"},{sex,\"male\",\"banana\"},{city,\"hangzhou\",\"orange\"}]).\n结果\n{[name,sex,city],\n [\"zhangsan\",\"male\",\"hangzhou\"],\n [\"apple\",\"banana\",\"orange\"]}\n注意，最终返回的是一个元组。\n\n45，usort(List1) -> List2\n将List1按照从小到大的顺序排序，如果排序后有重复的元素，删除重复的，只保存一个唯一的。\n例子\nlists:usort([4,3,2,1,2,3,4]).\n结果\n[1,2,3,4]\n\n\n46，zip(List1, List2) -> List3\n将两个长度相同的列表合并成一个列表\nList3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的\n例子\nlists:zip([name,sex,city],[\"zhangsan\",\"male\",\"hangzhou\"]).\n结果\n[{name,\"zhangsan\"},{sex,\"male\"},{city,\"hangzhou\"}]\n注意，如果List1和List2长度不一致，那么这个函数将会报错。\n\n \n\n47，zip3(List1, List2, List3) -> List4\n将三个长度相同的列表合并成一个列表\nList3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的\n每个元组的第三个元素是从List3中获取的。\n例子\nlists:zip3([name,sex,city],[\"zhangsan\",\"male\",\"hangzhou\"],[\"nick\",\"1\",\"zhejiang\"]).\n结果\n[{name,\"zhangsan\",\"nick\"},\n {sex,\"male\",\"1\"},\n {city,\"hangzhou\",\"zhejiang\"}]\n\n","source":"_posts/Erlang List模块函数使用大全.md","raw":"---\ntitle: Erlang List模块函数使用大全\ndate: 2019-05-07 19:49:16\ntags:\n\t- Erlang\n---\n\nErlang List模块函数使用大全\n\n一，带函数Pred\n1, all(Pred, List) -> boolean()\n如果List中的每个元素作为Pred函数的参数执行，结果都返回true，那么all函数返回true，\n否则返回false\n\n例子：\n\nlists:all(fun(E) -> true end,[1,2,3,4]).\n\n结果\n\ntrue\n\n\n2, any(Pred, List) -> boolean()\n如果List中至少有一个元素作为Pred函数的参数执行，结果返回true，那么any函数返回true，\n否则返回false\n\n例子\n\nlists:any(fun(E) -> is_integer(E) end,[q,2,a,4]).\n\n结果\n\ntrue\n\n \n\n3，dropwhile(Pred, List1) -> List2\n将List1列表中的元素作为参数执行Pred函数，如果返回true，将其丢弃，最后返回剩余元素\n组成的列表\n\n例子\n\nlists:dropwhile(fun(E) -> is_atom(E) end,[a,1,2,a,b]).\n\n结果\n\n[1,2,a,b]\n\n4，filter(Pred, List1) -> List2\n返回一个列表，这个列表是由List1中执行Pred函数返回true的元素组成。\n\nlists:filter(fun(E) -> is_integer(E) end,[q,2,a,4]).\n\n结果：\n\n[2,4]\n\n <!-- more -->\n\n5，map(Fun, List1) -> List2\n将List1中的每个元素去在Fun中执行，然后返回一个元素，最后返回的这些元素组成一个列表，\n返回给List2\n例子：\nlists:map(fun(X)->[X,X] end, [a,b,c]).\n结果：[[a,a],[b,b],[c,c]]\n\n \n\n6，flatmap(Fun, List1) -> List2\n这个函数和map比较类似，相当于执行了\nlists:append(lists:map(List1)).\n也就是把map的结果进行append处理\n例子：\nlists:flatmap(fun(X)->[X,X] end, [a,b,c]).\n结果：[a,a,b,b,c,c]\n\n \n\n7，foldl(Fun, Acc0, List) -> Acc1\nFun这个函数有两个参数\n第一个参数是List中的元素，第二个参数是Fun函数执行完后的返回值，这个参数第一次执行时\n就是Acc0\n例子：对[1,2,3,4,5]求和\nlists:foldl(fun(X, Sum) -> X + Sum end, 0, [1,2,3,4,5]).\n结果：15\n执行过程：首先，Fun第一次执行时，X的值取列表List的第一个元素1，Sum取0,\n  Fun第二次执行时，X的值取列表List的第二个元素2，Sum取Fun第一次的返回值\n  依次轮推，直到List中每个元素执行完，最后foldl返回最后一次的结果。\n\n \n\n8，foldr(Fun, Acc0, List) -> Acc1\nfoldr这个函数和foldl比较相似\n不过是Fun执行时，X的值先取List的最后一个，然后取倒数第二个。\n\n \n\n9，foreach(Fun, List) -> ok\n以List中的每个元素为参数执行Fun函数，执行顺序按照List中元素的顺序，这个函数最后返回ok。是单边的\n例子 lists:foreach(fun(X)->\n  %%using X to do somethings \n  %%\n  end,List)\n\n \n\n10，keymap(Fun, N, TupleList1) -> TupleList2\n对TupleList1中的每个元素的第N项作为参数在Fun中处理，然后这个第N项最后就被替换为Fun执行完返回的值\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}].\nlists:keymap(fun(X)-> \n  list_to_atom(X) \n  end,2,List1).\n结果：\n[{name,zhangjing},{name,zhangsan}]\n\n \n\n11，mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}\n这个函数等于是把map和foldl函数结合起来。将List1中的每一个元素执行Fun函数，执行后花括号的第一个值作为返回值返回，\n第二个值作为参数传给Fun，作为下一次用。\n例子：\nlists:mapfoldl(fun(X, Sum) -> {2*X, X+Sum} end,\n0, [1,2,3,4,5]).\n{[2,4,6,8,10],15}\n\n \n\n12，mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}\n这个函数相当于将map和foldr结合起来\n\n\n13，merge(Fun, List1, List2) -> List3\n这个函数的功能也是把List1和List2合并到一起，只不过是List1和List2的元素要作为参数在Fun中执行，如果\nFun返回true，那么返回值就是List1在前，List2在后。否则，反之。\n例子\nlists:merge(fun(A,B)-> false end, [3,4],[2,1]).\n结果\n[2,1,3,4]\n\n \n\n14，partition(Pred, List) -> {Satisfying, NotSatisfying}\n这个函数的功能是将List分成两个List1和List2，List1是将List元素作为参数去Pred函数中执行返回true的元素组成，\nList2由Pred返回false的元素组成。\n注意，返回的是一个元组\n例子\nlists:partition(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]).\n结果\n{[1,3,5,7],[2,4,6]}\n\n\n15，sort(Fun, List1) -> List2\n如果Fun函数返回true，则排序是从小到大的顺序，否则，从大到小。\n其中Fun有两个参数。\n例子\nlists:sort(fun(A,B)-> false end,[1,2,3]).\n结果\n[3,2,1]\n\n\n16，splitwith(Pred, List) -> {List1, List2}\n将List分成List1和List2，\nList1由List中元素在Pred函数返回true的组成，但是有一点，如果遇到为false的，则将剩下的元素\n全部放到List2中，List1中就只有前面为true的。\n例子\nlists:splitwith(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e]).\n结果\n{[a,b],[1,c,d,2,3,4,e]}\n\n\n17，takewhile(Pred, List1) -> List2\nList1中的元素element依次执行Pred(element),如果返回true，则获取这个元素，直到有元素执行Pred(element)返回false\n例子\nlists:takewhile(fun(E)-> is_atom(E) end,[a,b,1,e,{c},[d]]).\n结果\n[a,b]\n\n\n18,umerge(Fun, List1, List2) -> List3\n这个函数和merge不同的是 当Fun返回true时，返回的List3中不能出现相同的元素\n疑问：但是当Fun返回false时，List3中可以有相同的元素。\n例子(Fun返回true的情况)\nlists:umerge(fun(A,B)-> true end,[1,2],[2,3]).\n结果\n[1,2,3]\n(Fun为false的情况)\nlists:umerge(fun(A,B)-> false end,[1,2],[2,3]).\n[2,3,1,2]\n好神奇，竟然2有重复\n\n \n\n19，usort(Fun, List1) -> List2\n按照Fun函数进行排序，如果Fun返回true，那么只返回List1的第一个元素\n如果Fun返回false，那么List1从大到小排序\n例子1\nlists:usort(fun(A,B) -> true end, [1,2,2,3,4]).\n结果\n[1]\n\n例子2\nlists:usort(fun(A,B) -> false end, [1,2,2,3,4]).\n结果\n[4,3,2,2,1]\n\n\n20，zipwith(Combine, List1, List2) -> List3\n将List1和list2中的每个元素执行Combine函数，然后返回一个元素，List3就是由Combine函数返回的一个个元素组成的。\n功能和map有点像，但是这里是对两个列表的操作。\n例子\nlists:zipwith(fun(X, Y) -> X+Y end, [1,2,3], [4,5,6]).\n结果\n[5,7,9]\n\n \n\n21，zipwith3(Combine, List1, List2, List3) -> List4\n将List1和list2，list3中的每个元素执行Combine函数，然后返回一个元素，List4就是由Combine函数返回的一个个元素组成的。\n功能和map有点像，但是这里是对三个列表的操作。\n例子\nlists:zipwith3(fun(X, Y, Z) -> X+Y+Z end, [1,2,3], [4,5,6],[7,8,9]).\n结果\n[12,15,18]\n\n \n\n二，不带函数Pred\n1，append(ListOfLists) -> List1\nListOfLists都是由List组成的，而List一个列表，里面可以是任何类型的元素\n这个函数就是将ListOfLists里面的所有列表的元素按顺序编成一个列表\n提示：ListOfLists里面的元素必须都是列表才能用这个函数\n\n例子\n\nlists:append([[1, 2, 3], [a, b], [4, 5, 6]]).\n\n结果：\n\n[1,2,3,a,b,4,5,6]\n\n\n2，append(List1, List2) -> List3\n将List1和List2两个列表连接起来，组成一个列表，然后返回新的这个列表\n这个函数的功能等同于List1 ++ List2\n\n例子\n\nlists:append(\"abc\", \"def\").\n\n结果\n\n\"abcdef\"\n\n \n\n3，concat(Things) -> string()\n这里的Things是一个列表，里面由atom() | integer() | float() | string()\n将这个列表里面的元素拼成一个字符串，然后返回\n\n例子\n\nlists:concat([doc, '/', file, '.', 3]).\n\n结果\n\ndoc/file.3\"\n\n \n\n4，delete(Elem, List1) -> List2\nList1是由很多Element组成的，这个函数的功能是在List1中寻找第一个和Elem元素一样的，\n然后删除之，返回删除后新的列表。\n\n例子\n\nlists:delete({name,\"zhangsan\"},[{name,\"lisi\"},{name,\"zhangsan\"},{name,\"wangmazi\"})).\n\n结果\n\n[{name,\"lisi\"},{name,\"wangmazi\"}]\n\n \n\n5，duplicate(N, Elem) -> List\n返回一个由N个Elem组成的列表。\n\n例子\n\nlists:duplicate(5,\"test\").\n\n结果\n\n[\"test\",\"test\",\"test\",\"test\",\"test\"]\n\n \n\n6，flatlength(DeepList) -> integer() >= 0\n我的理解是DeepList就是列表里面套列表\n计算列表的长度，即用flatten函数将DeepList转化成List后元素的个数\n这个函数和length()的区别就是：\nlength函数是得到列表元素的个数，\n而flatlength函数是先将DeepList转化成List后的个数\n譬如说List = [1,2,[3,4]]这个列表用\nlength(List)求的值是：3\nlists:flatlength(List)求的值是：4\n其实lists:flatlength(List) = length(flatten(List))\n\n7，flatten(DeepList) -> List\n将DeepList变成只有term()的list\n例子：\nlists:flatten([[a,a],[b,b],[c,c]]).\n结果：\n[a,a,b,b,c,c]\n\n \n\n8，flatten(DeepList, Tail) -> List\n就是将DeepList变成只有term的List后，在后面再加一个Tail。\n例子：\nlists:flatten([[a,a],[b,b],[c,c]],[dd]).\n结果：\n[a,a,b,b,c,c,dd]\n\n \n\n9,keydelete(Key, N, TupleList1) -> TupleList2\n这个函数适合处理列表里面的元素是元组的情况\n删除TupleList1中元素第N个元素和Key一致的元素，只删除第一个一样的，后面一样的不删除\n例子：\nList = [{name,\"zhangjing\"},{sex,\"male\"},{name,\"zhangsan\"},{sex,\"male\"}],\nlists:keydelete(\"male\",2,List)\n结果：\n[{name,\"zhangjing\"},{name,\"zhangsan\"},{sex,\"male\"}]\n\n \n\n10,keyfind(Key, N, TupleList) -> Tuple | false\n查找TupleList中的一个Tuple，如果查找到，返回，如果没有查找到，则返回false\n这个Tuple必须满足第N个元素和key是一样。\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}].\nlists:keyfind(\"zhangjing\",2,List1)\n结果：{name,\"zhangjing\"}\n\n \n\n11，keymember(Key, N, TupleList) -> boolean()\n如果TupleList中的元素中存在第N个元素和key一致，则返回true，否则返回false\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}].\nlists:keymember(\"zhangjing\",2,List1).\n结果：true\n\n \n\n12，keymerge(N, TupleList1, TupleList2) -> TupleList3\n将TupleList1和TupleList2进行混合，组成一个TupleList，\n新组成的TupleList是按照Tuple的第N个元素进行排序的\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}].\nList2 = [{nick,\"zj\"},{nick,\"zs\"}].\nlists:keymerge(2,List1,List2).\n结果：\n[{name,\"zhangjing\"},\n {name,\"zhangsan\"},\n {nick,\"zj\"},\n {nick,\"zs\"}]\n\n \n\n13，keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2\n在TupleList1的Tuple中找出第N个元素和Key一致，然后用NewTuple将这个Tuple替换掉，如果没有找到\n，则返回原来的TupleList1\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}]\nlists:keyreplace(\"zhangjing\",2,List1,{nickname,\"netzj\"}).\n结果：\n[{nickname,\"netzj\"},{name,\"zhangsan\"}]\n\n \n\n14，keysearch(Key, N, TupleList) -> {value, Tuple} | false\n这个函数和keyfind差不多，就是返回值的结构不一样\n也是在TupleList中找一个Tuple，这个Tuple的第N个元素和Key一样。\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"}]\nlists:keysearch(\"zhangjing\",2,List1).\n结果：\n{value,{name,\"zhangjing\"}}\n\n \n\n15，keysort(N, TupleList1) -> TupleList2\n对TupleList1中的Tuple按照第N个元素进行排序，然后返回一个新的顺序的TupleList。\n不过这种排序是固定的。\n例子：\nList1 = [{name,\"zhangsan\"},{name,\"zhangjing\"}].\nlists:keysort(2,List1).\n结果：\n[{name,\"zhangjing\"},{name,\"zhangsan\"}]\n\n \n\n16，keystore(Key, N, TupleList1, NewTuple) -> TupleList2\n这个函数和keyreplace函数比较像，不同的是，这个keystore在没有找到对应的Tuple时，\n会将这个NewTuple追加在这个TupleList1的最后。\n例子：\nList1 = [{name,\"zhangsan\"},{name,\"zhangjing\"}].\n找到了的情况\nlists:keystore(\"zhangjing\",2,List1,{name,\"netzhangjing\"}).\n[{name,\"netzhangjing\"},{name,\"zhangsan\"}]\n没有找到的情况\nlists:keystore(\"zhanging\",2,List1,{name,\"netzhangjing\"}).\n[{name,\"zhangjing\"},{name,\"zhangsan\"},{name,\"netzhangjing\"}]\n\n \n\n17，keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false\n在TupleList1中找Tuple，这个Tuple的第N个元素和Key一致，如果找到了这么一个Tuple\n那么返回，{value, Tuple, TupleList2} 其中TupleList2是去掉Tuple的TupleList1.\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"},{name,\"lisi\"}].\nlists:keytake(\"zhangjing\",2,List1).\n结果：\n{value,{name,\"zhangjing\"},[{name,\"zhangsan\"},{name,\"lisi\"}]}\n\n \n\n18，last(List) -> Last\n返回：List最后一个元素\n例子：\nList1 = [{name,\"zhangjing\"},{name,\"zhangsan\"},{name,\"lisi\"}].\nlists:last(List1).\n结果：\n{name,\"lisi\"}\n\n \n\n19，max(List) -> Max\n取出List中最大的元素，一般List是整型时比较适合。\n例子：\nlists:max([1,10,15,6]).\n结果：\n15\n\n \n\n20，member(Elem, List) -> boolean()\n如果Elem和List中的某个元素匹配（相同），那么返回true，否则返回false\n例子\nlists:member({sex,\"1\"},[{sex,\"1\"},{sex,\"2\"},{sex,\"3\"}]).\n结果：\ntrue\n\n21，merge(ListOfLists) -> List1\nListOfLists是一个列表，里面由子列表构成\n这个函数的功能就是将这些子列表合并成一个列表。\n例子：\nlists:merge([[{11}],[{22}],[{33}]]).\n结果\n[{11},{22},{33}]\n\n \n\n22，merge(List1, List2) -> List3\nList1和List2分别是一个列表，这个函数的功能是将这两个列表合并成一个列表。\n例子：\nlists:merge([11],[22]).\n结果\n[11,22]\n[2,1,3,4]\n\n\n23, merge3(List1, List2, List3) -> List4\n将List1，List2，List3合并成一个列表\n例子\nlists:merge3([11],[22],[33,44]).\n结果：\n[11,22,33,44]\n\n \n\n24，min(List) -> Min\n返回List中的最小的元素，和max函数对应\n例子\nlists:min([1,2,3]).\n结果\n1\n\n \n\n25，nth(N, List) -> Elem\n返回List中的第N个元素。\n例子\nlists:nth(2,[{name,\"zhangsan\"},{name,\"lisi\"},{name,\"wangmazi\"}]).\n结果\n{name,\"lisi\"}\n\n \n\n26，nthtail(N, List) -> Tail\n返回List列表中第N个元素后面的元素\n例子\nlists:nthtail(3, [a, b, c, d, e]).\n结果\n[d,e]\n\n\n27，prefix(List1, List2) -> boolean()\n如果List1是List2的前缀(也就是说List1和List2前部分相同)，那么返回true，否则返回false\n\n28，reverse(List1) -> List2\n将List1反转\n例子\nlists:reverse([1,2,3,4]).\n结果\n[4,3,2,1]\n\n \n\n29,reverse(List1, Tail) -> List2\n将List1反转，然后将Tail接在反转List1的后面，然后返回\n例子\nlists:reverse([1, 2, 3, 4], [a, b, c]).\n[4,3,2,1,a,b,c]\n\n \n\n30，seq(From, To) -> Seq\n其中From和To都是整型，这个函数返回一个从From到To的一个整型列表。\n例子\nlists:seq(1,10).\n结果\n[1,2,3,4,5,6,7,8,9,10]\n\n \n\n31，seq(From, To, Incr) -> Seq\n返回一个整型列表，这个列表的后一个元素比前一个元素大Incr。\n例子\nlists:seq(1,10,4).\n[1,5,9]\n\n \n\n32，sort(List1) -> List2\n将List1中的元素从小到大排序，然后返回新的一个列表。\n例子\nlists:sort([3,2,1]).\n结果\n[1,2,3]\n\n\n33，split(N, List1) -> {List2, List3}\n将List1分成List2和List3\n其中List2包括List1的前N个元素，List3包含剩余的。\n例子\nlists:split(3,[1,2,3,4,5]).\n结果\n{[1,2,3],[4,5]}\n\n\n这个函数和partition数有区别，partition是遍历全部的List，而splitwith在遍历时遇到false的情况\n则马上结束遍历，返回结果。\n\n34，sublist(List1, Len) -> List2\n返回从第一个元素到第Len个元素的列表，这个Len大于List1的长度时，返回全部。\n例子\nlists:sublist([1,2,3,4,5,6],3).\n结果\n[1,2,3]\n\n \n\n35，sublist(List1, Start, Len) -> List2\n返回从List1的第Start个位置开始，后面Len个元素的列表。\n例子\nlists:sublist([1,2,3,4], 2, 2).\n结果\n[2,3]\n\n \n\n36，subtract(List1, List2) -> List3\n等同于 List1 -- List2\n这个函数功能是返回一个List1的副本，对于List2中的每个元素，第一次在List1副本中出现时被删掉。\n例子\nlists:subtract(\"112233\",\"12\"). \n结果\n\"1233\"\n\n \n\n37，suffix(List1, List2) -> boolean()\n如果List1是List2的后缀，那么返回true，否则返回false\n例子\nlists:suffix(\"22\",\"1122\").\n结果\ntrue\n\n \n\n38，sum(List) -> number()\n返回List中每个元素的和。其中List中的元素都应该是number()类型的。\n例子\nlists:sum([1,2,3,4]). \n结果\n10\n\n\n39，ukeymerge(N, TupleList1, TupleList2) -> TupleList3\nTupleList1和TupleList2里面的元素都是元组\n将TupleList1和TupleList2合并，合并的规则是按照元组的第N个元素，如果第N个元素有相同的，那么保留TupleList1中\n的，删除TupleList2中的。\n\n \n\n40，ukeysort(N, TupleList1) -> TupleList2\nTupleList1里面的元素都是元组\n这个函数也同样返回一个元素是元组的列表，返回的这个列表是按照元组的第N个元素来排序的，如果元组中有出现\n第N个元素相同的情况，删除掉后面的一个元组。\n例子\nlists:ukeysort(1,[{name,\"zhangsan\"},{sex,\"male\"},{name,\"himan\"}]).\n结果\n[{name,\"zhangsan\"},{sex,\"male\"}]\n\n \n\n41，umerge(ListOfLists) -> List1\n这个函数和merge唯一不同的就是，里面不能出现相同的元素，如果出现相同的，那么删除之，只保留一个唯一的\n例子\nlists:umerge([[1,2],[2,3]]).\n结果\n[1,2,3]\n分析：由于[[1,2],[2,3]]中merge后是[1,2,2,3],这个时候有两个相同的元素2，所以只保存一个2，所以结果是[1,2,3].\n\n\n42，umerge3(List1, List2, List3) -> List4\n将List1, List2, List3合并\n和merge3不同的是返回的List4中不能出现重复的元素\n例子\nlists:merge3([1,2],[2,3],[3,4]).\n结果\n[1,2,3,4]\n\n \n\n43，unzip(List1) -> {List2, List3}\nList1里面的元素是元组，每个元组由两个元素组成，返回值List2包含每个List1中每个元组的第一个元素\n返回值List3包含每个List1中每个元组的第二个元素。\n例子\nlists:unzip([{name,\"zhangsan\"},{sex,\"male\"},{city,\"hangzhou\"}]).\n结果\n{[name,sex,city],[\"zhangsan\",\"male\",\"hangzhou\"]}\n\n \n\n44，unzip3(List1) -> {List2, List3, List4}\nList1里面的元素是元组，每个元组由三个元素组成，返回值List2包含每个List1中每个元组的第一个元素；\n返回值List3包含每个List1中每个元组的第二个元素；返回值List4包含每个List1中每个元组的第三个元素。\n例子\nlists:unzip3([{name,\"zhangsan\",\"apple\"},{sex,\"male\",\"banana\"},{city,\"hangzhou\",\"orange\"}]).\n结果\n{[name,sex,city],\n [\"zhangsan\",\"male\",\"hangzhou\"],\n [\"apple\",\"banana\",\"orange\"]}\n注意，最终返回的是一个元组。\n\n45，usort(List1) -> List2\n将List1按照从小到大的顺序排序，如果排序后有重复的元素，删除重复的，只保存一个唯一的。\n例子\nlists:usort([4,3,2,1,2,3,4]).\n结果\n[1,2,3,4]\n\n\n46，zip(List1, List2) -> List3\n将两个长度相同的列表合并成一个列表\nList3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的\n例子\nlists:zip([name,sex,city],[\"zhangsan\",\"male\",\"hangzhou\"]).\n结果\n[{name,\"zhangsan\"},{sex,\"male\"},{city,\"hangzhou\"}]\n注意，如果List1和List2长度不一致，那么这个函数将会报错。\n\n \n\n47，zip3(List1, List2, List3) -> List4\n将三个长度相同的列表合并成一个列表\nList3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的\n每个元组的第三个元素是从List3中获取的。\n例子\nlists:zip3([name,sex,city],[\"zhangsan\",\"male\",\"hangzhou\"],[\"nick\",\"1\",\"zhejiang\"]).\n结果\n[{name,\"zhangsan\",\"nick\"},\n {sex,\"male\",\"1\"},\n {city,\"hangzhou\",\"zhejiang\"}]\n\n","slug":"Erlang List模块函数使用大全","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc919000g1d8n384fzz5f","content":"<p>Erlang List模块函数使用大全</p>\n<p>一，带函数Pred<br>1, all(Pred, List) -&gt; boolean()<br>如果List中的每个元素作为Pred函数的参数执行，结果都返回true，那么all函数返回true，<br>否则返回false</p>\n<p>例子：</p>\n<p>lists:all(fun(E) -&gt; true end,[1,2,3,4]).</p>\n<p>结果</p>\n<p>true</p>\n<p>2, any(Pred, List) -&gt; boolean()<br>如果List中至少有一个元素作为Pred函数的参数执行，结果返回true，那么any函数返回true，<br>否则返回false</p>\n<p>例子</p>\n<p>lists:any(fun(E) -&gt; is_integer(E) end,[q,2,a,4]).</p>\n<p>结果</p>\n<p>true</p>\n<p>3，dropwhile(Pred, List1) -&gt; List2<br>将List1列表中的元素作为参数执行Pred函数，如果返回true，将其丢弃，最后返回剩余元素<br>组成的列表</p>\n<p>例子</p>\n<p>lists:dropwhile(fun(E) -&gt; is_atom(E) end,[a,1,2,a,b]).</p>\n<p>结果</p>\n<p>[1,2,a,b]</p>\n<p>4，filter(Pred, List1) -&gt; List2<br>返回一个列表，这个列表是由List1中执行Pred函数返回true的元素组成。</p>\n<p>lists:filter(fun(E) -&gt; is_integer(E) end,[q,2,a,4]).</p>\n<p>结果：</p>\n<p>[2,4]</p>\n <a id=\"more\"></a>\n<p>5，map(Fun, List1) -&gt; List2<br>将List1中的每个元素去在Fun中执行，然后返回一个元素，最后返回的这些元素组成一个列表，<br>返回给List2<br>例子：<br>lists:map(fun(X)-&gt;[X,X] end, [a,b,c]).<br>结果：[[a,a],[b,b],[c,c]]</p>\n<p>6，flatmap(Fun, List1) -&gt; List2<br>这个函数和map比较类似，相当于执行了<br>lists:append(lists:map(List1)).<br>也就是把map的结果进行append处理<br>例子：<br>lists:flatmap(fun(X)-&gt;[X,X] end, [a,b,c]).<br>结果：[a,a,b,b,c,c]</p>\n<p>7，foldl(Fun, Acc0, List) -&gt; Acc1<br>Fun这个函数有两个参数<br>第一个参数是List中的元素，第二个参数是Fun函数执行完后的返回值，这个参数第一次执行时<br>就是Acc0<br>例子：对[1,2,3,4,5]求和<br>lists:foldl(fun(X, Sum) -&gt; X + Sum end, 0, [1,2,3,4,5]).<br>结果：15<br>执行过程：首先，Fun第一次执行时，X的值取列表List的第一个元素1，Sum取0,<br>  Fun第二次执行时，X的值取列表List的第二个元素2，Sum取Fun第一次的返回值<br>  依次轮推，直到List中每个元素执行完，最后foldl返回最后一次的结果。</p>\n<p>8，foldr(Fun, Acc0, List) -&gt; Acc1<br>foldr这个函数和foldl比较相似<br>不过是Fun执行时，X的值先取List的最后一个，然后取倒数第二个。</p>\n<p>9，foreach(Fun, List) -&gt; ok<br>以List中的每个元素为参数执行Fun函数，执行顺序按照List中元素的顺序，这个函数最后返回ok。是单边的<br>例子 lists:foreach(fun(X)-&gt;<br>  %%using X to do somethings<br>  %%<br>  end,List)</p>\n<p>10，keymap(Fun, N, TupleList1) -&gt; TupleList2<br>对TupleList1中的每个元素的第N项作为参数在Fun中处理，然后这个第N项最后就被替换为Fun执行完返回的值<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keymap(fun(X)-&gt;<br>  list_to_atom(X)<br>  end,2,List1).<br>结果：<br>[{name,zhangjing},{name,zhangsan}]</p>\n<p>11，mapfoldl(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>这个函数等于是把map和foldl函数结合起来。将List1中的每一个元素执行Fun函数，执行后花括号的第一个值作为返回值返回，<br>第二个值作为参数传给Fun，作为下一次用。<br>例子：<br>lists:mapfoldl(fun(X, Sum) -&gt; {2*X, X+Sum} end,<br>0, [1,2,3,4,5]).<br>{[2,4,6,8,10],15}</p>\n<p>12，mapfoldr(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>这个函数相当于将map和foldr结合起来</p>\n<p>13，merge(Fun, List1, List2) -&gt; List3<br>这个函数的功能也是把List1和List2合并到一起，只不过是List1和List2的元素要作为参数在Fun中执行，如果<br>Fun返回true，那么返回值就是List1在前，List2在后。否则，反之。<br>例子<br>lists:merge(fun(A,B)-&gt; false end, [3,4],[2,1]).<br>结果<br>[2,1,3,4]</p>\n<p>14，partition(Pred, List) -&gt; {Satisfying, NotSatisfying}<br>这个函数的功能是将List分成两个List1和List2，List1是将List元素作为参数去Pred函数中执行返回true的元素组成，<br>List2由Pred返回false的元素组成。<br>注意，返回的是一个元组<br>例子<br>lists:partition(fun(A) -&gt; A rem 2 == 1 end, [1,2,3,4,5,6,7]).<br>结果<br>{[1,3,5,7],[2,4,6]}</p>\n<p>15，sort(Fun, List1) -&gt; List2<br>如果Fun函数返回true，则排序是从小到大的顺序，否则，从大到小。<br>其中Fun有两个参数。<br>例子<br>lists:sort(fun(A,B)-&gt; false end,[1,2,3]).<br>结果<br>[3,2,1]</p>\n<p>16，splitwith(Pred, List) -&gt; {List1, List2}<br>将List分成List1和List2，<br>List1由List中元素在Pred函数返回true的组成，但是有一点，如果遇到为false的，则将剩下的元素<br>全部放到List2中，List1中就只有前面为true的。<br>例子<br>lists:splitwith(fun(A) -&gt; is_atom(A) end, [a,b,1,c,d,2,3,4,e]).<br>结果<br>{[a,b],[1,c,d,2,3,4,e]}</p>\n<p>17，takewhile(Pred, List1) -&gt; List2<br>List1中的元素element依次执行Pred(element),如果返回true，则获取这个元素，直到有元素执行Pred(element)返回false<br>例子<br>lists:takewhile(fun(E)-&gt; is_atom(E) end,[a,b,1,e,{c},[d]]).<br>结果<br>[a,b]</p>\n<p>18,umerge(Fun, List1, List2) -&gt; List3<br>这个函数和merge不同的是 当Fun返回true时，返回的List3中不能出现相同的元素<br>疑问：但是当Fun返回false时，List3中可以有相同的元素。<br>例子(Fun返回true的情况)<br>lists:umerge(fun(A,B)-&gt; true end,[1,2],[2,3]).<br>结果<br>[1,2,3]<br>(Fun为false的情况)<br>lists:umerge(fun(A,B)-&gt; false end,[1,2],[2,3]).<br>[2,3,1,2]<br>好神奇，竟然2有重复</p>\n<p>19，usort(Fun, List1) -&gt; List2<br>按照Fun函数进行排序，如果Fun返回true，那么只返回List1的第一个元素<br>如果Fun返回false，那么List1从大到小排序<br>例子1<br>lists:usort(fun(A,B) -&gt; true end, [1,2,2,3,4]).<br>结果<br>[1]</p>\n<p>例子2<br>lists:usort(fun(A,B) -&gt; false end, [1,2,2,3,4]).<br>结果<br>[4,3,2,2,1]</p>\n<p>20，zipwith(Combine, List1, List2) -&gt; List3<br>将List1和list2中的每个元素执行Combine函数，然后返回一个元素，List3就是由Combine函数返回的一个个元素组成的。<br>功能和map有点像，但是这里是对两个列表的操作。<br>例子<br>lists:zipwith(fun(X, Y) -&gt; X+Y end, [1,2,3], [4,5,6]).<br>结果<br>[5,7,9]</p>\n<p>21，zipwith3(Combine, List1, List2, List3) -&gt; List4<br>将List1和list2，list3中的每个元素执行Combine函数，然后返回一个元素，List4就是由Combine函数返回的一个个元素组成的。<br>功能和map有点像，但是这里是对三个列表的操作。<br>例子<br>lists:zipwith3(fun(X, Y, Z) -&gt; X+Y+Z end, [1,2,3], [4,5,6],[7,8,9]).<br>结果<br>[12,15,18]</p>\n<p>二，不带函数Pred<br>1，append(ListOfLists) -&gt; List1<br>ListOfLists都是由List组成的，而List一个列表，里面可以是任何类型的元素<br>这个函数就是将ListOfLists里面的所有列表的元素按顺序编成一个列表<br>提示：ListOfLists里面的元素必须都是列表才能用这个函数</p>\n<p>例子</p>\n<p>lists:append([[1, 2, 3], [a, b], [4, 5, 6]]).</p>\n<p>结果：</p>\n<p>[1,2,3,a,b,4,5,6]</p>\n<p>2，append(List1, List2) -&gt; List3<br>将List1和List2两个列表连接起来，组成一个列表，然后返回新的这个列表<br>这个函数的功能等同于List1 ++ List2</p>\n<p>例子</p>\n<p>lists:append(“abc”, “def”).</p>\n<p>结果</p>\n<p>“abcdef”</p>\n<p>3，concat(Things) -&gt; string()<br>这里的Things是一个列表，里面由atom() | integer() | float() | string()<br>将这个列表里面的元素拼成一个字符串，然后返回</p>\n<p>例子</p>\n<p>lists:concat([doc, ‘/‘, file, ‘.’, 3]).</p>\n<p>结果</p>\n<p>doc/file.3”</p>\n<p>4，delete(Elem, List1) -&gt; List2<br>List1是由很多Element组成的，这个函数的功能是在List1中寻找第一个和Elem元素一样的，<br>然后删除之，返回删除后新的列表。</p>\n<p>例子</p>\n<p>lists:delete({name,”zhangsan”},[{name,”lisi”},{name,”zhangsan”},{name,”wangmazi”})).</p>\n<p>结果</p>\n<p>[{name,”lisi”},{name,”wangmazi”}]</p>\n<p>5，duplicate(N, Elem) -&gt; List<br>返回一个由N个Elem组成的列表。</p>\n<p>例子</p>\n<p>lists:duplicate(5,”test”).</p>\n<p>结果</p>\n<p>[“test”,”test”,”test”,”test”,”test”]</p>\n<p>6，flatlength(DeepList) -&gt; integer() &gt;= 0<br>我的理解是DeepList就是列表里面套列表<br>计算列表的长度，即用flatten函数将DeepList转化成List后元素的个数<br>这个函数和length()的区别就是：<br>length函数是得到列表元素的个数，<br>而flatlength函数是先将DeepList转化成List后的个数<br>譬如说List = [1,2,[3,4]]这个列表用<br>length(List)求的值是：3<br>lists:flatlength(List)求的值是：4<br>其实lists:flatlength(List) = length(flatten(List))</p>\n<p>7，flatten(DeepList) -&gt; List<br>将DeepList变成只有term()的list<br>例子：<br>lists:flatten([[a,a],[b,b],[c,c]]).<br>结果：<br>[a,a,b,b,c,c]</p>\n<p>8，flatten(DeepList, Tail) -&gt; List<br>就是将DeepList变成只有term的List后，在后面再加一个Tail。<br>例子：<br>lists:flatten([[a,a],[b,b],[c,c]],[dd]).<br>结果：<br>[a,a,b,b,c,c,dd]</p>\n<p>9,keydelete(Key, N, TupleList1) -&gt; TupleList2<br>这个函数适合处理列表里面的元素是元组的情况<br>删除TupleList1中元素第N个元素和Key一致的元素，只删除第一个一样的，后面一样的不删除<br>例子：<br>List = [{name,”zhangjing”},{sex,”male”},{name,”zhangsan”},{sex,”male”}],<br>lists:keydelete(“male”,2,List)<br>结果：<br>[{name,”zhangjing”},{name,”zhangsan”},{sex,”male”}]</p>\n<p>10,keyfind(Key, N, TupleList) -&gt; Tuple | false<br>查找TupleList中的一个Tuple，如果查找到，返回，如果没有查找到，则返回false<br>这个Tuple必须满足第N个元素和key是一样。<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keyfind(“zhangjing”,2,List1)<br>结果：{name,”zhangjing”}</p>\n<p>11，keymember(Key, N, TupleList) -&gt; boolean()<br>如果TupleList中的元素中存在第N个元素和key一致，则返回true，否则返回false<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keymember(“zhangjing”,2,List1).<br>结果：true</p>\n<p>12，keymerge(N, TupleList1, TupleList2) -&gt; TupleList3<br>将TupleList1和TupleList2进行混合，组成一个TupleList，<br>新组成的TupleList是按照Tuple的第N个元素进行排序的<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>List2 = [{nick,”zj”},{nick,”zs”}].<br>lists:keymerge(2,List1,List2).<br>结果：<br>[{name,”zhangjing”},<br> {name,”zhangsan”},<br> {nick,”zj”},<br> {nick,”zs”}]</p>\n<p>13，keyreplace(Key, N, TupleList1, NewTuple) -&gt; TupleList2<br>在TupleList1的Tuple中找出第N个元素和Key一致，然后用NewTuple将这个Tuple替换掉，如果没有找到<br>，则返回原来的TupleList1<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}]<br>lists:keyreplace(“zhangjing”,2,List1,{nickname,”netzj”}).<br>结果：<br>[{nickname,”netzj”},{name,”zhangsan”}]</p>\n<p>14，keysearch(Key, N, TupleList) -&gt; {value, Tuple} | false<br>这个函数和keyfind差不多，就是返回值的结构不一样<br>也是在TupleList中找一个Tuple，这个Tuple的第N个元素和Key一样。<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}]<br>lists:keysearch(“zhangjing”,2,List1).<br>结果：<br>{value,{name,”zhangjing”}}</p>\n<p>15，keysort(N, TupleList1) -&gt; TupleList2<br>对TupleList1中的Tuple按照第N个元素进行排序，然后返回一个新的顺序的TupleList。<br>不过这种排序是固定的。<br>例子：<br>List1 = [{name,”zhangsan”},{name,”zhangjing”}].<br>lists:keysort(2,List1).<br>结果：<br>[{name,”zhangjing”},{name,”zhangsan”}]</p>\n<p>16，keystore(Key, N, TupleList1, NewTuple) -&gt; TupleList2<br>这个函数和keyreplace函数比较像，不同的是，这个keystore在没有找到对应的Tuple时，<br>会将这个NewTuple追加在这个TupleList1的最后。<br>例子：<br>List1 = [{name,”zhangsan”},{name,”zhangjing”}].<br>找到了的情况<br>lists:keystore(“zhangjing”,2,List1,{name,”netzhangjing”}).<br>[{name,”netzhangjing”},{name,”zhangsan”}]<br>没有找到的情况<br>lists:keystore(“zhanging”,2,List1,{name,”netzhangjing”}).<br>[{name,”zhangjing”},{name,”zhangsan”},{name,”netzhangjing”}]</p>\n<p>17，keytake(Key, N, TupleList1) -&gt; {value, Tuple, TupleList2} | false<br>在TupleList1中找Tuple，这个Tuple的第N个元素和Key一致，如果找到了这么一个Tuple<br>那么返回，{value, Tuple, TupleList2} 其中TupleList2是去掉Tuple的TupleList1.<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”},{name,”lisi”}].<br>lists:keytake(“zhangjing”,2,List1).<br>结果：<br>{value,{name,”zhangjing”},[{name,”zhangsan”},{name,”lisi”}]}</p>\n<p>18，last(List) -&gt; Last<br>返回：List最后一个元素<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”},{name,”lisi”}].<br>lists:last(List1).<br>结果：<br>{name,”lisi”}</p>\n<p>19，max(List) -&gt; Max<br>取出List中最大的元素，一般List是整型时比较适合。<br>例子：<br>lists:max([1,10,15,6]).<br>结果：<br>15</p>\n<p>20，member(Elem, List) -&gt; boolean()<br>如果Elem和List中的某个元素匹配（相同），那么返回true，否则返回false<br>例子<br>lists:member({sex,”1”},[{sex,”1”},{sex,”2”},{sex,”3”}]).<br>结果：<br>true</p>\n<p>21，merge(ListOfLists) -&gt; List1<br>ListOfLists是一个列表，里面由子列表构成<br>这个函数的功能就是将这些子列表合并成一个列表。<br>例子：<br>lists:merge([[{11}],[{22}],[{33}]]).<br>结果<br>[{11},{22},{33}]</p>\n<p>22，merge(List1, List2) -&gt; List3<br>List1和List2分别是一个列表，这个函数的功能是将这两个列表合并成一个列表。<br>例子：<br>lists:merge([11],[22]).<br>结果<br>[11,22]<br>[2,1,3,4]</p>\n<p>23, merge3(List1, List2, List3) -&gt; List4<br>将List1，List2，List3合并成一个列表<br>例子<br>lists:merge3([11],[22],[33,44]).<br>结果：<br>[11,22,33,44]</p>\n<p>24，min(List) -&gt; Min<br>返回List中的最小的元素，和max函数对应<br>例子<br>lists:min([1,2,3]).<br>结果<br>1</p>\n<p>25，nth(N, List) -&gt; Elem<br>返回List中的第N个元素。<br>例子<br>lists:nth(2,[{name,”zhangsan”},{name,”lisi”},{name,”wangmazi”}]).<br>结果<br>{name,”lisi”}</p>\n<p>26，nthtail(N, List) -&gt; Tail<br>返回List列表中第N个元素后面的元素<br>例子<br>lists:nthtail(3, [a, b, c, d, e]).<br>结果<br>[d,e]</p>\n<p>27，prefix(List1, List2) -&gt; boolean()<br>如果List1是List2的前缀(也就是说List1和List2前部分相同)，那么返回true，否则返回false</p>\n<p>28，reverse(List1) -&gt; List2<br>将List1反转<br>例子<br>lists:reverse([1,2,3,4]).<br>结果<br>[4,3,2,1]</p>\n<p>29,reverse(List1, Tail) -&gt; List2<br>将List1反转，然后将Tail接在反转List1的后面，然后返回<br>例子<br>lists:reverse([1, 2, 3, 4], [a, b, c]).<br>[4,3,2,1,a,b,c]</p>\n<p>30，seq(From, To) -&gt; Seq<br>其中From和To都是整型，这个函数返回一个从From到To的一个整型列表。<br>例子<br>lists:seq(1,10).<br>结果<br>[1,2,3,4,5,6,7,8,9,10]</p>\n<p>31，seq(From, To, Incr) -&gt; Seq<br>返回一个整型列表，这个列表的后一个元素比前一个元素大Incr。<br>例子<br>lists:seq(1,10,4).<br>[1,5,9]</p>\n<p>32，sort(List1) -&gt; List2<br>将List1中的元素从小到大排序，然后返回新的一个列表。<br>例子<br>lists:sort([3,2,1]).<br>结果<br>[1,2,3]</p>\n<p>33，split(N, List1) -&gt; {List2, List3}<br>将List1分成List2和List3<br>其中List2包括List1的前N个元素，List3包含剩余的。<br>例子<br>lists:split(3,[1,2,3,4,5]).<br>结果<br>{[1,2,3],[4,5]}</p>\n<p>这个函数和partition数有区别，partition是遍历全部的List，而splitwith在遍历时遇到false的情况<br>则马上结束遍历，返回结果。</p>\n<p>34，sublist(List1, Len) -&gt; List2<br>返回从第一个元素到第Len个元素的列表，这个Len大于List1的长度时，返回全部。<br>例子<br>lists:sublist([1,2,3,4,5,6],3).<br>结果<br>[1,2,3]</p>\n<p>35，sublist(List1, Start, Len) -&gt; List2<br>返回从List1的第Start个位置开始，后面Len个元素的列表。<br>例子<br>lists:sublist([1,2,3,4], 2, 2).<br>结果<br>[2,3]</p>\n<p>36，subtract(List1, List2) -&gt; List3<br>等同于 List1 – List2<br>这个函数功能是返回一个List1的副本，对于List2中的每个元素，第一次在List1副本中出现时被删掉。<br>例子<br>lists:subtract(“112233”,”12”).<br>结果<br>“1233”</p>\n<p>37，suffix(List1, List2) -&gt; boolean()<br>如果List1是List2的后缀，那么返回true，否则返回false<br>例子<br>lists:suffix(“22”,”1122”).<br>结果<br>true</p>\n<p>38，sum(List) -&gt; number()<br>返回List中每个元素的和。其中List中的元素都应该是number()类型的。<br>例子<br>lists:sum([1,2,3,4]).<br>结果<br>10</p>\n<p>39，ukeymerge(N, TupleList1, TupleList2) -&gt; TupleList3<br>TupleList1和TupleList2里面的元素都是元组<br>将TupleList1和TupleList2合并，合并的规则是按照元组的第N个元素，如果第N个元素有相同的，那么保留TupleList1中<br>的，删除TupleList2中的。</p>\n<p>40，ukeysort(N, TupleList1) -&gt; TupleList2<br>TupleList1里面的元素都是元组<br>这个函数也同样返回一个元素是元组的列表，返回的这个列表是按照元组的第N个元素来排序的，如果元组中有出现<br>第N个元素相同的情况，删除掉后面的一个元组。<br>例子<br>lists:ukeysort(1,[{name,”zhangsan”},{sex,”male”},{name,”himan”}]).<br>结果<br>[{name,”zhangsan”},{sex,”male”}]</p>\n<p>41，umerge(ListOfLists) -&gt; List1<br>这个函数和merge唯一不同的就是，里面不能出现相同的元素，如果出现相同的，那么删除之，只保留一个唯一的<br>例子<br>lists:umerge([[1,2],[2,3]]).<br>结果<br>[1,2,3]<br>分析：由于[[1,2],[2,3]]中merge后是[1,2,2,3],这个时候有两个相同的元素2，所以只保存一个2，所以结果是[1,2,3].</p>\n<p>42，umerge3(List1, List2, List3) -&gt; List4<br>将List1, List2, List3合并<br>和merge3不同的是返回的List4中不能出现重复的元素<br>例子<br>lists:merge3([1,2],[2,3],[3,4]).<br>结果<br>[1,2,3,4]</p>\n<p>43，unzip(List1) -&gt; {List2, List3}<br>List1里面的元素是元组，每个元组由两个元素组成，返回值List2包含每个List1中每个元组的第一个元素<br>返回值List3包含每个List1中每个元组的第二个元素。<br>例子<br>lists:unzip([{name,”zhangsan”},{sex,”male”},{city,”hangzhou”}]).<br>结果<br>{[name,sex,city],[“zhangsan”,”male”,”hangzhou”]}</p>\n<p>44，unzip3(List1) -&gt; {List2, List3, List4}<br>List1里面的元素是元组，每个元组由三个元素组成，返回值List2包含每个List1中每个元组的第一个元素；<br>返回值List3包含每个List1中每个元组的第二个元素；返回值List4包含每个List1中每个元组的第三个元素。<br>例子<br>lists:unzip3([{name,”zhangsan”,”apple”},{sex,”male”,”banana”},{city,”hangzhou”,”orange”}]).<br>结果<br>{[name,sex,city],<br> [“zhangsan”,”male”,”hangzhou”],<br> [“apple”,”banana”,”orange”]}<br>注意，最终返回的是一个元组。</p>\n<p>45，usort(List1) -&gt; List2<br>将List1按照从小到大的顺序排序，如果排序后有重复的元素，删除重复的，只保存一个唯一的。<br>例子<br>lists:usort([4,3,2,1,2,3,4]).<br>结果<br>[1,2,3,4]</p>\n<p>46，zip(List1, List2) -&gt; List3<br>将两个长度相同的列表合并成一个列表<br>List3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的<br>例子<br>lists:zip([name,sex,city],[“zhangsan”,”male”,”hangzhou”]).<br>结果<br>[{name,”zhangsan”},{sex,”male”},{city,”hangzhou”}]<br>注意，如果List1和List2长度不一致，那么这个函数将会报错。</p>\n<p>47，zip3(List1, List2, List3) -&gt; List4<br>将三个长度相同的列表合并成一个列表<br>List3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的<br>每个元组的第三个元素是从List3中获取的。<br>例子<br>lists:zip3([name,sex,city],[“zhangsan”,”male”,”hangzhou”],[“nick”,”1”,”zhejiang”]).<br>结果<br>[{name,”zhangsan”,”nick”},<br> {sex,”male”,”1”},<br> {city,”hangzhou”,”zhejiang”}]</p>\n","site":{"data":{}},"excerpt":"<p>Erlang List模块函数使用大全</p>\n<p>一，带函数Pred<br>1, all(Pred, List) -&gt; boolean()<br>如果List中的每个元素作为Pred函数的参数执行，结果都返回true，那么all函数返回true，<br>否则返回false</p>\n<p>例子：</p>\n<p>lists:all(fun(E) -&gt; true end,[1,2,3,4]).</p>\n<p>结果</p>\n<p>true</p>\n<p>2, any(Pred, List) -&gt; boolean()<br>如果List中至少有一个元素作为Pred函数的参数执行，结果返回true，那么any函数返回true，<br>否则返回false</p>\n<p>例子</p>\n<p>lists:any(fun(E) -&gt; is_integer(E) end,[q,2,a,4]).</p>\n<p>结果</p>\n<p>true</p>\n<p>3，dropwhile(Pred, List1) -&gt; List2<br>将List1列表中的元素作为参数执行Pred函数，如果返回true，将其丢弃，最后返回剩余元素<br>组成的列表</p>\n<p>例子</p>\n<p>lists:dropwhile(fun(E) -&gt; is_atom(E) end,[a,1,2,a,b]).</p>\n<p>结果</p>\n<p>[1,2,a,b]</p>\n<p>4，filter(Pred, List1) -&gt; List2<br>返回一个列表，这个列表是由List1中执行Pred函数返回true的元素组成。</p>\n<p>lists:filter(fun(E) -&gt; is_integer(E) end,[q,2,a,4]).</p>\n<p>结果：</p>\n<p>[2,4]</p>","more":"<p>5，map(Fun, List1) -&gt; List2<br>将List1中的每个元素去在Fun中执行，然后返回一个元素，最后返回的这些元素组成一个列表，<br>返回给List2<br>例子：<br>lists:map(fun(X)-&gt;[X,X] end, [a,b,c]).<br>结果：[[a,a],[b,b],[c,c]]</p>\n<p>6，flatmap(Fun, List1) -&gt; List2<br>这个函数和map比较类似，相当于执行了<br>lists:append(lists:map(List1)).<br>也就是把map的结果进行append处理<br>例子：<br>lists:flatmap(fun(X)-&gt;[X,X] end, [a,b,c]).<br>结果：[a,a,b,b,c,c]</p>\n<p>7，foldl(Fun, Acc0, List) -&gt; Acc1<br>Fun这个函数有两个参数<br>第一个参数是List中的元素，第二个参数是Fun函数执行完后的返回值，这个参数第一次执行时<br>就是Acc0<br>例子：对[1,2,3,4,5]求和<br>lists:foldl(fun(X, Sum) -&gt; X + Sum end, 0, [1,2,3,4,5]).<br>结果：15<br>执行过程：首先，Fun第一次执行时，X的值取列表List的第一个元素1，Sum取0,<br>  Fun第二次执行时，X的值取列表List的第二个元素2，Sum取Fun第一次的返回值<br>  依次轮推，直到List中每个元素执行完，最后foldl返回最后一次的结果。</p>\n<p>8，foldr(Fun, Acc0, List) -&gt; Acc1<br>foldr这个函数和foldl比较相似<br>不过是Fun执行时，X的值先取List的最后一个，然后取倒数第二个。</p>\n<p>9，foreach(Fun, List) -&gt; ok<br>以List中的每个元素为参数执行Fun函数，执行顺序按照List中元素的顺序，这个函数最后返回ok。是单边的<br>例子 lists:foreach(fun(X)-&gt;<br>  %%using X to do somethings<br>  %%<br>  end,List)</p>\n<p>10，keymap(Fun, N, TupleList1) -&gt; TupleList2<br>对TupleList1中的每个元素的第N项作为参数在Fun中处理，然后这个第N项最后就被替换为Fun执行完返回的值<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keymap(fun(X)-&gt;<br>  list_to_atom(X)<br>  end,2,List1).<br>结果：<br>[{name,zhangjing},{name,zhangsan}]</p>\n<p>11，mapfoldl(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>这个函数等于是把map和foldl函数结合起来。将List1中的每一个元素执行Fun函数，执行后花括号的第一个值作为返回值返回，<br>第二个值作为参数传给Fun，作为下一次用。<br>例子：<br>lists:mapfoldl(fun(X, Sum) -&gt; {2*X, X+Sum} end,<br>0, [1,2,3,4,5]).<br>{[2,4,6,8,10],15}</p>\n<p>12，mapfoldr(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>这个函数相当于将map和foldr结合起来</p>\n<p>13，merge(Fun, List1, List2) -&gt; List3<br>这个函数的功能也是把List1和List2合并到一起，只不过是List1和List2的元素要作为参数在Fun中执行，如果<br>Fun返回true，那么返回值就是List1在前，List2在后。否则，反之。<br>例子<br>lists:merge(fun(A,B)-&gt; false end, [3,4],[2,1]).<br>结果<br>[2,1,3,4]</p>\n<p>14，partition(Pred, List) -&gt; {Satisfying, NotSatisfying}<br>这个函数的功能是将List分成两个List1和List2，List1是将List元素作为参数去Pred函数中执行返回true的元素组成，<br>List2由Pred返回false的元素组成。<br>注意，返回的是一个元组<br>例子<br>lists:partition(fun(A) -&gt; A rem 2 == 1 end, [1,2,3,4,5,6,7]).<br>结果<br>{[1,3,5,7],[2,4,6]}</p>\n<p>15，sort(Fun, List1) -&gt; List2<br>如果Fun函数返回true，则排序是从小到大的顺序，否则，从大到小。<br>其中Fun有两个参数。<br>例子<br>lists:sort(fun(A,B)-&gt; false end,[1,2,3]).<br>结果<br>[3,2,1]</p>\n<p>16，splitwith(Pred, List) -&gt; {List1, List2}<br>将List分成List1和List2，<br>List1由List中元素在Pred函数返回true的组成，但是有一点，如果遇到为false的，则将剩下的元素<br>全部放到List2中，List1中就只有前面为true的。<br>例子<br>lists:splitwith(fun(A) -&gt; is_atom(A) end, [a,b,1,c,d,2,3,4,e]).<br>结果<br>{[a,b],[1,c,d,2,3,4,e]}</p>\n<p>17，takewhile(Pred, List1) -&gt; List2<br>List1中的元素element依次执行Pred(element),如果返回true，则获取这个元素，直到有元素执行Pred(element)返回false<br>例子<br>lists:takewhile(fun(E)-&gt; is_atom(E) end,[a,b,1,e,{c},[d]]).<br>结果<br>[a,b]</p>\n<p>18,umerge(Fun, List1, List2) -&gt; List3<br>这个函数和merge不同的是 当Fun返回true时，返回的List3中不能出现相同的元素<br>疑问：但是当Fun返回false时，List3中可以有相同的元素。<br>例子(Fun返回true的情况)<br>lists:umerge(fun(A,B)-&gt; true end,[1,2],[2,3]).<br>结果<br>[1,2,3]<br>(Fun为false的情况)<br>lists:umerge(fun(A,B)-&gt; false end,[1,2],[2,3]).<br>[2,3,1,2]<br>好神奇，竟然2有重复</p>\n<p>19，usort(Fun, List1) -&gt; List2<br>按照Fun函数进行排序，如果Fun返回true，那么只返回List1的第一个元素<br>如果Fun返回false，那么List1从大到小排序<br>例子1<br>lists:usort(fun(A,B) -&gt; true end, [1,2,2,3,4]).<br>结果<br>[1]</p>\n<p>例子2<br>lists:usort(fun(A,B) -&gt; false end, [1,2,2,3,4]).<br>结果<br>[4,3,2,2,1]</p>\n<p>20，zipwith(Combine, List1, List2) -&gt; List3<br>将List1和list2中的每个元素执行Combine函数，然后返回一个元素，List3就是由Combine函数返回的一个个元素组成的。<br>功能和map有点像，但是这里是对两个列表的操作。<br>例子<br>lists:zipwith(fun(X, Y) -&gt; X+Y end, [1,2,3], [4,5,6]).<br>结果<br>[5,7,9]</p>\n<p>21，zipwith3(Combine, List1, List2, List3) -&gt; List4<br>将List1和list2，list3中的每个元素执行Combine函数，然后返回一个元素，List4就是由Combine函数返回的一个个元素组成的。<br>功能和map有点像，但是这里是对三个列表的操作。<br>例子<br>lists:zipwith3(fun(X, Y, Z) -&gt; X+Y+Z end, [1,2,3], [4,5,6],[7,8,9]).<br>结果<br>[12,15,18]</p>\n<p>二，不带函数Pred<br>1，append(ListOfLists) -&gt; List1<br>ListOfLists都是由List组成的，而List一个列表，里面可以是任何类型的元素<br>这个函数就是将ListOfLists里面的所有列表的元素按顺序编成一个列表<br>提示：ListOfLists里面的元素必须都是列表才能用这个函数</p>\n<p>例子</p>\n<p>lists:append([[1, 2, 3], [a, b], [4, 5, 6]]).</p>\n<p>结果：</p>\n<p>[1,2,3,a,b,4,5,6]</p>\n<p>2，append(List1, List2) -&gt; List3<br>将List1和List2两个列表连接起来，组成一个列表，然后返回新的这个列表<br>这个函数的功能等同于List1 ++ List2</p>\n<p>例子</p>\n<p>lists:append(“abc”, “def”).</p>\n<p>结果</p>\n<p>“abcdef”</p>\n<p>3，concat(Things) -&gt; string()<br>这里的Things是一个列表，里面由atom() | integer() | float() | string()<br>将这个列表里面的元素拼成一个字符串，然后返回</p>\n<p>例子</p>\n<p>lists:concat([doc, ‘/‘, file, ‘.’, 3]).</p>\n<p>结果</p>\n<p>doc/file.3”</p>\n<p>4，delete(Elem, List1) -&gt; List2<br>List1是由很多Element组成的，这个函数的功能是在List1中寻找第一个和Elem元素一样的，<br>然后删除之，返回删除后新的列表。</p>\n<p>例子</p>\n<p>lists:delete({name,”zhangsan”},[{name,”lisi”},{name,”zhangsan”},{name,”wangmazi”})).</p>\n<p>结果</p>\n<p>[{name,”lisi”},{name,”wangmazi”}]</p>\n<p>5，duplicate(N, Elem) -&gt; List<br>返回一个由N个Elem组成的列表。</p>\n<p>例子</p>\n<p>lists:duplicate(5,”test”).</p>\n<p>结果</p>\n<p>[“test”,”test”,”test”,”test”,”test”]</p>\n<p>6，flatlength(DeepList) -&gt; integer() &gt;= 0<br>我的理解是DeepList就是列表里面套列表<br>计算列表的长度，即用flatten函数将DeepList转化成List后元素的个数<br>这个函数和length()的区别就是：<br>length函数是得到列表元素的个数，<br>而flatlength函数是先将DeepList转化成List后的个数<br>譬如说List = [1,2,[3,4]]这个列表用<br>length(List)求的值是：3<br>lists:flatlength(List)求的值是：4<br>其实lists:flatlength(List) = length(flatten(List))</p>\n<p>7，flatten(DeepList) -&gt; List<br>将DeepList变成只有term()的list<br>例子：<br>lists:flatten([[a,a],[b,b],[c,c]]).<br>结果：<br>[a,a,b,b,c,c]</p>\n<p>8，flatten(DeepList, Tail) -&gt; List<br>就是将DeepList变成只有term的List后，在后面再加一个Tail。<br>例子：<br>lists:flatten([[a,a],[b,b],[c,c]],[dd]).<br>结果：<br>[a,a,b,b,c,c,dd]</p>\n<p>9,keydelete(Key, N, TupleList1) -&gt; TupleList2<br>这个函数适合处理列表里面的元素是元组的情况<br>删除TupleList1中元素第N个元素和Key一致的元素，只删除第一个一样的，后面一样的不删除<br>例子：<br>List = [{name,”zhangjing”},{sex,”male”},{name,”zhangsan”},{sex,”male”}],<br>lists:keydelete(“male”,2,List)<br>结果：<br>[{name,”zhangjing”},{name,”zhangsan”},{sex,”male”}]</p>\n<p>10,keyfind(Key, N, TupleList) -&gt; Tuple | false<br>查找TupleList中的一个Tuple，如果查找到，返回，如果没有查找到，则返回false<br>这个Tuple必须满足第N个元素和key是一样。<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keyfind(“zhangjing”,2,List1)<br>结果：{name,”zhangjing”}</p>\n<p>11，keymember(Key, N, TupleList) -&gt; boolean()<br>如果TupleList中的元素中存在第N个元素和key一致，则返回true，否则返回false<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>lists:keymember(“zhangjing”,2,List1).<br>结果：true</p>\n<p>12，keymerge(N, TupleList1, TupleList2) -&gt; TupleList3<br>将TupleList1和TupleList2进行混合，组成一个TupleList，<br>新组成的TupleList是按照Tuple的第N个元素进行排序的<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}].<br>List2 = [{nick,”zj”},{nick,”zs”}].<br>lists:keymerge(2,List1,List2).<br>结果：<br>[{name,”zhangjing”},<br> {name,”zhangsan”},<br> {nick,”zj”},<br> {nick,”zs”}]</p>\n<p>13，keyreplace(Key, N, TupleList1, NewTuple) -&gt; TupleList2<br>在TupleList1的Tuple中找出第N个元素和Key一致，然后用NewTuple将这个Tuple替换掉，如果没有找到<br>，则返回原来的TupleList1<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}]<br>lists:keyreplace(“zhangjing”,2,List1,{nickname,”netzj”}).<br>结果：<br>[{nickname,”netzj”},{name,”zhangsan”}]</p>\n<p>14，keysearch(Key, N, TupleList) -&gt; {value, Tuple} | false<br>这个函数和keyfind差不多，就是返回值的结构不一样<br>也是在TupleList中找一个Tuple，这个Tuple的第N个元素和Key一样。<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”}]<br>lists:keysearch(“zhangjing”,2,List1).<br>结果：<br>{value,{name,”zhangjing”}}</p>\n<p>15，keysort(N, TupleList1) -&gt; TupleList2<br>对TupleList1中的Tuple按照第N个元素进行排序，然后返回一个新的顺序的TupleList。<br>不过这种排序是固定的。<br>例子：<br>List1 = [{name,”zhangsan”},{name,”zhangjing”}].<br>lists:keysort(2,List1).<br>结果：<br>[{name,”zhangjing”},{name,”zhangsan”}]</p>\n<p>16，keystore(Key, N, TupleList1, NewTuple) -&gt; TupleList2<br>这个函数和keyreplace函数比较像，不同的是，这个keystore在没有找到对应的Tuple时，<br>会将这个NewTuple追加在这个TupleList1的最后。<br>例子：<br>List1 = [{name,”zhangsan”},{name,”zhangjing”}].<br>找到了的情况<br>lists:keystore(“zhangjing”,2,List1,{name,”netzhangjing”}).<br>[{name,”netzhangjing”},{name,”zhangsan”}]<br>没有找到的情况<br>lists:keystore(“zhanging”,2,List1,{name,”netzhangjing”}).<br>[{name,”zhangjing”},{name,”zhangsan”},{name,”netzhangjing”}]</p>\n<p>17，keytake(Key, N, TupleList1) -&gt; {value, Tuple, TupleList2} | false<br>在TupleList1中找Tuple，这个Tuple的第N个元素和Key一致，如果找到了这么一个Tuple<br>那么返回，{value, Tuple, TupleList2} 其中TupleList2是去掉Tuple的TupleList1.<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”},{name,”lisi”}].<br>lists:keytake(“zhangjing”,2,List1).<br>结果：<br>{value,{name,”zhangjing”},[{name,”zhangsan”},{name,”lisi”}]}</p>\n<p>18，last(List) -&gt; Last<br>返回：List最后一个元素<br>例子：<br>List1 = [{name,”zhangjing”},{name,”zhangsan”},{name,”lisi”}].<br>lists:last(List1).<br>结果：<br>{name,”lisi”}</p>\n<p>19，max(List) -&gt; Max<br>取出List中最大的元素，一般List是整型时比较适合。<br>例子：<br>lists:max([1,10,15,6]).<br>结果：<br>15</p>\n<p>20，member(Elem, List) -&gt; boolean()<br>如果Elem和List中的某个元素匹配（相同），那么返回true，否则返回false<br>例子<br>lists:member({sex,”1”},[{sex,”1”},{sex,”2”},{sex,”3”}]).<br>结果：<br>true</p>\n<p>21，merge(ListOfLists) -&gt; List1<br>ListOfLists是一个列表，里面由子列表构成<br>这个函数的功能就是将这些子列表合并成一个列表。<br>例子：<br>lists:merge([[{11}],[{22}],[{33}]]).<br>结果<br>[{11},{22},{33}]</p>\n<p>22，merge(List1, List2) -&gt; List3<br>List1和List2分别是一个列表，这个函数的功能是将这两个列表合并成一个列表。<br>例子：<br>lists:merge([11],[22]).<br>结果<br>[11,22]<br>[2,1,3,4]</p>\n<p>23, merge3(List1, List2, List3) -&gt; List4<br>将List1，List2，List3合并成一个列表<br>例子<br>lists:merge3([11],[22],[33,44]).<br>结果：<br>[11,22,33,44]</p>\n<p>24，min(List) -&gt; Min<br>返回List中的最小的元素，和max函数对应<br>例子<br>lists:min([1,2,3]).<br>结果<br>1</p>\n<p>25，nth(N, List) -&gt; Elem<br>返回List中的第N个元素。<br>例子<br>lists:nth(2,[{name,”zhangsan”},{name,”lisi”},{name,”wangmazi”}]).<br>结果<br>{name,”lisi”}</p>\n<p>26，nthtail(N, List) -&gt; Tail<br>返回List列表中第N个元素后面的元素<br>例子<br>lists:nthtail(3, [a, b, c, d, e]).<br>结果<br>[d,e]</p>\n<p>27，prefix(List1, List2) -&gt; boolean()<br>如果List1是List2的前缀(也就是说List1和List2前部分相同)，那么返回true，否则返回false</p>\n<p>28，reverse(List1) -&gt; List2<br>将List1反转<br>例子<br>lists:reverse([1,2,3,4]).<br>结果<br>[4,3,2,1]</p>\n<p>29,reverse(List1, Tail) -&gt; List2<br>将List1反转，然后将Tail接在反转List1的后面，然后返回<br>例子<br>lists:reverse([1, 2, 3, 4], [a, b, c]).<br>[4,3,2,1,a,b,c]</p>\n<p>30，seq(From, To) -&gt; Seq<br>其中From和To都是整型，这个函数返回一个从From到To的一个整型列表。<br>例子<br>lists:seq(1,10).<br>结果<br>[1,2,3,4,5,6,7,8,9,10]</p>\n<p>31，seq(From, To, Incr) -&gt; Seq<br>返回一个整型列表，这个列表的后一个元素比前一个元素大Incr。<br>例子<br>lists:seq(1,10,4).<br>[1,5,9]</p>\n<p>32，sort(List1) -&gt; List2<br>将List1中的元素从小到大排序，然后返回新的一个列表。<br>例子<br>lists:sort([3,2,1]).<br>结果<br>[1,2,3]</p>\n<p>33，split(N, List1) -&gt; {List2, List3}<br>将List1分成List2和List3<br>其中List2包括List1的前N个元素，List3包含剩余的。<br>例子<br>lists:split(3,[1,2,3,4,5]).<br>结果<br>{[1,2,3],[4,5]}</p>\n<p>这个函数和partition数有区别，partition是遍历全部的List，而splitwith在遍历时遇到false的情况<br>则马上结束遍历，返回结果。</p>\n<p>34，sublist(List1, Len) -&gt; List2<br>返回从第一个元素到第Len个元素的列表，这个Len大于List1的长度时，返回全部。<br>例子<br>lists:sublist([1,2,3,4,5,6],3).<br>结果<br>[1,2,3]</p>\n<p>35，sublist(List1, Start, Len) -&gt; List2<br>返回从List1的第Start个位置开始，后面Len个元素的列表。<br>例子<br>lists:sublist([1,2,3,4], 2, 2).<br>结果<br>[2,3]</p>\n<p>36，subtract(List1, List2) -&gt; List3<br>等同于 List1 – List2<br>这个函数功能是返回一个List1的副本，对于List2中的每个元素，第一次在List1副本中出现时被删掉。<br>例子<br>lists:subtract(“112233”,”12”).<br>结果<br>“1233”</p>\n<p>37，suffix(List1, List2) -&gt; boolean()<br>如果List1是List2的后缀，那么返回true，否则返回false<br>例子<br>lists:suffix(“22”,”1122”).<br>结果<br>true</p>\n<p>38，sum(List) -&gt; number()<br>返回List中每个元素的和。其中List中的元素都应该是number()类型的。<br>例子<br>lists:sum([1,2,3,4]).<br>结果<br>10</p>\n<p>39，ukeymerge(N, TupleList1, TupleList2) -&gt; TupleList3<br>TupleList1和TupleList2里面的元素都是元组<br>将TupleList1和TupleList2合并，合并的规则是按照元组的第N个元素，如果第N个元素有相同的，那么保留TupleList1中<br>的，删除TupleList2中的。</p>\n<p>40，ukeysort(N, TupleList1) -&gt; TupleList2<br>TupleList1里面的元素都是元组<br>这个函数也同样返回一个元素是元组的列表，返回的这个列表是按照元组的第N个元素来排序的，如果元组中有出现<br>第N个元素相同的情况，删除掉后面的一个元组。<br>例子<br>lists:ukeysort(1,[{name,”zhangsan”},{sex,”male”},{name,”himan”}]).<br>结果<br>[{name,”zhangsan”},{sex,”male”}]</p>\n<p>41，umerge(ListOfLists) -&gt; List1<br>这个函数和merge唯一不同的就是，里面不能出现相同的元素，如果出现相同的，那么删除之，只保留一个唯一的<br>例子<br>lists:umerge([[1,2],[2,3]]).<br>结果<br>[1,2,3]<br>分析：由于[[1,2],[2,3]]中merge后是[1,2,2,3],这个时候有两个相同的元素2，所以只保存一个2，所以结果是[1,2,3].</p>\n<p>42，umerge3(List1, List2, List3) -&gt; List4<br>将List1, List2, List3合并<br>和merge3不同的是返回的List4中不能出现重复的元素<br>例子<br>lists:merge3([1,2],[2,3],[3,4]).<br>结果<br>[1,2,3,4]</p>\n<p>43，unzip(List1) -&gt; {List2, List3}<br>List1里面的元素是元组，每个元组由两个元素组成，返回值List2包含每个List1中每个元组的第一个元素<br>返回值List3包含每个List1中每个元组的第二个元素。<br>例子<br>lists:unzip([{name,”zhangsan”},{sex,”male”},{city,”hangzhou”}]).<br>结果<br>{[name,sex,city],[“zhangsan”,”male”,”hangzhou”]}</p>\n<p>44，unzip3(List1) -&gt; {List2, List3, List4}<br>List1里面的元素是元组，每个元组由三个元素组成，返回值List2包含每个List1中每个元组的第一个元素；<br>返回值List3包含每个List1中每个元组的第二个元素；返回值List4包含每个List1中每个元组的第三个元素。<br>例子<br>lists:unzip3([{name,”zhangsan”,”apple”},{sex,”male”,”banana”},{city,”hangzhou”,”orange”}]).<br>结果<br>{[name,sex,city],<br> [“zhangsan”,”male”,”hangzhou”],<br> [“apple”,”banana”,”orange”]}<br>注意，最终返回的是一个元组。</p>\n<p>45，usort(List1) -&gt; List2<br>将List1按照从小到大的顺序排序，如果排序后有重复的元素，删除重复的，只保存一个唯一的。<br>例子<br>lists:usort([4,3,2,1,2,3,4]).<br>结果<br>[1,2,3,4]</p>\n<p>46，zip(List1, List2) -&gt; List3<br>将两个长度相同的列表合并成一个列表<br>List3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的<br>例子<br>lists:zip([name,sex,city],[“zhangsan”,”male”,”hangzhou”]).<br>结果<br>[{name,”zhangsan”},{sex,”male”},{city,”hangzhou”}]<br>注意，如果List1和List2长度不一致，那么这个函数将会报错。</p>\n<p>47，zip3(List1, List2, List3) -&gt; List4<br>将三个长度相同的列表合并成一个列表<br>List3是里面的每一个元组的第一个元素是从List1获取的，而每个元组的第二个元素是从List2中获取的<br>每个元组的第三个元素是从List3中获取的。<br>例子<br>lists:zip3([name,sex,city],[“zhangsan”,”male”,”hangzhou”],[“nick”,”1”,”zhejiang”]).<br>结果<br>[{name,”zhangsan”,”nick”},<br> {sex,”male”,”1”},<br> {city,”hangzhou”,”zhejiang”}]</p>"},{"title":"pomelo学习笔记","date":"2018-10-23T11:34:45.000Z","_content":"\n环境\n``` bash\ngetBase()\t Application.getBase(); 获取应用程序的基本路径\nset(setting, val, attach);\t Application.set();  setting:应用程序的配置；val:需要设置的值；attach:是否将设配置应用到程序。设置或返回配置的值。\nget(setting)\t Application.get(); setting:应用程序的配置。获取配置的值\nenabled(setting)\t Application.enabled(); setting:应用程序的配置。检查配置是否启用\ndisabled(setting)\t Application.disabled(); setting:应用程序的配置。检查配置是否禁用\nenbale(setting)\t Application.enbale(); setting:应用程序的配置。启用配置\ndisable(setting)\t Application.disabled(); setting:应用程序的配置。禁用配置\nconfigure(env,fn,type)\tApplication.configure();env:应用环境;fn:回调函数;type:服务类型.\n```\n初始化\n\n``` bash\nstart()\t Application.start(); 启动应用程序。它会加载默认的组件和启动所有加载的组件。\nregisterAdmin(moduleId,module,opts)\t Application.registerAdmin();  moduleId:(可选参数)模块id或者有modeule提供的模块Id;module:模块对象或者模块的工程函数;opts:模块构造函数的参数。\nfilter(filter)\t Application.filter(); filter:provide before and after filter method。add a filter to before and after filter\nbefore(bf)\t Application.before(); bf:before filter。Add before filter\nafter(af)\t Application.after(); af:after filter。Add after filter\nload(name, component, opts)\t Application.load(); name:组件的名称（可选）；component：组件的实例或者组件的工厂函数；opts：组件构造函数的参数（可选）。加载组件\nloadConfig(key,val)\t Application.loadConfig(); key:环境配置的关键字;val:环境配置的值。导入json文件来配置环境。\n```\n<!-- more -->\n组件相关\n\n``` bash\nroute(serverType, routeFunc)\t\n Application.route(); serverType:服务类型;routeFunc:路由功能函数,如：routeFunc(session, msg, app, cb)\n\n未指定的服务类型设置路由功能。如：\n\napp.route('area', routeFunc);\n\nvar routeFunc = function(session, msg, app, cb) {\n\n　　// all request to area would be route to the first area server\n\n　　var areas = app.getServersByType('area');\n\n　　cb(null, areas[0].id);\n\n}\n```\n获取相关配置，组件方法\n\n``` bash\ngetMaster()\tApplication.getMaster() 获得Maseter服务的信息\ngetCurServer()\tApplication.getCurServer() 获得当前服务的信息\ngetServerId()\tApplication.getServerId() 获得当前服务的ID\ngetServerType()\tApplication.getServerType() 获得当前服务的类型\ngetServers()\tApplication.getServers() 获得所有当前服务的信息\ngetServersFromConfig()\tApplication.getServersFromConfig() 从server.json中获得所有服务的信息\ngetServerTypes()\tApplication.getServerTypes() 获得所有服务的类型\ngetServerById(serverId)\tApplication.getServerById() 根据服务ID从服务集群中获得服务的信息\ngetServerFromConfig(serverId)\tApplication.getServerFromConfig() 根据服务ID从server.json中获得服务的信息\ngetServersByType(serverType)\tApplication.getServersByType() 根据服务类型获取服务信息\nisFrontend(server)\tApplication.isFrontend() 检查服务是否是一个前端服务\nisBackend(server)\tApplication.isBackend() 检查服务是否是一个后端服务\nisMaster()\tApplication.isMaster() 检查当前服务是否是主服务\naddServers(servers)\tApplication.addServers() servers：新服务信息列表。添加新服务信息到正在运行的应用程序中\nremoverServers(ids)\tApplication.removerServers() ids：服务id列表。从当前运行的应用程序中删除服务信息。\n```\n创建和维护本地服务的信道。\n\n``` bash\ncreateChannel(name)\tChannelService.prototype.createChannel() 根据信道名称创建信道，如果该信道已存在则返回已存在的信道\ngetChannel(name,create)\tChannelService.prototype.getChannel() name:信道名称，create:如果为true，并且信道不存在时，则创建新的信道。根据信道名称获取信道\ndestroyChannel(name)\tChannelService.prototype.destroyChannel() 根据信道名称，删除信道\npushMessageByUids(route, msg, uids, cb)\tChannelService.prototype.pushMessageByUids() route：消息路由；msg：发送到客户端的消息；uids：接收消息的客户端列表，格式 [{uid: userId, sid: frontendServerId}]；cb：回调函数 cb(err)。根据uids将消息推送给客户端，如果uids中的sid未指定，则忽略相应的客户端\nbroadcast(stype,route, msg, opts, cb)\tChannelService.prototype.broadcast() stype：前端服务的类型;route：路由;msg：消息;opts：广播参数;cb：回调函数。广播消息到所有连接的客户端。\n```\nChannel\n\n``` bash\nadd(uid,sid)\tChannel.prototype.add() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。\nleave(uid,sid)\tChannel.prototype.leave() uid:用户编号；sid：用户连接到的前端服务id。从信道中移除用户。\ngetMembers()\tChannel.prototype.getMembers() 获得信道中的成员\ngetMember(uid)\tChannel.prototype.getMember() 根据uid获取成员信息\ndestroy()\tChannel.prototype.destroy() 销毁信道\npushMessage(route,msg,cb)\tChannel.prototype.pushMessage()  route：消息路由，msg：要推送的消息，cb：回调函数。将消息推送给信道的所有成员。\n```\nGlobalChannelService\n\n``` bash\ndestroyChannel(name,cb)\tGlobalChannelService.prototype.destroyChannel() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。\nadd(name,uid,sid,cb)\t\nGlobalChannelService.prototype.add() name:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。\n\n添加成员到信道。\n\nleave(name,uid,sid,cb)\tGlobalChannelService.prototype.leave() \nname:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。\n\n从信道中移除成员。\n\npushMessage()\t\nGlobalChannelService.prototype.pushMessage(serverType, route, msg,channelName, opts, cb)\n\nserverType：前端服务的类型, route：路由, msg：需要推送的消息,channelName：信道名称, opts：参数, cb：回调函数\n\n通过全局信道发送消息\n```\nLocalSessionService\n\n``` bash\nget(frontendId,sid,cb)\tLocalSeesionService.prototype.get() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据前端服务和会话id获得本地会话\ngetByUid(name,uid,sid,cb)\t\nLocalSeesionService.prototype.getByUid()  frontendId:会话链接的前端服务id,uid：绑定到会话的用户id，cb：回调函数。args: cb(err, localSessions)。根据前端服务和用户id获取本地会话。\n\nkickBySid(name,uid,sid,cb)\tLocalSeesionService.prototype.kickBySid() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据会话id踢掉该会话。\nkickByUid()\t\nLocalSeesionService.prototype.kickByUid() frontendId:会话链接的前端服务id,uid：用户id,cb:回调函数。根据用户id踢掉该会话。\n```\nLocalSession\n\n``` bash\nbind(uid,cb)\tLocalSeesion.prototype.bind() uid:用户编号;cb:回调函数。callfunction(err)。绑定当前会话，用于前端服务的推送和全局会话的绑定。\nunbind(uid,cb)\t\nLocalSeesion.prototype.unbind() uid:用户编号;cb:回调函数。callfunction(err)。取消绑定。\n\nset(key,value)\tLocalSeesion.prototype.set() 将key/value添加到本地会话中\nget(key)\t\nLocalSeesion.prototype.get() 根据key从本地会话中获取值。\n\npush(key,cb)\t\nLocalSeesion.prototype.push() 将本地会话中的key/value添加到全局会话中\n\npushAll(cb)\tLocalSeesion.prototype.pushAll() 将本地会话中的所有key/value添加到全会话中\n```\nSessionService\n\n``` bash\nkick(uid,cb)\tSeesionService.prototype.kick() 踢掉该用户的所有离线会话\nkickBySession(sid,cb)\t\nSeesionService.prototype.kickBySession() sid:会话编号;cb:回调函数。根据会话id踢掉一个在线用户\n\nsendMessage(sid,msg)\tSeesionService.prototype.sendMessage()根据会话id向客户端发送消息\nsendMessageByUid(uid,msg)\t\nSeesionService.prototype.sendMessageByUid() 根据用户id向客户端发送消息\n```\nPomelo\n\n``` bash\ncreateApp(opts)\tPomelo.create() 创建一个Pomelo 应用程序\n\n\n\n","source":"_posts/pomelo学习笔记.md","raw":"---\ntitle: pomelo学习笔记\ndate: 2018-10-23 19:34:45\ncategories: \"服务端框架\"\ntags:\n\t- node.js\n---\n\n环境\n``` bash\ngetBase()\t Application.getBase(); 获取应用程序的基本路径\nset(setting, val, attach);\t Application.set();  setting:应用程序的配置；val:需要设置的值；attach:是否将设配置应用到程序。设置或返回配置的值。\nget(setting)\t Application.get(); setting:应用程序的配置。获取配置的值\nenabled(setting)\t Application.enabled(); setting:应用程序的配置。检查配置是否启用\ndisabled(setting)\t Application.disabled(); setting:应用程序的配置。检查配置是否禁用\nenbale(setting)\t Application.enbale(); setting:应用程序的配置。启用配置\ndisable(setting)\t Application.disabled(); setting:应用程序的配置。禁用配置\nconfigure(env,fn,type)\tApplication.configure();env:应用环境;fn:回调函数;type:服务类型.\n```\n初始化\n\n``` bash\nstart()\t Application.start(); 启动应用程序。它会加载默认的组件和启动所有加载的组件。\nregisterAdmin(moduleId,module,opts)\t Application.registerAdmin();  moduleId:(可选参数)模块id或者有modeule提供的模块Id;module:模块对象或者模块的工程函数;opts:模块构造函数的参数。\nfilter(filter)\t Application.filter(); filter:provide before and after filter method。add a filter to before and after filter\nbefore(bf)\t Application.before(); bf:before filter。Add before filter\nafter(af)\t Application.after(); af:after filter。Add after filter\nload(name, component, opts)\t Application.load(); name:组件的名称（可选）；component：组件的实例或者组件的工厂函数；opts：组件构造函数的参数（可选）。加载组件\nloadConfig(key,val)\t Application.loadConfig(); key:环境配置的关键字;val:环境配置的值。导入json文件来配置环境。\n```\n<!-- more -->\n组件相关\n\n``` bash\nroute(serverType, routeFunc)\t\n Application.route(); serverType:服务类型;routeFunc:路由功能函数,如：routeFunc(session, msg, app, cb)\n\n未指定的服务类型设置路由功能。如：\n\napp.route('area', routeFunc);\n\nvar routeFunc = function(session, msg, app, cb) {\n\n　　// all request to area would be route to the first area server\n\n　　var areas = app.getServersByType('area');\n\n　　cb(null, areas[0].id);\n\n}\n```\n获取相关配置，组件方法\n\n``` bash\ngetMaster()\tApplication.getMaster() 获得Maseter服务的信息\ngetCurServer()\tApplication.getCurServer() 获得当前服务的信息\ngetServerId()\tApplication.getServerId() 获得当前服务的ID\ngetServerType()\tApplication.getServerType() 获得当前服务的类型\ngetServers()\tApplication.getServers() 获得所有当前服务的信息\ngetServersFromConfig()\tApplication.getServersFromConfig() 从server.json中获得所有服务的信息\ngetServerTypes()\tApplication.getServerTypes() 获得所有服务的类型\ngetServerById(serverId)\tApplication.getServerById() 根据服务ID从服务集群中获得服务的信息\ngetServerFromConfig(serverId)\tApplication.getServerFromConfig() 根据服务ID从server.json中获得服务的信息\ngetServersByType(serverType)\tApplication.getServersByType() 根据服务类型获取服务信息\nisFrontend(server)\tApplication.isFrontend() 检查服务是否是一个前端服务\nisBackend(server)\tApplication.isBackend() 检查服务是否是一个后端服务\nisMaster()\tApplication.isMaster() 检查当前服务是否是主服务\naddServers(servers)\tApplication.addServers() servers：新服务信息列表。添加新服务信息到正在运行的应用程序中\nremoverServers(ids)\tApplication.removerServers() ids：服务id列表。从当前运行的应用程序中删除服务信息。\n```\n创建和维护本地服务的信道。\n\n``` bash\ncreateChannel(name)\tChannelService.prototype.createChannel() 根据信道名称创建信道，如果该信道已存在则返回已存在的信道\ngetChannel(name,create)\tChannelService.prototype.getChannel() name:信道名称，create:如果为true，并且信道不存在时，则创建新的信道。根据信道名称获取信道\ndestroyChannel(name)\tChannelService.prototype.destroyChannel() 根据信道名称，删除信道\npushMessageByUids(route, msg, uids, cb)\tChannelService.prototype.pushMessageByUids() route：消息路由；msg：发送到客户端的消息；uids：接收消息的客户端列表，格式 [{uid: userId, sid: frontendServerId}]；cb：回调函数 cb(err)。根据uids将消息推送给客户端，如果uids中的sid未指定，则忽略相应的客户端\nbroadcast(stype,route, msg, opts, cb)\tChannelService.prototype.broadcast() stype：前端服务的类型;route：路由;msg：消息;opts：广播参数;cb：回调函数。广播消息到所有连接的客户端。\n```\nChannel\n\n``` bash\nadd(uid,sid)\tChannel.prototype.add() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。\nleave(uid,sid)\tChannel.prototype.leave() uid:用户编号；sid：用户连接到的前端服务id。从信道中移除用户。\ngetMembers()\tChannel.prototype.getMembers() 获得信道中的成员\ngetMember(uid)\tChannel.prototype.getMember() 根据uid获取成员信息\ndestroy()\tChannel.prototype.destroy() 销毁信道\npushMessage(route,msg,cb)\tChannel.prototype.pushMessage()  route：消息路由，msg：要推送的消息，cb：回调函数。将消息推送给信道的所有成员。\n```\nGlobalChannelService\n\n``` bash\ndestroyChannel(name,cb)\tGlobalChannelService.prototype.destroyChannel() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。\nadd(name,uid,sid,cb)\t\nGlobalChannelService.prototype.add() name:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。\n\n添加成员到信道。\n\nleave(name,uid,sid,cb)\tGlobalChannelService.prototype.leave() \nname:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。\n\n从信道中移除成员。\n\npushMessage()\t\nGlobalChannelService.prototype.pushMessage(serverType, route, msg,channelName, opts, cb)\n\nserverType：前端服务的类型, route：路由, msg：需要推送的消息,channelName：信道名称, opts：参数, cb：回调函数\n\n通过全局信道发送消息\n```\nLocalSessionService\n\n``` bash\nget(frontendId,sid,cb)\tLocalSeesionService.prototype.get() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据前端服务和会话id获得本地会话\ngetByUid(name,uid,sid,cb)\t\nLocalSeesionService.prototype.getByUid()  frontendId:会话链接的前端服务id,uid：绑定到会话的用户id，cb：回调函数。args: cb(err, localSessions)。根据前端服务和用户id获取本地会话。\n\nkickBySid(name,uid,sid,cb)\tLocalSeesionService.prototype.kickBySid() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据会话id踢掉该会话。\nkickByUid()\t\nLocalSeesionService.prototype.kickByUid() frontendId:会话链接的前端服务id,uid：用户id,cb:回调函数。根据用户id踢掉该会话。\n```\nLocalSession\n\n``` bash\nbind(uid,cb)\tLocalSeesion.prototype.bind() uid:用户编号;cb:回调函数。callfunction(err)。绑定当前会话，用于前端服务的推送和全局会话的绑定。\nunbind(uid,cb)\t\nLocalSeesion.prototype.unbind() uid:用户编号;cb:回调函数。callfunction(err)。取消绑定。\n\nset(key,value)\tLocalSeesion.prototype.set() 将key/value添加到本地会话中\nget(key)\t\nLocalSeesion.prototype.get() 根据key从本地会话中获取值。\n\npush(key,cb)\t\nLocalSeesion.prototype.push() 将本地会话中的key/value添加到全局会话中\n\npushAll(cb)\tLocalSeesion.prototype.pushAll() 将本地会话中的所有key/value添加到全会话中\n```\nSessionService\n\n``` bash\nkick(uid,cb)\tSeesionService.prototype.kick() 踢掉该用户的所有离线会话\nkickBySession(sid,cb)\t\nSeesionService.prototype.kickBySession() sid:会话编号;cb:回调函数。根据会话id踢掉一个在线用户\n\nsendMessage(sid,msg)\tSeesionService.prototype.sendMessage()根据会话id向客户端发送消息\nsendMessageByUid(uid,msg)\t\nSeesionService.prototype.sendMessageByUid() 根据用户id向客户端发送消息\n```\nPomelo\n\n``` bash\ncreateApp(opts)\tPomelo.create() 创建一个Pomelo 应用程序\n\n\n\n","slug":"pomelo学习笔记","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91c000k1d8n2yec7nue","content":"<p>环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getBase()\t Application.getBase(); 获取应用程序的基本路径</span><br><span class=\"line\"><span class=\"built_in\">set</span>(setting, val, attach);\t Application.set();  setting:应用程序的配置；val:需要设置的值；attach:是否将设配置应用到程序。设置或返回配置的值。</span><br><span class=\"line\">get(setting)\t Application.get(); setting:应用程序的配置。获取配置的值</span><br><span class=\"line\">enabled(setting)\t Application.enabled(); setting:应用程序的配置。检查配置是否启用</span><br><span class=\"line\">disabled(setting)\t Application.disabled(); setting:应用程序的配置。检查配置是否禁用</span><br><span class=\"line\">enbale(setting)\t Application.enbale(); setting:应用程序的配置。启用配置</span><br><span class=\"line\"><span class=\"built_in\">disable</span>(setting)\t Application.disabled(); setting:应用程序的配置。禁用配置</span><br><span class=\"line\">configure(env,fn,<span class=\"built_in\">type</span>)\tApplication.configure();env:应用环境;fn:回调函数;<span class=\"built_in\">type</span>:服务类型.</span><br></pre></td></tr></table></figure></p>\n<p>初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start()\t Application.start(); 启动应用程序。它会加载默认的组件和启动所有加载的组件。</span><br><span class=\"line\">registerAdmin(moduleId,module,opts)\t Application.registerAdmin();  moduleId:(可选参数)模块id或者有modeule提供的模块Id;module:模块对象或者模块的工程函数;opts:模块构造函数的参数。</span><br><span class=\"line\">filter(filter)\t Application.filter(); filter:provide before and after filter method。add a filter to before and after filter</span><br><span class=\"line\">before(bf)\t Application.before(); bf:before filter。Add before filter</span><br><span class=\"line\">after(af)\t Application.after(); af:after filter。Add after filter</span><br><span class=\"line\">load(name, component, opts)\t Application.load(); name:组件的名称（可选）；component：组件的实例或者组件的工厂函数；opts：组件构造函数的参数（可选）。加载组件</span><br><span class=\"line\">loadConfig(key,val)\t Application.loadConfig(); key:环境配置的关键字;val:环境配置的值。导入json文件来配置环境。</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>组件相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route(serverType, routeFunc)\t</span><br><span class=\"line\"> Application.route(); serverType:服务类型;routeFunc:路由功能函数,如：routeFunc(session, msg, app, cb)</span><br><span class=\"line\"></span><br><span class=\"line\">未指定的服务类型设置路由功能。如：</span><br><span class=\"line\"></span><br><span class=\"line\">app.route(<span class=\"string\">'area'</span>, routeFunc);</span><br><span class=\"line\"></span><br><span class=\"line\">var routeFunc = <span class=\"keyword\">function</span>(session, msg, app, cb) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　// all request to area would be route to the first area server</span><br><span class=\"line\"></span><br><span class=\"line\">　　var areas = app.getServersByType(<span class=\"string\">'area'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　　cb(null, areas[0].id);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取相关配置，组件方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMaster()\tApplication.getMaster() 获得Maseter服务的信息</span><br><span class=\"line\">getCurServer()\tApplication.getCurServer() 获得当前服务的信息</span><br><span class=\"line\">getServerId()\tApplication.getServerId() 获得当前服务的ID</span><br><span class=\"line\">getServerType()\tApplication.getServerType() 获得当前服务的类型</span><br><span class=\"line\">getServers()\tApplication.getServers() 获得所有当前服务的信息</span><br><span class=\"line\">getServersFromConfig()\tApplication.getServersFromConfig() 从server.json中获得所有服务的信息</span><br><span class=\"line\">getServerTypes()\tApplication.getServerTypes() 获得所有服务的类型</span><br><span class=\"line\">getServerById(serverId)\tApplication.getServerById() 根据服务ID从服务集群中获得服务的信息</span><br><span class=\"line\">getServerFromConfig(serverId)\tApplication.getServerFromConfig() 根据服务ID从server.json中获得服务的信息</span><br><span class=\"line\">getServersByType(serverType)\tApplication.getServersByType() 根据服务类型获取服务信息</span><br><span class=\"line\">isFrontend(server)\tApplication.isFrontend() 检查服务是否是一个前端服务</span><br><span class=\"line\">isBackend(server)\tApplication.isBackend() 检查服务是否是一个后端服务</span><br><span class=\"line\">isMaster()\tApplication.isMaster() 检查当前服务是否是主服务</span><br><span class=\"line\">addServers(servers)\tApplication.addServers() servers：新服务信息列表。添加新服务信息到正在运行的应用程序中</span><br><span class=\"line\">removerServers(ids)\tApplication.removerServers() ids：服务id列表。从当前运行的应用程序中删除服务信息。</span><br></pre></td></tr></table></figure>\n<p>创建和维护本地服务的信道。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createChannel(name)\tChannelService.prototype.createChannel() 根据信道名称创建信道，如果该信道已存在则返回已存在的信道</span><br><span class=\"line\">getChannel(name,create)\tChannelService.prototype.getChannel() name:信道名称，create:如果为<span class=\"literal\">true</span>，并且信道不存在时，则创建新的信道。根据信道名称获取信道</span><br><span class=\"line\">destroyChannel(name)\tChannelService.prototype.destroyChannel() 根据信道名称，删除信道</span><br><span class=\"line\">pushMessageByUids(route, msg, uids, cb)\tChannelService.prototype.pushMessageByUids() route：消息路由；msg：发送到客户端的消息；uids：接收消息的客户端列表，格式 [&#123;uid: userId, sid: frontendServerId&#125;]；cb：回调函数 cb(err)。根据uids将消息推送给客户端，如果uids中的sid未指定，则忽略相应的客户端</span><br><span class=\"line\">broadcast(stype,route, msg, opts, cb)\tChannelService.prototype.broadcast() stype：前端服务的类型;route：路由;msg：消息;opts：广播参数;cb：回调函数。广播消息到所有连接的客户端。</span><br></pre></td></tr></table></figure>\n<p>Channel</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(uid,sid)\tChannel.prototype.add() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。</span><br><span class=\"line\">leave(uid,sid)\tChannel.prototype.leave() uid:用户编号；sid：用户连接到的前端服务id。从信道中移除用户。</span><br><span class=\"line\">getMembers()\tChannel.prototype.getMembers() 获得信道中的成员</span><br><span class=\"line\">getMember(uid)\tChannel.prototype.getMember() 根据uid获取成员信息</span><br><span class=\"line\">destroy()\tChannel.prototype.destroy() 销毁信道</span><br><span class=\"line\">pushMessage(route,msg,cb)\tChannel.prototype.pushMessage()  route：消息路由，msg：要推送的消息，cb：回调函数。将消息推送给信道的所有成员。</span><br></pre></td></tr></table></figure>\n<p>GlobalChannelService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">destroyChannel(name,cb)\tGlobalChannelService.prototype.destroyChannel() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。</span><br><span class=\"line\">add(name,uid,sid,cb)\t</span><br><span class=\"line\">GlobalChannelService.prototype.add() name:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。</span><br><span class=\"line\"></span><br><span class=\"line\">添加成员到信道。</span><br><span class=\"line\"></span><br><span class=\"line\">leave(name,uid,sid,cb)\tGlobalChannelService.prototype.leave() </span><br><span class=\"line\">name:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。</span><br><span class=\"line\"></span><br><span class=\"line\">从信道中移除成员。</span><br><span class=\"line\"></span><br><span class=\"line\">pushMessage()\t</span><br><span class=\"line\">GlobalChannelService.prototype.pushMessage(serverType, route, msg,channelName, opts, cb)</span><br><span class=\"line\"></span><br><span class=\"line\">serverType：前端服务的类型, route：路由, msg：需要推送的消息,channelName：信道名称, opts：参数, cb：回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">通过全局信道发送消息</span><br></pre></td></tr></table></figure>\n<p>LocalSessionService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get(frontendId,sid,cb)\tLocalSeesionService.prototype.get() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据前端服务和会话id获得本地会话</span><br><span class=\"line\">getByUid(name,uid,sid,cb)\t</span><br><span class=\"line\">LocalSeesionService.prototype.getByUid()  frontendId:会话链接的前端服务id,uid：绑定到会话的用户id，cb：回调函数。args: cb(err, localSessions)。根据前端服务和用户id获取本地会话。</span><br><span class=\"line\"></span><br><span class=\"line\">kickBySid(name,uid,sid,cb)\tLocalSeesionService.prototype.kickBySid() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据会话id踢掉该会话。</span><br><span class=\"line\">kickByUid()\t</span><br><span class=\"line\">LocalSeesionService.prototype.kickByUid() frontendId:会话链接的前端服务id,uid：用户id,cb:回调函数。根据用户id踢掉该会话。</span><br></pre></td></tr></table></figure>\n<p>LocalSession</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span>(uid,cb)\tLocalSeesion.prototype.bind() uid:用户编号;cb:回调函数。callfunction(err)。绑定当前会话，用于前端服务的推送和全局会话的绑定。</span><br><span class=\"line\">unbind(uid,cb)\t</span><br><span class=\"line\">LocalSeesion.prototype.unbind() uid:用户编号;cb:回调函数。callfunction(err)。取消绑定。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>(key,value)\tLocalSeesion.prototype.set() 将key/value添加到本地会话中</span><br><span class=\"line\">get(key)\t</span><br><span class=\"line\">LocalSeesion.prototype.get() 根据key从本地会话中获取值。</span><br><span class=\"line\"></span><br><span class=\"line\">push(key,cb)\t</span><br><span class=\"line\">LocalSeesion.prototype.push() 将本地会话中的key/value添加到全局会话中</span><br><span class=\"line\"></span><br><span class=\"line\">pushAll(cb)\tLocalSeesion.prototype.pushAll() 将本地会话中的所有key/value添加到全会话中</span><br></pre></td></tr></table></figure>\n<p>SessionService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kick(uid,cb)\tSeesionService.prototype.kick() 踢掉该用户的所有离线会话</span><br><span class=\"line\">kickBySession(sid,cb)\t</span><br><span class=\"line\">SeesionService.prototype.kickBySession() sid:会话编号;cb:回调函数。根据会话id踢掉一个在线用户</span><br><span class=\"line\"></span><br><span class=\"line\">sendMessage(sid,msg)\tSeesionService.prototype.sendMessage()根据会话id向客户端发送消息</span><br><span class=\"line\">sendMessageByUid(uid,msg)\t</span><br><span class=\"line\">SeesionService.prototype.sendMessageByUid() 根据用户id向客户端发送消息</span><br></pre></td></tr></table></figure>\n<p>Pomelo</p>\n<p><code>`</code> bash<br>createApp(opts)    Pomelo.create() 创建一个Pomelo 应用程序</p>\n","site":{"data":{}},"excerpt":"<p>环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getBase()\t Application.getBase(); 获取应用程序的基本路径</span><br><span class=\"line\"><span class=\"built_in\">set</span>(setting, val, attach);\t Application.set();  setting:应用程序的配置；val:需要设置的值；attach:是否将设配置应用到程序。设置或返回配置的值。</span><br><span class=\"line\">get(setting)\t Application.get(); setting:应用程序的配置。获取配置的值</span><br><span class=\"line\">enabled(setting)\t Application.enabled(); setting:应用程序的配置。检查配置是否启用</span><br><span class=\"line\">disabled(setting)\t Application.disabled(); setting:应用程序的配置。检查配置是否禁用</span><br><span class=\"line\">enbale(setting)\t Application.enbale(); setting:应用程序的配置。启用配置</span><br><span class=\"line\"><span class=\"built_in\">disable</span>(setting)\t Application.disabled(); setting:应用程序的配置。禁用配置</span><br><span class=\"line\">configure(env,fn,<span class=\"built_in\">type</span>)\tApplication.configure();env:应用环境;fn:回调函数;<span class=\"built_in\">type</span>:服务类型.</span><br></pre></td></tr></table></figure></p>\n<p>初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start()\t Application.start(); 启动应用程序。它会加载默认的组件和启动所有加载的组件。</span><br><span class=\"line\">registerAdmin(moduleId,module,opts)\t Application.registerAdmin();  moduleId:(可选参数)模块id或者有modeule提供的模块Id;module:模块对象或者模块的工程函数;opts:模块构造函数的参数。</span><br><span class=\"line\">filter(filter)\t Application.filter(); filter:provide before and after filter method。add a filter to before and after filter</span><br><span class=\"line\">before(bf)\t Application.before(); bf:before filter。Add before filter</span><br><span class=\"line\">after(af)\t Application.after(); af:after filter。Add after filter</span><br><span class=\"line\">load(name, component, opts)\t Application.load(); name:组件的名称（可选）；component：组件的实例或者组件的工厂函数；opts：组件构造函数的参数（可选）。加载组件</span><br><span class=\"line\">loadConfig(key,val)\t Application.loadConfig(); key:环境配置的关键字;val:环境配置的值。导入json文件来配置环境。</span><br></pre></td></tr></table></figure>","more":"<p>组件相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route(serverType, routeFunc)\t</span><br><span class=\"line\"> Application.route(); serverType:服务类型;routeFunc:路由功能函数,如：routeFunc(session, msg, app, cb)</span><br><span class=\"line\"></span><br><span class=\"line\">未指定的服务类型设置路由功能。如：</span><br><span class=\"line\"></span><br><span class=\"line\">app.route(<span class=\"string\">'area'</span>, routeFunc);</span><br><span class=\"line\"></span><br><span class=\"line\">var routeFunc = <span class=\"keyword\">function</span>(session, msg, app, cb) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　// all request to area would be route to the first area server</span><br><span class=\"line\"></span><br><span class=\"line\">　　var areas = app.getServersByType(<span class=\"string\">'area'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　　cb(null, areas[0].id);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取相关配置，组件方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMaster()\tApplication.getMaster() 获得Maseter服务的信息</span><br><span class=\"line\">getCurServer()\tApplication.getCurServer() 获得当前服务的信息</span><br><span class=\"line\">getServerId()\tApplication.getServerId() 获得当前服务的ID</span><br><span class=\"line\">getServerType()\tApplication.getServerType() 获得当前服务的类型</span><br><span class=\"line\">getServers()\tApplication.getServers() 获得所有当前服务的信息</span><br><span class=\"line\">getServersFromConfig()\tApplication.getServersFromConfig() 从server.json中获得所有服务的信息</span><br><span class=\"line\">getServerTypes()\tApplication.getServerTypes() 获得所有服务的类型</span><br><span class=\"line\">getServerById(serverId)\tApplication.getServerById() 根据服务ID从服务集群中获得服务的信息</span><br><span class=\"line\">getServerFromConfig(serverId)\tApplication.getServerFromConfig() 根据服务ID从server.json中获得服务的信息</span><br><span class=\"line\">getServersByType(serverType)\tApplication.getServersByType() 根据服务类型获取服务信息</span><br><span class=\"line\">isFrontend(server)\tApplication.isFrontend() 检查服务是否是一个前端服务</span><br><span class=\"line\">isBackend(server)\tApplication.isBackend() 检查服务是否是一个后端服务</span><br><span class=\"line\">isMaster()\tApplication.isMaster() 检查当前服务是否是主服务</span><br><span class=\"line\">addServers(servers)\tApplication.addServers() servers：新服务信息列表。添加新服务信息到正在运行的应用程序中</span><br><span class=\"line\">removerServers(ids)\tApplication.removerServers() ids：服务id列表。从当前运行的应用程序中删除服务信息。</span><br></pre></td></tr></table></figure>\n<p>创建和维护本地服务的信道。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createChannel(name)\tChannelService.prototype.createChannel() 根据信道名称创建信道，如果该信道已存在则返回已存在的信道</span><br><span class=\"line\">getChannel(name,create)\tChannelService.prototype.getChannel() name:信道名称，create:如果为<span class=\"literal\">true</span>，并且信道不存在时，则创建新的信道。根据信道名称获取信道</span><br><span class=\"line\">destroyChannel(name)\tChannelService.prototype.destroyChannel() 根据信道名称，删除信道</span><br><span class=\"line\">pushMessageByUids(route, msg, uids, cb)\tChannelService.prototype.pushMessageByUids() route：消息路由；msg：发送到客户端的消息；uids：接收消息的客户端列表，格式 [&#123;uid: userId, sid: frontendServerId&#125;]；cb：回调函数 cb(err)。根据uids将消息推送给客户端，如果uids中的sid未指定，则忽略相应的客户端</span><br><span class=\"line\">broadcast(stype,route, msg, opts, cb)\tChannelService.prototype.broadcast() stype：前端服务的类型;route：路由;msg：消息;opts：广播参数;cb：回调函数。广播消息到所有连接的客户端。</span><br></pre></td></tr></table></figure>\n<p>Channel</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(uid,sid)\tChannel.prototype.add() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。</span><br><span class=\"line\">leave(uid,sid)\tChannel.prototype.leave() uid:用户编号；sid：用户连接到的前端服务id。从信道中移除用户。</span><br><span class=\"line\">getMembers()\tChannel.prototype.getMembers() 获得信道中的成员</span><br><span class=\"line\">getMember(uid)\tChannel.prototype.getMember() 根据uid获取成员信息</span><br><span class=\"line\">destroy()\tChannel.prototype.destroy() 销毁信道</span><br><span class=\"line\">pushMessage(route,msg,cb)\tChannel.prototype.pushMessage()  route：消息路由，msg：要推送的消息，cb：回调函数。将消息推送给信道的所有成员。</span><br></pre></td></tr></table></figure>\n<p>GlobalChannelService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">destroyChannel(name,cb)\tGlobalChannelService.prototype.destroyChannel() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。</span><br><span class=\"line\">add(name,uid,sid,cb)\t</span><br><span class=\"line\">GlobalChannelService.prototype.add() name:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。</span><br><span class=\"line\"></span><br><span class=\"line\">添加成员到信道。</span><br><span class=\"line\"></span><br><span class=\"line\">leave(name,uid,sid,cb)\tGlobalChannelService.prototype.leave() </span><br><span class=\"line\">name:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。</span><br><span class=\"line\"></span><br><span class=\"line\">从信道中移除成员。</span><br><span class=\"line\"></span><br><span class=\"line\">pushMessage()\t</span><br><span class=\"line\">GlobalChannelService.prototype.pushMessage(serverType, route, msg,channelName, opts, cb)</span><br><span class=\"line\"></span><br><span class=\"line\">serverType：前端服务的类型, route：路由, msg：需要推送的消息,channelName：信道名称, opts：参数, cb：回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">通过全局信道发送消息</span><br></pre></td></tr></table></figure>\n<p>LocalSessionService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get(frontendId,sid,cb)\tLocalSeesionService.prototype.get() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据前端服务和会话id获得本地会话</span><br><span class=\"line\">getByUid(name,uid,sid,cb)\t</span><br><span class=\"line\">LocalSeesionService.prototype.getByUid()  frontendId:会话链接的前端服务id,uid：绑定到会话的用户id，cb：回调函数。args: cb(err, localSessions)。根据前端服务和用户id获取本地会话。</span><br><span class=\"line\"></span><br><span class=\"line\">kickBySid(name,uid,sid,cb)\tLocalSeesionService.prototype.kickBySid() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据会话id踢掉该会话。</span><br><span class=\"line\">kickByUid()\t</span><br><span class=\"line\">LocalSeesionService.prototype.kickByUid() frontendId:会话链接的前端服务id,uid：用户id,cb:回调函数。根据用户id踢掉该会话。</span><br></pre></td></tr></table></figure>\n<p>LocalSession</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span>(uid,cb)\tLocalSeesion.prototype.bind() uid:用户编号;cb:回调函数。callfunction(err)。绑定当前会话，用于前端服务的推送和全局会话的绑定。</span><br><span class=\"line\">unbind(uid,cb)\t</span><br><span class=\"line\">LocalSeesion.prototype.unbind() uid:用户编号;cb:回调函数。callfunction(err)。取消绑定。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>(key,value)\tLocalSeesion.prototype.set() 将key/value添加到本地会话中</span><br><span class=\"line\">get(key)\t</span><br><span class=\"line\">LocalSeesion.prototype.get() 根据key从本地会话中获取值。</span><br><span class=\"line\"></span><br><span class=\"line\">push(key,cb)\t</span><br><span class=\"line\">LocalSeesion.prototype.push() 将本地会话中的key/value添加到全局会话中</span><br><span class=\"line\"></span><br><span class=\"line\">pushAll(cb)\tLocalSeesion.prototype.pushAll() 将本地会话中的所有key/value添加到全会话中</span><br></pre></td></tr></table></figure>\n<p>SessionService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kick(uid,cb)\tSeesionService.prototype.kick() 踢掉该用户的所有离线会话</span><br><span class=\"line\">kickBySession(sid,cb)\t</span><br><span class=\"line\">SeesionService.prototype.kickBySession() sid:会话编号;cb:回调函数。根据会话id踢掉一个在线用户</span><br><span class=\"line\"></span><br><span class=\"line\">sendMessage(sid,msg)\tSeesionService.prototype.sendMessage()根据会话id向客户端发送消息</span><br><span class=\"line\">sendMessageByUid(uid,msg)\t</span><br><span class=\"line\">SeesionService.prototype.sendMessageByUid() 根据用户id向客户端发送消息</span><br></pre></td></tr></table></figure>\n<p>Pomelo</p>\n<p><code>`</code> bash<br>createApp(opts)    Pomelo.create() 创建一个Pomelo 应用程序</p>"},{"title":"node笔记","date":"2018-08-21T09:04:37.000Z","_content":"\n第一章 node简介\n1.1 node的特点\n\t1.1.1 异步I/O 绝大多数操作以异步方式进行调用\n\t1.1.2 事件与回调函数\n\t1.1.3 单线程，但是可以用WebWorkers的方式解决单线程的问题（子进程），用Master-Worker用master统一管理子进程\n\t1.1.4 跨平台\n\t1.1.5 c++速度大约是node的2.5倍\n\n1.2 模块机制\n\t1.2.1 分为核心模块和文件模块，require没带路径的为核心模块，直接加载进内存，带路径的为文件模块,核心模块中有c++和javascript两部分，其中buffer、crypto、evals、fs、os、等都是c++部分的 \n\t1.2.2 npm安装的核心模块插件在package.json中定义\n\n1.3 异步I/O\n\t1.3.1 操作系统内核对I/O只有：阻塞I/O和非阻塞I/O，node中的异步I/O模型由事件循环、观察者、请求对象、I/O线程池\n\t整个系统可以理解为事件循环相当于厨子，不停的询问是否有新的订单，观察者相当于收银员，收到用户的订单将订单分给厨子，而订单相当于请求对象，参数、方法、回调函数斗封装在请求对象中,\n\t以上是异步I/O的第一步，io线程池相当于放订单的桌子，  请求对象->I/O线程池->观察者->事件循环\n\t1.3.2 非异步的I/O主要是setTimeout(),setInterval(),setImmediate(),process.nextTick()\n\n<!-- more -->\n1.4 异步编程\n\t1.4.1 异步编程的解决方案分为3个：\n\t\t1）事件发布/订阅模式\n\t\t2）Promise/Deferred模式\n\t\t3）流程控制库\n\t1.4.2 事件发布/订阅模式\n\t``` bash\n\t//订阅\n\temitter.on(\"event1\",function(message){\n\t\tconsole.log(message);\n\t});\n\t//发布\n\temitter.on('event1',\"I Love you\");\n\t```\n\t1）继承events模块\n\t``` bash\n\tvar events = require('events');\n\n\tfunction Stream(){\n\t\tevents.EventEmitter.call(this);\n\t}\n\tutil.inherits(Stream,events.EventEmitter);\n\t```\n\t2)利用事件队列解决崩溃问题\n\t事件发布/订阅模式中一般只有一个once()方法，用一个『状态锁』或者『事件队列』防止崩溃\n\t状态锁\n\t``` bash\n\tvar status = \"ready\";\n\tvar select = function(callback){\n\t\tif(status == \"ready\" ){\n\t\t\tstatus = \"pending\";\n\t\t\tdb.select(\"SQL\", function(results){\n\t\t\t\tstatus = \"ready\";\n\t\t\t\tcallback(results);\n\t\t\t});\n\t\t}\n\t};\n\t```\n\t事件队列\n\t``` bash\n\tvar proxy = new events.EventEmitter();\n\tvar status = function (callback) \n\t\tproxy.once(\"selected\", callback);\n\t\tif(status === \"ready\"){\n\t\t\tstatus = \"pending\";\n\t\t\tdb.select(\"SQL\", function(result){\n\t\t\t\tproxy.emit(\"selected\",result);\n\t\t\t\tstatus = \"ready\";\n\t\t\t});\n\t\t}\n\t}\n\t```\n\t3）多异步之间的协作方案\n\t借组一个第三方函数和第三方变量来处理异步协作的结果\n\t``` bash\n\tvar after = function (times,callback){\n\t\tvar count = 0, results = {};\n\t\treturn function (key, value){\n\t\t\tresult[key] = value;\n\t\t\tcount++;\n\t\t\tif(count === times){\n\t\t\t\tcallback(results);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar done = after(times, render);\n\t```\n\t1.4.3 Promise/Deferred模式\n\tPromise是高级接口，事件是低级接口，Promise更像链表\n\t1.4.4 async流程控制模块\n\t1）async的series()方法实现串行（不传参）\n\t``` bash\n\tasync.series([\n\t\tfunction (callback){\n\t\t\tfs.readFile('file1.txt','utf-8',calback);\n\t\t},\n\t\tfunction (callback){\n\t\t\tfs.readFile('file2.txt','utf-8',calback);\n\t\t}\n\t],function (err,result){\n\t\t//result = [file1.txt,file2.txt]等价于先处理file1.txt，在处理file2.txt，错误回调\n\t});\n\t```\n\t2）async的parallel()方法实现并行\n\t``` bash\n\tasync.parallel([\n\t\tfunction (callback){\n\t\t\tfs.readFile('file1.txt','utf-8',calback);\n\t\t},\n\t\tfunction (callback){\n\t\t\tfs.readFile('file2.txt','utf-8',calback);\n\t\t}\n\t],function (err,result){\n\t\t//result = [file1.txt,file2.txt]等价于并行处理file1.txt，在处理file2.txt，错误回调\n\t});\n\t```\n\t3）async的waterfall()方法实现串行（传参）\n\t略\n\t4）async.auto()可以根据依赖关系自动分析，以最佳顺序执行\n\t略\n\t1.4.5 流程控制模块Step\n\t1)Step接受任意数量任务，所有任务传行执行\n\t``` bash\n\tStep(\n\t\tfunction (callback){\n\t\t\tfs.readFile('file1.txt','utf-8',this);\n\t\t},\n\t\tfunction (callback){\n\t\t\tfs.readFile('file2.txt','utf-8',this);\n\t\t},\n\t\tfunction done(err, content) {\n\t\t\t console.log(content);\n\t\t}\n\t);\n\t```\n\t2)Step实现异步任务并行执行要用this的parallel()\n\t``` bash\n\tStep(\n\t\tfunction (callback){\n\t\t\tfs.readFile('file1.txt','utf-8',this.parallel());\n\t\t},\n\t\tfunction (callback){\n\t\t\tfs.readFile('file2.txt','utf-8',this.parallel());\n\t\t},\n\t\tfunction done(err, content) {\n\t\t\t console.log(arguments);\n\t\t}\n\t);\n\t```\n\t1.4.6流程控制模块wind\n\t1)wind的$await()方法实现异步等待\n\t2）wind的whenAll()处理并发\n\n1.5 异步并发控制\n\t1.5.1 bagpipe解决办法（API添加过载保护，用队列控制并发）\n\t``` bash\n\tvar Bagpipe = require('bagpipe');\n\t//设定最大并发数为10\n\tvar bagpipe = new Bagpipe(10);\n\tfor(var i = 0; i< 100;i++){\n\t\tbagpipe.push(async, function (){\n\n\t\t});\n\t}\n\tbagpipe.on('full',function (length){\n\t\tconsole.warn('底层系统处理不及时');\n\t});\n\t```\n\t1.5.2 拒绝模式\n\t``` bash\n\tvar bagpipe = new Bagpipe(10,{\n\t\trefuse: true\n\t});\n\t```\n\t1.5.3 超时控制\n\t``` bash\n\tvar bagpipe = new Bagpipe(10, {\n\t\ttimeout: 3000\n\t});\n\t```\n\n1.6 内存管理\n\t1.6.1 v8内存分为新生代和老生代的\n\tnode --max-old-space-size 2048 xxx.js 调整内存大小执行某个脚本\n\tv8堆内存64位系统是1.4G,32位系统是0.7G\n\t新生代内存的回收机制是将堆内存一分为2，使用中的是From，空的是to，进行垃圾回收时，是将from中的存活对象复制到to中，然后释放非存活的，同时from和to对换，缺点是只能使用一半的内存空间\n\t老生带内存的回收机制是将from中的使用的标记，回收未使用的\t\n\t1.6.2 外部访问内部的变量的方法叫闭包   还有的说是内部变量无法被外部访问的过程叫闭包\n\t1.6.3 查看内存使用process.memoryUsage() os.totalmem os.freemem \n\n1.7 Buffer\n\t1.7.1 Buffer与字符串转换\n\t``` bash\n\tnew Buffer(str, [encoding]);\n\tbuf.write(string, [offset], [length], [encodeing]);\n\tbuf.tostring([encoding], [start], [end]);\n\t```\n1.8 网络\n\t1.8.1 tcp协议中的osi模型（分为 物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）\n\tserver\n\t``` bash\n\tvar net = require('net');\n\tvar server = net.createServer(function(socket){\n\t\tserver.on('data',function(data){\n\t\t});\n\t\tserver.on('end',function(data){\n\t\t});\n\t\tserver.on('error',function(data){\n\t\t});\n\t\tserver.write('data');\n\t});\n\n\tserver.listen(port,function(){\n\t})\n\t```\n\tclient\n\t``` bash\n\tvar net = require('net');\n\tvar client = net.connect({port: 8124},function(socket){\n\t\tclient.on('data',function(data){\n\t\t});\n\t\tclient.on('end',function(data){\n\t\t});\n\t\tclient.on('error',function(data){\n\t\t});\n\t\tclient.write('data');\n\t});\n\t```\n\t1.8.2 UDP是用户数据包协议，一个套接字可以与多个UDP通信\n\tserver\n\t``` bash\n\tvar dgrm = require(\"dgrm\");\n\tvar server = dgrm.createSocket(\"udp4\");\n\tserver.on(\"message\", function (msg, rinfo){\n\t\tconsole.log(\"xxx\");\n\t});\n\tserver.on(\"listening\", function() {\n\t\tvar address = server.address();\n\t\tconsole.log(\"xxx\");\n\t});\n\tserver.bind(41234);\n\t```\n\tclient\n\t``` bash\n\tvar dgram = require('dgram');\n\tvar messgae = new Buffer(\"xxxx\");\n\tvar client = dgram.createSocket(\"udp4\");\n\tclinet.send(message, 0, message.length, 41234, \"localhost\", function(err,bytes){\n\t\tclient.close();\n\t});\n\t```\n\t1.8.3 HTTP是构建在TCP之上属于应用层协议\n\t``` bash\n\thttps_request : function(host, path, post_data, cb){\n\t    var reqdata = JSON.stringify(post_data);\n\t\tvar options = {\n\t\t    hostname: host,\n\t\t    port: 443,\n\t\t    method: 'POST',\n\t\t    path: path,\n\t\t    headers: {\n\t\t        'Content-Type': 'application/json'\n\t\t    }\n\t\t};\n\n\t\tvar req_time_out = setTimeout(function() {\n\t    \t\treq.abort();\n\t    \t\tcb(400, {code:400,message:'请求超时'});\n\t    \t\tlogger.n.info('Got Request Timeout.');\n\t\t}, 10000);\n\n\t\tvar req = https.request(options, function (res) {\n\t\t\tclearTimeout(req_time_out);\n\t\t\t//等待响应60秒超时\n\t\t\tvar res_time_out = setTimeout(function() {\n\t\t\t\tres.destroy();\n\t\t\t\tcb(400, {code:400,message:'响应超时'});\n\t\t\t\tlogger.n.info('Got Response Timeout.');\n\t\t\t}, 60000);\n\t\t\tvar status_code = res.statusCode;\n\t\t\tvar body = null;\n\t\t\tlogger.n.info(\"Got status_code: \" + status_code);\n\t\t\tres.on('data',function(data){\n\t            body = JSON.parse(data);\n\t        }).on('end', function(){\n\t        \tclearTimeout(res_time_out);\n\t        \tcb(status_code, body);\n\t        });\n\t\t}).on('error', function(e) {\n\t\t\tcb(400, {code:400,message:e.message});\n\t\t\tlogger.n.info(\"Got error: \" + e.message);\n\t    });\n\t\treq.write(reqdata);\n\t\treq.end();\n    }\n    ```\n    1.8.4 WebSocket\n    client\n    ``` bash\n    var client= new net.Socket();\n\tvar flag = true;\n\tvar port = 0;\n\n\tclient.on('connect',function (){\n\t    //正常连接\n\t    flag = true;\n\t    logger.boot.info('socket Connection succeed');\n\t});\n\tclient.on('end', function() {\n\t    //flag=false;\n\t    logger.n.warn('!!!!!tcp_client disconnected');\n\t    setTimeout(Fight_Service.tcp_reconnect, 1000);\n\t});\n\tclient.on('data',function(data){\n\t    //得到服务端返回来的数据\n\t    Fight_Service.processResp(data);\n\t});\n\tclient.on('error',function(error){\n\t    //错误出现之后关闭连接\n\t    flag = false;\n\t    logger.n.error('socket error:' + error);\n\t    client.destroy();\n\t    setTimeout(Fight_Service.tcp_reconnect, 1000);\n\t});\n\tclient.on('close',function(){\n\t    //正常关闭连接\n\t    flag = false;\n\t    logger.n.warn('socket Connection closed');\n\t    client.destroy();\n\t});\n\n\tFight_Service.tcp_reconnect = function(worker_id){\n    //创建socket客户端\n    client.setEncoding('binary');\n\n    if (port == 0 ){\n        //连接到服务端115.159.186.60 8400\n        // logger.boot.info(\"socket process_work_id:\" + worker_id);\n        worker_id = worker_id % 8;\n        port = 8400 + worker_id;\n    }else{\n        logger.boot.info(\"socket tcp_reconnect\");\n    }\n\n    logger.boot.info(\"socket_port_id:\" + port);\n\n    client.connect(port,\"10.96.71.91\");\n\t}\n\t```\n\n1.9 多进程\n\t1.9.1 child_process模块\n\t1）spawn()启动一个子进程执行命令，无回调，无超时\n\t2）exec()启动一个子进程执行命令，有回调，有超时\n\t3）execFile()启动一个子进程执行可执行文件\n\t4）fork()启动node子进程执行js文件模块\n\t``` bash\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tfor(var i = 0; i < cpus.length; i++){\n\t\tfork('./worker.js');\n\t}\n\t```\n\t1.9.2 进程间通信IPC，主线程与工作线程之间通过onmessage()和postMessage()进行通信，子进程对象则由send()方法实现主进程向子进程发送数据\n\t1.9.3 句柄是一种用来标识资源的引用，用来拓展有限的文件描述符\n\t``` bash\n\tchild.send(message,[sandHandle])如（child.send('server',server)）;\n\t子进程代码\n\tprocess.on('message',function(m, server){\n\t\tif(m == 'server'){\n\t\txxxxx\n\t}\n\t})\n\t```\n\t1.9.4 父进程可以通过kill()方法给子进程发送一个SIGTERM信号杀进程\n\t``` bash\n\tchid.kill([signal]);\n\tprocess.kill(pid, [signal]);\n\t``` \n\t在退出中加入自动重启可能会有新用户进来请求丢失的情况，工作进程在得知退出时，向主进程发送一个自杀信号（达到先创建在退出进程）\n\t``` bash\n\t/**\n\t * cluster mode\n\t */\n\tif (   opts.get('cluster')\n\t    || config.APP_CLUSTER.ENABLE) {\n\t    var cluster = require('cluster');\n\t    if (cluster.isMaster) {\n\t        console.log('[CLUSTER MODE] MASTER');\n\n\t        for (var i=0; i<config.APP_CLUSTER.NUM; i++) {\n\t            cluster.fork();\n\t        }\n\n\t        cluster.on('exit', function(worker, code, signal) {\n\t            console.log('worker ' + worker.process.pid + ' died');\n\t            cluster.fork();\n\t        });\n\t        return;\n\t    }\n\t    console.log('[CLUSTER MODE] WORKER');\n\t}\n\t```\n\n1.10 插件\n\t1.10.1 Sequelizejs  此插件在option索引的位置千万不能写错，写错有大几率导致db堵塞\n\t``` bash\n\tModel.findAll({\n  \t\tattributes: ['foo', ['bar', 'baz']]\n\t});\n\tSELECT foo, bar AS baz ...\n\n\tModel.findAll({\n\t  attributes: [[sequelize.fn('COUNT', sequelize.col('hats')), 'no_hats']]\n\t});\n\tSELECT COUNT(hats) AS no_hats ...\n\n\tPost.findAll({\n\t  where: {\n\t    [Op.or]: [{authorId: 12}, {authorId: 13}]\n\t  }\n\t});\n\tSELECT * FROM post WHERE authorId = 12 OR authorId = 13;\n\n\tOrder.findAll({attributes:['name', [sequelize.fn('SUM', sequelize.col('price')), 'sum']], group:'name', having:['COUNT(?)>?', 'name', 1], raw:true}).then(function(result){\n\t console.log(result);\n\t})\n\tSELECT `name`, sum(`price`) AS `sum` FROM `orders` AS `Orders` GROUP BY name HAVING COUNT('name')>1;\n\t```\n\n\t1.10.2 Lodashjs\n\t[文档](https://www.lodashjs.com/docs/4.17.5.html)\n\t\n\t_.indexOf(array, value, [fromIndex=0])\n\tnumber): Returns the index of the matched value, else -1.\n\t``` bash\n\t_.indexOf([1, 2, 1, 2], 2);\n\t// => 1\n\t \n\t// Search from the `fromIndex`.\n\t_.indexOf([1, 2, 1, 2], 2, 2);\n\t// => 3\n\t```\n\t_.dropRight(array, [n=1])\n\t(Array): Returns the slice of array.\n\t``` bash\n\t_.dropRight([1, 2, 3]);\n\t// => [1, 2]\n\t \n\t_.dropRight([1, 2, 3], 2);\n\t// => [1]\n\n\t_.dropRight([1, 2, 3], 0);\n\t// => [1, 2, 3]\n\t```\n\t_.filter(collection, [predicate=_.identity])\n\t(Array): Returns the new filtered array.\n\t``` bash\n\tvar users = [\n\t  { 'user': 'barney', 'age': 36, 'active': true },\n\t  { 'user': 'fred',   'age': 40, 'active': false }\n\t];\n\t \n\t_.filter(users, function(o) { return !o.active; });\n\t// => objects for ['fred']\n\t```\n\t_.find(collection, [predicate=_.identity], [fromIndex=0])\n\t(*): Returns the matched element, else undefined.\n\t``` bash\n\t\tvar users = [\n\t  { 'user': 'barney',  'age': 36, 'active': true },\n\t  { 'user': 'fred',    'age': 40, 'active': false },\n\t  { 'user': 'pebbles', 'age': 1,  'active': true }\n\t];\n\t \n\t_.find(users, function(o) { return o.age < 40; });\n\t// => object for 'barney'\n\t```\n\t_.forEach(collection, [iteratee=_.identity])\n\t``` bash\n\t_.forEach([1, 2], function(value) {\n\t  console.log(value);\n\t});\n\t// => Logs `1` then `2`.\n\t \n\t_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n\t  console.log(key);\n\t});\n\t```\n\t_.groupBy(collection, [iteratee=_.identity])\n\t(Object): Returns the composed aggregate object.\n\t``` bash\n\t_.groupBy([6.1, 4.2, 6.3], Math.floor);\n\t// => { '4': [4.2], '6': [6.1, 6.3] }\n\t \n\t// The `_.property` iteratee shorthand.\n\t_.groupBy(['one', 'two', 'three'], 'length');\n\t// => { '3': ['one', 'two'], '5': ['three'] }\n\t```\n\t#Promise.map Promise.all 相当于事务 \n\t_.map(collection, [iteratee=_.identity])\n\t(Array): Returns the new mapped array.\n\t``` bash\n\tfunction square(n) {\n\t  return n * n;\n\t}\n\t\n\t_.map([4, 8], square);\n\t// => [16, 64]\n\t \n\t_.map({ 'a': 4, 'b': 8 }, square);\n\t// => [16, 64] (iteration order is not guaranteed)\n\t```\n\t#Promise.reduce是顺序执行\n\t_.reduce(collection, [iteratee=_.identity], [accumulator])  -\n\t(*): Returns the accumulated value.\n\t``` bash\n\tf_.reduce([1, 2], function(sum, n) {\n\t  return sum + n;\n\t}, 0);\n\t// => 3\n\t```\n\t_.isEmpty(value)\n\t(boolean): Returns true if value is empty, else false.\n\t``` bash\n\t_.isEmpty(null);\n\t// => true\n\t \n\t_.isEmpty(true);\n\t// => true\n\t \n\t_.isEmpty(1);\n\t// => true\n\t \n\t_.isEmpty([1, 2, 3]);\n\t// => false\n\t \n\t_.isEmpty({ 'a': 1 });\n\t// => false\n\t```\n\t项目案例 略\n\n\t1.10.3 Moment.js\n\t[文档](http://momentjs.cn)\n\t案例使用\n\t``` bash\n\tmoment(event.start_time).startOf('day')/1000;\n\tmoment.unix(moment().startOf('month')/1000).utcOffset(config.TIME_ZONE_DIFF).format(\"YYYY-MM-DD HH:mm:ss\");\n\t```\n\n","source":"_posts/node笔记.md","raw":"---\ntitle: node笔记\ndate: 2018-08-21 17:04:37\ncategories: \"开发语言\"\ntags:\n\t- node.js\n---\n\n第一章 node简介\n1.1 node的特点\n\t1.1.1 异步I/O 绝大多数操作以异步方式进行调用\n\t1.1.2 事件与回调函数\n\t1.1.3 单线程，但是可以用WebWorkers的方式解决单线程的问题（子进程），用Master-Worker用master统一管理子进程\n\t1.1.4 跨平台\n\t1.1.5 c++速度大约是node的2.5倍\n\n1.2 模块机制\n\t1.2.1 分为核心模块和文件模块，require没带路径的为核心模块，直接加载进内存，带路径的为文件模块,核心模块中有c++和javascript两部分，其中buffer、crypto、evals、fs、os、等都是c++部分的 \n\t1.2.2 npm安装的核心模块插件在package.json中定义\n\n1.3 异步I/O\n\t1.3.1 操作系统内核对I/O只有：阻塞I/O和非阻塞I/O，node中的异步I/O模型由事件循环、观察者、请求对象、I/O线程池\n\t整个系统可以理解为事件循环相当于厨子，不停的询问是否有新的订单，观察者相当于收银员，收到用户的订单将订单分给厨子，而订单相当于请求对象，参数、方法、回调函数斗封装在请求对象中,\n\t以上是异步I/O的第一步，io线程池相当于放订单的桌子，  请求对象->I/O线程池->观察者->事件循环\n\t1.3.2 非异步的I/O主要是setTimeout(),setInterval(),setImmediate(),process.nextTick()\n\n<!-- more -->\n1.4 异步编程\n\t1.4.1 异步编程的解决方案分为3个：\n\t\t1）事件发布/订阅模式\n\t\t2）Promise/Deferred模式\n\t\t3）流程控制库\n\t1.4.2 事件发布/订阅模式\n\t``` bash\n\t//订阅\n\temitter.on(\"event1\",function(message){\n\t\tconsole.log(message);\n\t});\n\t//发布\n\temitter.on('event1',\"I Love you\");\n\t```\n\t1）继承events模块\n\t``` bash\n\tvar events = require('events');\n\n\tfunction Stream(){\n\t\tevents.EventEmitter.call(this);\n\t}\n\tutil.inherits(Stream,events.EventEmitter);\n\t```\n\t2)利用事件队列解决崩溃问题\n\t事件发布/订阅模式中一般只有一个once()方法，用一个『状态锁』或者『事件队列』防止崩溃\n\t状态锁\n\t``` bash\n\tvar status = \"ready\";\n\tvar select = function(callback){\n\t\tif(status == \"ready\" ){\n\t\t\tstatus = \"pending\";\n\t\t\tdb.select(\"SQL\", function(results){\n\t\t\t\tstatus = \"ready\";\n\t\t\t\tcallback(results);\n\t\t\t});\n\t\t}\n\t};\n\t```\n\t事件队列\n\t``` bash\n\tvar proxy = new events.EventEmitter();\n\tvar status = function (callback) \n\t\tproxy.once(\"selected\", callback);\n\t\tif(status === \"ready\"){\n\t\t\tstatus = \"pending\";\n\t\t\tdb.select(\"SQL\", function(result){\n\t\t\t\tproxy.emit(\"selected\",result);\n\t\t\t\tstatus = \"ready\";\n\t\t\t});\n\t\t}\n\t}\n\t```\n\t3）多异步之间的协作方案\n\t借组一个第三方函数和第三方变量来处理异步协作的结果\n\t``` bash\n\tvar after = function (times,callback){\n\t\tvar count = 0, results = {};\n\t\treturn function (key, value){\n\t\t\tresult[key] = value;\n\t\t\tcount++;\n\t\t\tif(count === times){\n\t\t\t\tcallback(results);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar done = after(times, render);\n\t```\n\t1.4.3 Promise/Deferred模式\n\tPromise是高级接口，事件是低级接口，Promise更像链表\n\t1.4.4 async流程控制模块\n\t1）async的series()方法实现串行（不传参）\n\t``` bash\n\tasync.series([\n\t\tfunction (callback){\n\t\t\tfs.readFile('file1.txt','utf-8',calback);\n\t\t},\n\t\tfunction (callback){\n\t\t\tfs.readFile('file2.txt','utf-8',calback);\n\t\t}\n\t],function (err,result){\n\t\t//result = [file1.txt,file2.txt]等价于先处理file1.txt，在处理file2.txt，错误回调\n\t});\n\t```\n\t2）async的parallel()方法实现并行\n\t``` bash\n\tasync.parallel([\n\t\tfunction (callback){\n\t\t\tfs.readFile('file1.txt','utf-8',calback);\n\t\t},\n\t\tfunction (callback){\n\t\t\tfs.readFile('file2.txt','utf-8',calback);\n\t\t}\n\t],function (err,result){\n\t\t//result = [file1.txt,file2.txt]等价于并行处理file1.txt，在处理file2.txt，错误回调\n\t});\n\t```\n\t3）async的waterfall()方法实现串行（传参）\n\t略\n\t4）async.auto()可以根据依赖关系自动分析，以最佳顺序执行\n\t略\n\t1.4.5 流程控制模块Step\n\t1)Step接受任意数量任务，所有任务传行执行\n\t``` bash\n\tStep(\n\t\tfunction (callback){\n\t\t\tfs.readFile('file1.txt','utf-8',this);\n\t\t},\n\t\tfunction (callback){\n\t\t\tfs.readFile('file2.txt','utf-8',this);\n\t\t},\n\t\tfunction done(err, content) {\n\t\t\t console.log(content);\n\t\t}\n\t);\n\t```\n\t2)Step实现异步任务并行执行要用this的parallel()\n\t``` bash\n\tStep(\n\t\tfunction (callback){\n\t\t\tfs.readFile('file1.txt','utf-8',this.parallel());\n\t\t},\n\t\tfunction (callback){\n\t\t\tfs.readFile('file2.txt','utf-8',this.parallel());\n\t\t},\n\t\tfunction done(err, content) {\n\t\t\t console.log(arguments);\n\t\t}\n\t);\n\t```\n\t1.4.6流程控制模块wind\n\t1)wind的$await()方法实现异步等待\n\t2）wind的whenAll()处理并发\n\n1.5 异步并发控制\n\t1.5.1 bagpipe解决办法（API添加过载保护，用队列控制并发）\n\t``` bash\n\tvar Bagpipe = require('bagpipe');\n\t//设定最大并发数为10\n\tvar bagpipe = new Bagpipe(10);\n\tfor(var i = 0; i< 100;i++){\n\t\tbagpipe.push(async, function (){\n\n\t\t});\n\t}\n\tbagpipe.on('full',function (length){\n\t\tconsole.warn('底层系统处理不及时');\n\t});\n\t```\n\t1.5.2 拒绝模式\n\t``` bash\n\tvar bagpipe = new Bagpipe(10,{\n\t\trefuse: true\n\t});\n\t```\n\t1.5.3 超时控制\n\t``` bash\n\tvar bagpipe = new Bagpipe(10, {\n\t\ttimeout: 3000\n\t});\n\t```\n\n1.6 内存管理\n\t1.6.1 v8内存分为新生代和老生代的\n\tnode --max-old-space-size 2048 xxx.js 调整内存大小执行某个脚本\n\tv8堆内存64位系统是1.4G,32位系统是0.7G\n\t新生代内存的回收机制是将堆内存一分为2，使用中的是From，空的是to，进行垃圾回收时，是将from中的存活对象复制到to中，然后释放非存活的，同时from和to对换，缺点是只能使用一半的内存空间\n\t老生带内存的回收机制是将from中的使用的标记，回收未使用的\t\n\t1.6.2 外部访问内部的变量的方法叫闭包   还有的说是内部变量无法被外部访问的过程叫闭包\n\t1.6.3 查看内存使用process.memoryUsage() os.totalmem os.freemem \n\n1.7 Buffer\n\t1.7.1 Buffer与字符串转换\n\t``` bash\n\tnew Buffer(str, [encoding]);\n\tbuf.write(string, [offset], [length], [encodeing]);\n\tbuf.tostring([encoding], [start], [end]);\n\t```\n1.8 网络\n\t1.8.1 tcp协议中的osi模型（分为 物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）\n\tserver\n\t``` bash\n\tvar net = require('net');\n\tvar server = net.createServer(function(socket){\n\t\tserver.on('data',function(data){\n\t\t});\n\t\tserver.on('end',function(data){\n\t\t});\n\t\tserver.on('error',function(data){\n\t\t});\n\t\tserver.write('data');\n\t});\n\n\tserver.listen(port,function(){\n\t})\n\t```\n\tclient\n\t``` bash\n\tvar net = require('net');\n\tvar client = net.connect({port: 8124},function(socket){\n\t\tclient.on('data',function(data){\n\t\t});\n\t\tclient.on('end',function(data){\n\t\t});\n\t\tclient.on('error',function(data){\n\t\t});\n\t\tclient.write('data');\n\t});\n\t```\n\t1.8.2 UDP是用户数据包协议，一个套接字可以与多个UDP通信\n\tserver\n\t``` bash\n\tvar dgrm = require(\"dgrm\");\n\tvar server = dgrm.createSocket(\"udp4\");\n\tserver.on(\"message\", function (msg, rinfo){\n\t\tconsole.log(\"xxx\");\n\t});\n\tserver.on(\"listening\", function() {\n\t\tvar address = server.address();\n\t\tconsole.log(\"xxx\");\n\t});\n\tserver.bind(41234);\n\t```\n\tclient\n\t``` bash\n\tvar dgram = require('dgram');\n\tvar messgae = new Buffer(\"xxxx\");\n\tvar client = dgram.createSocket(\"udp4\");\n\tclinet.send(message, 0, message.length, 41234, \"localhost\", function(err,bytes){\n\t\tclient.close();\n\t});\n\t```\n\t1.8.3 HTTP是构建在TCP之上属于应用层协议\n\t``` bash\n\thttps_request : function(host, path, post_data, cb){\n\t    var reqdata = JSON.stringify(post_data);\n\t\tvar options = {\n\t\t    hostname: host,\n\t\t    port: 443,\n\t\t    method: 'POST',\n\t\t    path: path,\n\t\t    headers: {\n\t\t        'Content-Type': 'application/json'\n\t\t    }\n\t\t};\n\n\t\tvar req_time_out = setTimeout(function() {\n\t    \t\treq.abort();\n\t    \t\tcb(400, {code:400,message:'请求超时'});\n\t    \t\tlogger.n.info('Got Request Timeout.');\n\t\t}, 10000);\n\n\t\tvar req = https.request(options, function (res) {\n\t\t\tclearTimeout(req_time_out);\n\t\t\t//等待响应60秒超时\n\t\t\tvar res_time_out = setTimeout(function() {\n\t\t\t\tres.destroy();\n\t\t\t\tcb(400, {code:400,message:'响应超时'});\n\t\t\t\tlogger.n.info('Got Response Timeout.');\n\t\t\t}, 60000);\n\t\t\tvar status_code = res.statusCode;\n\t\t\tvar body = null;\n\t\t\tlogger.n.info(\"Got status_code: \" + status_code);\n\t\t\tres.on('data',function(data){\n\t            body = JSON.parse(data);\n\t        }).on('end', function(){\n\t        \tclearTimeout(res_time_out);\n\t        \tcb(status_code, body);\n\t        });\n\t\t}).on('error', function(e) {\n\t\t\tcb(400, {code:400,message:e.message});\n\t\t\tlogger.n.info(\"Got error: \" + e.message);\n\t    });\n\t\treq.write(reqdata);\n\t\treq.end();\n    }\n    ```\n    1.8.4 WebSocket\n    client\n    ``` bash\n    var client= new net.Socket();\n\tvar flag = true;\n\tvar port = 0;\n\n\tclient.on('connect',function (){\n\t    //正常连接\n\t    flag = true;\n\t    logger.boot.info('socket Connection succeed');\n\t});\n\tclient.on('end', function() {\n\t    //flag=false;\n\t    logger.n.warn('!!!!!tcp_client disconnected');\n\t    setTimeout(Fight_Service.tcp_reconnect, 1000);\n\t});\n\tclient.on('data',function(data){\n\t    //得到服务端返回来的数据\n\t    Fight_Service.processResp(data);\n\t});\n\tclient.on('error',function(error){\n\t    //错误出现之后关闭连接\n\t    flag = false;\n\t    logger.n.error('socket error:' + error);\n\t    client.destroy();\n\t    setTimeout(Fight_Service.tcp_reconnect, 1000);\n\t});\n\tclient.on('close',function(){\n\t    //正常关闭连接\n\t    flag = false;\n\t    logger.n.warn('socket Connection closed');\n\t    client.destroy();\n\t});\n\n\tFight_Service.tcp_reconnect = function(worker_id){\n    //创建socket客户端\n    client.setEncoding('binary');\n\n    if (port == 0 ){\n        //连接到服务端115.159.186.60 8400\n        // logger.boot.info(\"socket process_work_id:\" + worker_id);\n        worker_id = worker_id % 8;\n        port = 8400 + worker_id;\n    }else{\n        logger.boot.info(\"socket tcp_reconnect\");\n    }\n\n    logger.boot.info(\"socket_port_id:\" + port);\n\n    client.connect(port,\"10.96.71.91\");\n\t}\n\t```\n\n1.9 多进程\n\t1.9.1 child_process模块\n\t1）spawn()启动一个子进程执行命令，无回调，无超时\n\t2）exec()启动一个子进程执行命令，有回调，有超时\n\t3）execFile()启动一个子进程执行可执行文件\n\t4）fork()启动node子进程执行js文件模块\n\t``` bash\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tfor(var i = 0; i < cpus.length; i++){\n\t\tfork('./worker.js');\n\t}\n\t```\n\t1.9.2 进程间通信IPC，主线程与工作线程之间通过onmessage()和postMessage()进行通信，子进程对象则由send()方法实现主进程向子进程发送数据\n\t1.9.3 句柄是一种用来标识资源的引用，用来拓展有限的文件描述符\n\t``` bash\n\tchild.send(message,[sandHandle])如（child.send('server',server)）;\n\t子进程代码\n\tprocess.on('message',function(m, server){\n\t\tif(m == 'server'){\n\t\txxxxx\n\t}\n\t})\n\t```\n\t1.9.4 父进程可以通过kill()方法给子进程发送一个SIGTERM信号杀进程\n\t``` bash\n\tchid.kill([signal]);\n\tprocess.kill(pid, [signal]);\n\t``` \n\t在退出中加入自动重启可能会有新用户进来请求丢失的情况，工作进程在得知退出时，向主进程发送一个自杀信号（达到先创建在退出进程）\n\t``` bash\n\t/**\n\t * cluster mode\n\t */\n\tif (   opts.get('cluster')\n\t    || config.APP_CLUSTER.ENABLE) {\n\t    var cluster = require('cluster');\n\t    if (cluster.isMaster) {\n\t        console.log('[CLUSTER MODE] MASTER');\n\n\t        for (var i=0; i<config.APP_CLUSTER.NUM; i++) {\n\t            cluster.fork();\n\t        }\n\n\t        cluster.on('exit', function(worker, code, signal) {\n\t            console.log('worker ' + worker.process.pid + ' died');\n\t            cluster.fork();\n\t        });\n\t        return;\n\t    }\n\t    console.log('[CLUSTER MODE] WORKER');\n\t}\n\t```\n\n1.10 插件\n\t1.10.1 Sequelizejs  此插件在option索引的位置千万不能写错，写错有大几率导致db堵塞\n\t``` bash\n\tModel.findAll({\n  \t\tattributes: ['foo', ['bar', 'baz']]\n\t});\n\tSELECT foo, bar AS baz ...\n\n\tModel.findAll({\n\t  attributes: [[sequelize.fn('COUNT', sequelize.col('hats')), 'no_hats']]\n\t});\n\tSELECT COUNT(hats) AS no_hats ...\n\n\tPost.findAll({\n\t  where: {\n\t    [Op.or]: [{authorId: 12}, {authorId: 13}]\n\t  }\n\t});\n\tSELECT * FROM post WHERE authorId = 12 OR authorId = 13;\n\n\tOrder.findAll({attributes:['name', [sequelize.fn('SUM', sequelize.col('price')), 'sum']], group:'name', having:['COUNT(?)>?', 'name', 1], raw:true}).then(function(result){\n\t console.log(result);\n\t})\n\tSELECT `name`, sum(`price`) AS `sum` FROM `orders` AS `Orders` GROUP BY name HAVING COUNT('name')>1;\n\t```\n\n\t1.10.2 Lodashjs\n\t[文档](https://www.lodashjs.com/docs/4.17.5.html)\n\t\n\t_.indexOf(array, value, [fromIndex=0])\n\tnumber): Returns the index of the matched value, else -1.\n\t``` bash\n\t_.indexOf([1, 2, 1, 2], 2);\n\t// => 1\n\t \n\t// Search from the `fromIndex`.\n\t_.indexOf([1, 2, 1, 2], 2, 2);\n\t// => 3\n\t```\n\t_.dropRight(array, [n=1])\n\t(Array): Returns the slice of array.\n\t``` bash\n\t_.dropRight([1, 2, 3]);\n\t// => [1, 2]\n\t \n\t_.dropRight([1, 2, 3], 2);\n\t// => [1]\n\n\t_.dropRight([1, 2, 3], 0);\n\t// => [1, 2, 3]\n\t```\n\t_.filter(collection, [predicate=_.identity])\n\t(Array): Returns the new filtered array.\n\t``` bash\n\tvar users = [\n\t  { 'user': 'barney', 'age': 36, 'active': true },\n\t  { 'user': 'fred',   'age': 40, 'active': false }\n\t];\n\t \n\t_.filter(users, function(o) { return !o.active; });\n\t// => objects for ['fred']\n\t```\n\t_.find(collection, [predicate=_.identity], [fromIndex=0])\n\t(*): Returns the matched element, else undefined.\n\t``` bash\n\t\tvar users = [\n\t  { 'user': 'barney',  'age': 36, 'active': true },\n\t  { 'user': 'fred',    'age': 40, 'active': false },\n\t  { 'user': 'pebbles', 'age': 1,  'active': true }\n\t];\n\t \n\t_.find(users, function(o) { return o.age < 40; });\n\t// => object for 'barney'\n\t```\n\t_.forEach(collection, [iteratee=_.identity])\n\t``` bash\n\t_.forEach([1, 2], function(value) {\n\t  console.log(value);\n\t});\n\t// => Logs `1` then `2`.\n\t \n\t_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n\t  console.log(key);\n\t});\n\t```\n\t_.groupBy(collection, [iteratee=_.identity])\n\t(Object): Returns the composed aggregate object.\n\t``` bash\n\t_.groupBy([6.1, 4.2, 6.3], Math.floor);\n\t// => { '4': [4.2], '6': [6.1, 6.3] }\n\t \n\t// The `_.property` iteratee shorthand.\n\t_.groupBy(['one', 'two', 'three'], 'length');\n\t// => { '3': ['one', 'two'], '5': ['three'] }\n\t```\n\t#Promise.map Promise.all 相当于事务 \n\t_.map(collection, [iteratee=_.identity])\n\t(Array): Returns the new mapped array.\n\t``` bash\n\tfunction square(n) {\n\t  return n * n;\n\t}\n\t\n\t_.map([4, 8], square);\n\t// => [16, 64]\n\t \n\t_.map({ 'a': 4, 'b': 8 }, square);\n\t// => [16, 64] (iteration order is not guaranteed)\n\t```\n\t#Promise.reduce是顺序执行\n\t_.reduce(collection, [iteratee=_.identity], [accumulator])  -\n\t(*): Returns the accumulated value.\n\t``` bash\n\tf_.reduce([1, 2], function(sum, n) {\n\t  return sum + n;\n\t}, 0);\n\t// => 3\n\t```\n\t_.isEmpty(value)\n\t(boolean): Returns true if value is empty, else false.\n\t``` bash\n\t_.isEmpty(null);\n\t// => true\n\t \n\t_.isEmpty(true);\n\t// => true\n\t \n\t_.isEmpty(1);\n\t// => true\n\t \n\t_.isEmpty([1, 2, 3]);\n\t// => false\n\t \n\t_.isEmpty({ 'a': 1 });\n\t// => false\n\t```\n\t项目案例 略\n\n\t1.10.3 Moment.js\n\t[文档](http://momentjs.cn)\n\t案例使用\n\t``` bash\n\tmoment(event.start_time).startOf('day')/1000;\n\tmoment.unix(moment().startOf('month')/1000).utcOffset(config.TIME_ZONE_DIFF).format(\"YYYY-MM-DD HH:mm:ss\");\n\t```\n\n","slug":"node笔记","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91e000n1d8nbo5phz8e","content":"<p>第一章 node简介<br>1.1 node的特点<br>    1.1.1 异步I/O 绝大多数操作以异步方式进行调用<br>    1.1.2 事件与回调函数<br>    1.1.3 单线程，但是可以用WebWorkers的方式解决单线程的问题（子进程），用Master-Worker用master统一管理子进程<br>    1.1.4 跨平台<br>    1.1.5 c++速度大约是node的2.5倍</p>\n<p>1.2 模块机制<br>    1.2.1 分为核心模块和文件模块，require没带路径的为核心模块，直接加载进内存，带路径的为文件模块,核心模块中有c++和javascript两部分，其中buffer、crypto、evals、fs、os、等都是c++部分的<br>    1.2.2 npm安装的核心模块插件在package.json中定义</p>\n<p>1.3 异步I/O<br>    1.3.1 操作系统内核对I/O只有：阻塞I/O和非阻塞I/O，node中的异步I/O模型由事件循环、观察者、请求对象、I/O线程池<br>    整个系统可以理解为事件循环相当于厨子，不停的询问是否有新的订单，观察者相当于收银员，收到用户的订单将订单分给厨子，而订单相当于请求对象，参数、方法、回调函数斗封装在请求对象中,<br>    以上是异步I/O的第一步，io线程池相当于放订单的桌子，  请求对象-&gt;I/O线程池-&gt;观察者-&gt;事件循环<br>    1.3.2 非异步的I/O主要是setTimeout(),setInterval(),setImmediate(),process.nextTick()</p>\n<a id=\"more\"></a>\n<p>1.4 异步编程<br>    1.4.1 异步编程的解决方案分为3个：<br>        1）事件发布/订阅模式<br>        2）Promise/Deferred模式<br>        3）流程控制库<br>    1.4.2 事件发布/订阅模式<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//订阅</span><br><span class=\"line\">emitter.on(<span class=\"string\">\"event1\"</span>,<span class=\"keyword\">function</span>(message)&#123;</span><br><span class=\"line\">\tconsole.log(message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//发布</span><br><span class=\"line\">emitter.on(<span class=\"string\">'event1'</span>,<span class=\"string\">\"I Love you\"</span>);</span><br></pre></td></tr></table></figure></p>\n<pre><code>1）继承events模块\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var events = require(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">Stream</span></span>()&#123;</span><br><span class=\"line\">\tevents.EventEmitter.call(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(Stream,events.EventEmitter);</span><br></pre></td></tr></table></figure>\n\n2)利用事件队列解决崩溃问题\n事件发布/订阅模式中一般只有一个once()方法，用一个『状态锁』或者『事件队列』防止崩溃\n状态锁\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var status = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">var select = <span class=\"keyword\">function</span>(callback)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(status == <span class=\"string\">\"ready\"</span> )&#123;</span><br><span class=\"line\">\t\tstatus = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">\t\tdb.select(<span class=\"string\">\"SQL\"</span>, <span class=\"keyword\">function</span>(results)&#123;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">\t\t\tcallback(results);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n事件队列\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = new events.EventEmitter();</span><br><span class=\"line\">var status = <span class=\"keyword\">function</span> (callback) </span><br><span class=\"line\">\tproxy.once(<span class=\"string\">\"selected\"</span>, callback);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(status === <span class=\"string\">\"ready\"</span>)&#123;</span><br><span class=\"line\">\t\tstatus = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">\t\tdb.select(<span class=\"string\">\"SQL\"</span>, <span class=\"keyword\">function</span>(result)&#123;</span><br><span class=\"line\">\t\t\tproxy.emit(<span class=\"string\">\"selected\"</span>,result);</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n3）多异步之间的协作方案\n借组一个第三方函数和第三方变量来处理异步协作的结果\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var after = <span class=\"keyword\">function</span> (<span class=\"built_in\">times</span>,callback)&#123;</span><br><span class=\"line\">\tvar count = 0, results = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"keyword\">function</span> (key, value)&#123;</span><br><span class=\"line\">\t\tresult[key] = value;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count === <span class=\"built_in\">times</span>)&#123;</span><br><span class=\"line\">\t\t\tcallback(results);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var <span class=\"keyword\">done</span> = after(<span class=\"built_in\">times</span>, render);</span><br></pre></td></tr></table></figure>\n\n1.4.3 Promise/Deferred模式\nPromise是高级接口，事件是低级接口，Promise更像链表\n1.4.4 async流程控制模块\n1）async的series()方法实现串行（不传参）\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async.series([</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],<span class=\"keyword\">function</span> (err,result)&#123;</span><br><span class=\"line\">\t//result = [file1.txt,file2.txt]等价于先处理file1.txt，在处理file2.txt，错误回调</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n2）async的parallel()方法实现并行\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async.parallel([</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],<span class=\"keyword\">function</span> (err,result)&#123;</span><br><span class=\"line\">\t//result = [file1.txt,file2.txt]等价于并行处理file1.txt，在处理file2.txt，错误回调</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n3）async的waterfall()方法实现串行（传参）\n略\n4）async.auto()可以根据依赖关系自动分析，以最佳顺序执行\n略\n1.4.5 流程控制模块Step\n1)Step接受任意数量任务，所有任务传行执行\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step(</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,this);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,this);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"keyword\">done</span>(err, content) &#123;</span><br><span class=\"line\">\t\t console.log(content);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n2)Step实现异步任务并行执行要用this的parallel()\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step(</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,this.parallel());</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,this.parallel());</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"keyword\">done</span>(err, content) &#123;</span><br><span class=\"line\">\t\t console.log(arguments);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n1.4.6流程控制模块wind\n1)wind的$await()方法实现异步等待\n2）wind的whenAll()处理并发\n</code></pre><p>1.5 异步并发控制<br>    1.5.1 bagpipe解决办法（API添加过载保护，用队列控制并发）<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Bagpipe = require(<span class=\"string\">'bagpipe'</span>);</span><br><span class=\"line\">//设定最大并发数为10</span><br><span class=\"line\">var bagpipe = new Bagpipe(10);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i&lt; 100;i++)&#123;</span><br><span class=\"line\">\tbagpipe.push(async, <span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bagpipe.on(<span class=\"string\">'full'</span>,<span class=\"keyword\">function</span> (length)&#123;</span><br><span class=\"line\">\tconsole.warn(<span class=\"string\">'底层系统处理不及时'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.5.2 拒绝模式\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bagpipe = new Bagpipe(10,&#123;</span><br><span class=\"line\">\trefuse: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.5.3 超时控制\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bagpipe = new Bagpipe(10, &#123;</span><br><span class=\"line\">\ttimeout: 3000</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.6 内存管理<br>    1.6.1 v8内存分为新生代和老生代的<br>    node –max-old-space-size 2048 xxx.js 调整内存大小执行某个脚本<br>    v8堆内存64位系统是1.4G,32位系统是0.7G<br>    新生代内存的回收机制是将堆内存一分为2，使用中的是From，空的是to，进行垃圾回收时，是将from中的存活对象复制到to中，然后释放非存活的，同时from和to对换，缺点是只能使用一半的内存空间<br>    老生带内存的回收机制是将from中的使用的标记，回收未使用的<br>    1.6.2 外部访问内部的变量的方法叫闭包   还有的说是内部变量无法被外部访问的过程叫闭包<br>    1.6.3 查看内存使用process.memoryUsage() os.totalmem os.freemem </p>\n<p>1.7 Buffer<br>    1.7.1 Buffer与字符串转换<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Buffer(str, [encoding]);</span><br><span class=\"line\">buf.write(string, [offset], [length], [encodeing]);</span><br><span class=\"line\">buf.tostring([encoding], [start], [end]);</span><br></pre></td></tr></table></figure></p>\n<p>1.8 网络<br>    1.8.1 tcp协议中的osi模型（分为 物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）<br>    server<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var net = require(<span class=\"string\">'net'</span>);</span><br><span class=\"line\">var server = net.createServer(<span class=\"keyword\">function</span>(socket)&#123;</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'end'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.write(<span class=\"string\">'data'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<pre><code>client\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var net = require(<span class=\"string\">'net'</span>);</span><br><span class=\"line\">var client = net.connect(&#123;port: 8124&#125;,<span class=\"keyword\">function</span>(socket)&#123;</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'end'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.write(<span class=\"string\">'data'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.8.2 UDP是用户数据包协议，一个套接字可以与多个UDP通信\nserver\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dgrm = require(<span class=\"string\">\"dgrm\"</span>);</span><br><span class=\"line\">var server = dgrm.createSocket(<span class=\"string\">\"udp4\"</span>);</span><br><span class=\"line\">server.on(<span class=\"string\">\"message\"</span>, <span class=\"keyword\">function</span> (msg, rinfo)&#123;</span><br><span class=\"line\">\tconsole.log(<span class=\"string\">\"xxx\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">\tvar address = server.address();</span><br><span class=\"line\">\tconsole.log(<span class=\"string\">\"xxx\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.bind(41234);</span><br></pre></td></tr></table></figure>\n\nclient\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dgram = require(<span class=\"string\">'dgram'</span>);</span><br><span class=\"line\">var messgae = new Buffer(<span class=\"string\">\"xxxx\"</span>);</span><br><span class=\"line\">var client = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</span><br><span class=\"line\">clinet.send(message, 0, message.length, 41234, <span class=\"string\">\"localhost\"</span>, <span class=\"keyword\">function</span>(err,bytes)&#123;</span><br><span class=\"line\">\tclient.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.8.3 HTTP是构建在TCP之上属于应用层协议\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https_request : <span class=\"keyword\">function</span>(host, path, post_data, cb)&#123;</span><br><span class=\"line\">    var reqdata = JSON.stringify(post_data);</span><br><span class=\"line\">\tvar options = &#123;</span><br><span class=\"line\">\t    hostname: host,</span><br><span class=\"line\">\t    port: 443,</span><br><span class=\"line\">\t    method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">\t    path: path,</span><br><span class=\"line\">\t    headers: &#123;</span><br><span class=\"line\">\t        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar req_time_out = setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    \t\treq.abort();</span><br><span class=\"line\">    \t\tcb(400, &#123;code:400,message:<span class=\"string\">'请求超时'</span>&#125;);</span><br><span class=\"line\">    \t\tlogger.n.info(<span class=\"string\">'Got Request Timeout.'</span>);</span><br><span class=\"line\">\t&#125;, 10000);</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar req = https.request(options, <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">\t\tclearTimeout(req_time_out);</span><br><span class=\"line\">\t\t//等待响应60秒超时</span><br><span class=\"line\">\t\tvar res_time_out = setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">\t\t\tres.destroy();</span><br><span class=\"line\">\t\t\tcb(400, &#123;code:400,message:<span class=\"string\">'响应超时'</span>&#125;);</span><br><span class=\"line\">\t\t\tlogger.n.info(<span class=\"string\">'Got Response Timeout.'</span>);</span><br><span class=\"line\">\t\t&#125;, 60000);</span><br><span class=\"line\">\t\tvar status_code = res.statusCode;</span><br><span class=\"line\">\t\tvar body = null;</span><br><span class=\"line\">\t\tlogger.n.info(<span class=\"string\">\"Got status_code: \"</span> + status_code);</span><br><span class=\"line\">\t\tres.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">            body = JSON.parse(data);</span><br><span class=\"line\">        &#125;).on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        \tclearTimeout(res_time_out);</span><br><span class=\"line\">        \tcb(status_code, body);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">\t&#125;).on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span>(e) &#123;</span><br><span class=\"line\">\t\tcb(400, &#123;code:400,message:e.message&#125;);</span><br><span class=\"line\">\t\tlogger.n.info(<span class=\"string\">\"Got error: \"</span> + e.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\treq.write(reqdata);</span><br><span class=\"line\">\treq.end();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n1.8.4 WebSocket\nclient\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var client= new net.Socket();</span><br><span class=\"line\">var flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">var port = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">'connect'</span>,<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">    //正常连接</span><br><span class=\"line\">    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    logger.boot.info(<span class=\"string\">'socket Connection succeed'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    //flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.warn(<span class=\"string\">'!!!!!tcp_client disconnected'</span>);</span><br><span class=\"line\">    setTimeout(Fight_Service.tcp_reconnect, 1000);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">    //得到服务端返回来的数据</span><br><span class=\"line\">    Fight_Service.processResp(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(error)&#123;</span><br><span class=\"line\">    //错误出现之后关闭连接</span><br><span class=\"line\">    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.error(<span class=\"string\">'socket error:'</span> + error);</span><br><span class=\"line\">    client.destroy();</span><br><span class=\"line\">    setTimeout(Fight_Service.tcp_reconnect, 1000);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'close'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    //正常关闭连接</span><br><span class=\"line\">    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.warn(<span class=\"string\">'socket Connection closed'</span>);</span><br><span class=\"line\">    client.destroy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Fight_Service.tcp_reconnect = <span class=\"keyword\">function</span>(worker_id)&#123;</span><br><span class=\"line\">   //创建socket客户端</span><br><span class=\"line\">   client.setEncoding(<span class=\"string\">'binary'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (port == 0 )&#123;</span><br><span class=\"line\">       //连接到服务端115.159.186.60 8400</span><br><span class=\"line\">       // logger.boot.info(<span class=\"string\">\"socket process_work_id:\"</span> + worker_id);</span><br><span class=\"line\">       worker_id = worker_id % 8;</span><br><span class=\"line\">       port = 8400 + worker_id;</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       logger.boot.info(<span class=\"string\">\"socket tcp_reconnect\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   logger.boot.info(<span class=\"string\">\"socket_port_id:\"</span> + port);</span><br><span class=\"line\"></span><br><span class=\"line\">   client.connect(port,<span class=\"string\">\"10.96.71.91\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.9 多进程<br>    1.9.1 child_process模块<br>    1）spawn()启动一个子进程执行命令，无回调，无超时<br>    2）exec()启动一个子进程执行命令，有回调，有超时<br>    3）execFile()启动一个子进程执行可执行文件<br>    4）fork()启动node子进程执行js文件模块<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fork = require(<span class=\"string\">'child_process'</span>).fork;</span><br><span class=\"line\">var cpus = require(<span class=\"string\">'os'</span>).cpus();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i &lt; cpus.length; i++)&#123;</span><br><span class=\"line\">\tfork(<span class=\"string\">'./worker.js'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.9.2 进程间通信IPC，主线程与工作线程之间通过onmessage()和postMessage()进行通信，子进程对象则由send()方法实现主进程向子进程发送数据\n1.9.3 句柄是一种用来标识资源的引用，用来拓展有限的文件描述符\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.send(message,[sandHandle])如（child.send(<span class=\"string\">'server'</span>,server)）;</span><br><span class=\"line\">子进程代码</span><br><span class=\"line\">process.on(<span class=\"string\">'message'</span>,<span class=\"keyword\">function</span>(m, server)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(m == <span class=\"string\">'server'</span>)&#123;</span><br><span class=\"line\">\txxxxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n1.9.4 父进程可以通过kill()方法给子进程发送一个SIGTERM信号杀进程\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chid.kill([signal]);</span><br><span class=\"line\">process.kill(pid, [signal]);</span><br><span class=\"line\">``` </span><br><span class=\"line\">在退出中加入自动重启可能会有新用户进来请求丢失的情况，工作进程在得知退出时，向主进程发送一个自杀信号（达到先创建在退出进程）</span><br><span class=\"line\">``` bash</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * cluster mode</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">if</span> (   opts.get(<span class=\"string\">'cluster'</span>)</span><br><span class=\"line\">    || config.APP_CLUSTER.ENABLE) &#123;</span><br><span class=\"line\">    var cluster = require(<span class=\"string\">'cluster'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cluster.isMaster) &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'[CLUSTER MODE] MASTER'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var i=0; i&lt;config.APP_CLUSTER.NUM; i++) &#123;</span><br><span class=\"line\">            cluster.fork();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cluster.on(<span class=\"string\">'exit'</span>, <span class=\"keyword\">function</span>(worker, code, signal) &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'worker '</span> + worker.process.pid + <span class=\"string\">' died'</span>);</span><br><span class=\"line\">            cluster.fork();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(<span class=\"string\">'[CLUSTER MODE] WORKER'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.10 插件<br>    1.10.1 Sequelizejs  此插件在option索引的位置千万不能写错，写错有大几率导致db堵塞<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\"> \t\tattributes: [<span class=\"string\">'foo'</span>, [<span class=\"string\">'bar'</span>, <span class=\"string\">'baz'</span>]]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT foo, bar AS baz ...</span><br><span class=\"line\"></span><br><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: [[sequelize.fn(<span class=\"string\">'COUNT'</span>, sequelize.col(<span class=\"string\">'hats'</span>)), <span class=\"string\">'no_hats'</span>]]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT COUNT(hats) AS no_hats ...</span><br><span class=\"line\"></span><br><span class=\"line\">Post.findAll(&#123;</span><br><span class=\"line\">  <span class=\"built_in\">where</span>: &#123;</span><br><span class=\"line\">    [Op.or]: [&#123;authorId: 12&#125;, &#123;authorId: 13&#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT * FROM post WHERE authorId = 12 OR authorId = 13;</span><br><span class=\"line\"></span><br><span class=\"line\">Order.findAll(&#123;attributes:[<span class=\"string\">'name'</span>, [sequelize.fn(<span class=\"string\">'SUM'</span>, sequelize.col(<span class=\"string\">'price'</span>)), <span class=\"string\">'sum'</span>]], group:<span class=\"string\">'name'</span>, having:[<span class=\"string\">'COUNT(?)&gt;?'</span>, <span class=\"string\">'name'</span>, 1], raw:<span class=\"literal\">true</span>&#125;).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(result)&#123;</span><br><span class=\"line\"> console.log(result);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">SELECT `name`, sum(`price`) AS `sum` FROM `orders` AS `Orders` GROUP BY name HAVING COUNT(<span class=\"string\">'name'</span>)&gt;1;</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.10.2 Lodashjs\n[文档](https://www.lodashjs.com/docs/4.17.5.html)\n\n_.indexOf(array, value, [fromIndex=0])\nnumber): Returns the index of the matched value, else -1.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf([1, 2, 1, 2], 2);</span><br><span class=\"line\">// =&gt; 1</span><br><span class=\"line\"> </span><br><span class=\"line\">// Search from the `fromIndex`.</span><br><span class=\"line\">_.indexOf([1, 2, 1, 2], 2, 2);</span><br><span class=\"line\">// =&gt; 3</span><br></pre></td></tr></table></figure>\n\n_.dropRight(array, [n=1])\n(Array): Returns the slice of array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.dropRight([1, 2, 3]);</span><br><span class=\"line\">// =&gt; [1, 2]</span><br><span class=\"line\"> </span><br><span class=\"line\">_.dropRight([1, 2, 3], 2);</span><br><span class=\"line\">// =&gt; [1]</span><br><span class=\"line\"></span><br><span class=\"line\">_.dropRight([1, 2, 3], 0);</span><br><span class=\"line\">// =&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n\n_.filter(collection, [predicate=_.identity])\n(Array): Returns the new filtered array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>, <span class=\"string\">'age'</span>: 36, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,   <span class=\"string\">'age'</span>: 40, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"> </span><br><span class=\"line\">_.filter(users, <span class=\"keyword\">function</span>(o) &#123; <span class=\"built_in\">return</span> !o.active; &#125;);</span><br><span class=\"line\">// =&gt; objects <span class=\"keyword\">for</span> [<span class=\"string\">'fred'</span>]</span><br></pre></td></tr></table></figure>\n\n_.find(collection, [predicate=_.identity], [fromIndex=0])\n(*): Returns the matched element, else undefined.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tvar users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: 36, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: 40, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: 1,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"> </span><br><span class=\"line\">_.find(users, <span class=\"keyword\">function</span>(o) &#123; <span class=\"built_in\">return</span> o.age &lt; 40; &#125;);</span><br><span class=\"line\">// =&gt; object <span class=\"keyword\">for</span> <span class=\"string\">'barney'</span></span><br></pre></td></tr></table></figure>\n\n_.forEach(collection, [iteratee=_.identity])\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.forEach([1, 2], <span class=\"keyword\">function</span>(value) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// =&gt; Logs `1` <span class=\"keyword\">then</span> `2`.</span><br><span class=\"line\"> </span><br><span class=\"line\">_.forEach(&#123; <span class=\"string\">'a'</span>: 1, <span class=\"string\">'b'</span>: 2 &#125;, <span class=\"keyword\">function</span>(value, key) &#123;</span><br><span class=\"line\">  console.log(key);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n_.groupBy(collection, [iteratee=_.identity])\n(Object): Returns the composed aggregate object.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([6.1, 4.2, 6.3], Math.floor);</span><br><span class=\"line\">// =&gt; &#123; <span class=\"string\">'4'</span>: [4.2], <span class=\"string\">'6'</span>: [6.1, 6.3] &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// The `_.property` iteratee shorthand.</span><br><span class=\"line\">_.groupBy([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], <span class=\"string\">'length'</span>);</span><br><span class=\"line\">// =&gt; &#123; <span class=\"string\">'3'</span>: [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>], <span class=\"string\">'5'</span>: [<span class=\"string\">'three'</span>] &#125;</span><br></pre></td></tr></table></figure>\n\n#Promise.map Promise.all 相当于事务 \n_.map(collection, [iteratee=_.identity])\n(Array): Returns the new mapped array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> square(n) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> n * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_.map([4, 8], square);</span><br><span class=\"line\">// =&gt; [16, 64]</span><br><span class=\"line\"> </span><br><span class=\"line\">_.map(&#123; <span class=\"string\">'a'</span>: 4, <span class=\"string\">'b'</span>: 8 &#125;, square);</span><br><span class=\"line\">// =&gt; [16, 64] (iteration order is not guaranteed)</span><br></pre></td></tr></table></figure>\n\n#Promise.reduce是顺序执行\n_.reduce(collection, [iteratee=_.identity], [accumulator])  -\n(*): Returns the accumulated value.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f_.reduce([1, 2], <span class=\"keyword\">function</span>(sum, n) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> sum + n;</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">// =&gt; 3</span><br></pre></td></tr></table></figure>\n\n_.isEmpty(value)\n(boolean): Returns true if value is empty, else false.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isEmpty(null);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(<span class=\"literal\">true</span>);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(1);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty([1, 2, 3]);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(&#123; <span class=\"string\">'a'</span>: 1 &#125;);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n项目案例 略\n\n1.10.3 Moment.js\n[文档](http://momentjs.cn)\n案例使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment(event.start_time).startOf(<span class=\"string\">'day'</span>)/1000;</span><br><span class=\"line\">moment.unix(moment().startOf(<span class=\"string\">'month'</span>)/1000).utcOffset(config.TIME_ZONE_DIFF).format(<span class=\"string\">\"YYYY-MM-DD HH:mm:ss\"</span>);</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<p>第一章 node简介<br>1.1 node的特点<br>    1.1.1 异步I/O 绝大多数操作以异步方式进行调用<br>    1.1.2 事件与回调函数<br>    1.1.3 单线程，但是可以用WebWorkers的方式解决单线程的问题（子进程），用Master-Worker用master统一管理子进程<br>    1.1.4 跨平台<br>    1.1.5 c++速度大约是node的2.5倍</p>\n<p>1.2 模块机制<br>    1.2.1 分为核心模块和文件模块，require没带路径的为核心模块，直接加载进内存，带路径的为文件模块,核心模块中有c++和javascript两部分，其中buffer、crypto、evals、fs、os、等都是c++部分的<br>    1.2.2 npm安装的核心模块插件在package.json中定义</p>\n<p>1.3 异步I/O<br>    1.3.1 操作系统内核对I/O只有：阻塞I/O和非阻塞I/O，node中的异步I/O模型由事件循环、观察者、请求对象、I/O线程池<br>    整个系统可以理解为事件循环相当于厨子，不停的询问是否有新的订单，观察者相当于收银员，收到用户的订单将订单分给厨子，而订单相当于请求对象，参数、方法、回调函数斗封装在请求对象中,<br>    以上是异步I/O的第一步，io线程池相当于放订单的桌子，  请求对象-&gt;I/O线程池-&gt;观察者-&gt;事件循环<br>    1.3.2 非异步的I/O主要是setTimeout(),setInterval(),setImmediate(),process.nextTick()</p>","more":"<p>1.4 异步编程<br>    1.4.1 异步编程的解决方案分为3个：<br>        1）事件发布/订阅模式<br>        2）Promise/Deferred模式<br>        3）流程控制库<br>    1.4.2 事件发布/订阅模式<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//订阅</span><br><span class=\"line\">emitter.on(<span class=\"string\">\"event1\"</span>,<span class=\"keyword\">function</span>(message)&#123;</span><br><span class=\"line\">\tconsole.log(message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//发布</span><br><span class=\"line\">emitter.on(<span class=\"string\">'event1'</span>,<span class=\"string\">\"I Love you\"</span>);</span><br></pre></td></tr></table></figure></p>\n<pre><code>1）继承events模块\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var events = require(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">Stream</span></span>()&#123;</span><br><span class=\"line\">\tevents.EventEmitter.call(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(Stream,events.EventEmitter);</span><br></pre></td></tr></table></figure>\n\n2)利用事件队列解决崩溃问题\n事件发布/订阅模式中一般只有一个once()方法，用一个『状态锁』或者『事件队列』防止崩溃\n状态锁\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var status = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">var select = <span class=\"keyword\">function</span>(callback)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(status == <span class=\"string\">\"ready\"</span> )&#123;</span><br><span class=\"line\">\t\tstatus = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">\t\tdb.select(<span class=\"string\">\"SQL\"</span>, <span class=\"keyword\">function</span>(results)&#123;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">\t\t\tcallback(results);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n事件队列\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = new events.EventEmitter();</span><br><span class=\"line\">var status = <span class=\"keyword\">function</span> (callback) </span><br><span class=\"line\">\tproxy.once(<span class=\"string\">\"selected\"</span>, callback);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(status === <span class=\"string\">\"ready\"</span>)&#123;</span><br><span class=\"line\">\t\tstatus = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">\t\tdb.select(<span class=\"string\">\"SQL\"</span>, <span class=\"keyword\">function</span>(result)&#123;</span><br><span class=\"line\">\t\t\tproxy.emit(<span class=\"string\">\"selected\"</span>,result);</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n3）多异步之间的协作方案\n借组一个第三方函数和第三方变量来处理异步协作的结果\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var after = <span class=\"keyword\">function</span> (<span class=\"built_in\">times</span>,callback)&#123;</span><br><span class=\"line\">\tvar count = 0, results = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"keyword\">function</span> (key, value)&#123;</span><br><span class=\"line\">\t\tresult[key] = value;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count === <span class=\"built_in\">times</span>)&#123;</span><br><span class=\"line\">\t\t\tcallback(results);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var <span class=\"keyword\">done</span> = after(<span class=\"built_in\">times</span>, render);</span><br></pre></td></tr></table></figure>\n\n1.4.3 Promise/Deferred模式\nPromise是高级接口，事件是低级接口，Promise更像链表\n1.4.4 async流程控制模块\n1）async的series()方法实现串行（不传参）\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async.series([</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],<span class=\"keyword\">function</span> (err,result)&#123;</span><br><span class=\"line\">\t//result = [file1.txt,file2.txt]等价于先处理file1.txt，在处理file2.txt，错误回调</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n2）async的parallel()方法实现并行\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async.parallel([</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],<span class=\"keyword\">function</span> (err,result)&#123;</span><br><span class=\"line\">\t//result = [file1.txt,file2.txt]等价于并行处理file1.txt，在处理file2.txt，错误回调</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n3）async的waterfall()方法实现串行（传参）\n略\n4）async.auto()可以根据依赖关系自动分析，以最佳顺序执行\n略\n1.4.5 流程控制模块Step\n1)Step接受任意数量任务，所有任务传行执行\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step(</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,this);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,this);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"keyword\">done</span>(err, content) &#123;</span><br><span class=\"line\">\t\t console.log(content);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n2)Step实现异步任务并行执行要用this的parallel()\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step(</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,this.parallel());</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,this.parallel());</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"keyword\">done</span>(err, content) &#123;</span><br><span class=\"line\">\t\t console.log(arguments);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n1.4.6流程控制模块wind\n1)wind的$await()方法实现异步等待\n2）wind的whenAll()处理并发\n</code></pre><p>1.5 异步并发控制<br>    1.5.1 bagpipe解决办法（API添加过载保护，用队列控制并发）<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Bagpipe = require(<span class=\"string\">'bagpipe'</span>);</span><br><span class=\"line\">//设定最大并发数为10</span><br><span class=\"line\">var bagpipe = new Bagpipe(10);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i&lt; 100;i++)&#123;</span><br><span class=\"line\">\tbagpipe.push(async, <span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bagpipe.on(<span class=\"string\">'full'</span>,<span class=\"keyword\">function</span> (length)&#123;</span><br><span class=\"line\">\tconsole.warn(<span class=\"string\">'底层系统处理不及时'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.5.2 拒绝模式\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bagpipe = new Bagpipe(10,&#123;</span><br><span class=\"line\">\trefuse: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.5.3 超时控制\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bagpipe = new Bagpipe(10, &#123;</span><br><span class=\"line\">\ttimeout: 3000</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.6 内存管理<br>    1.6.1 v8内存分为新生代和老生代的<br>    node –max-old-space-size 2048 xxx.js 调整内存大小执行某个脚本<br>    v8堆内存64位系统是1.4G,32位系统是0.7G<br>    新生代内存的回收机制是将堆内存一分为2，使用中的是From，空的是to，进行垃圾回收时，是将from中的存活对象复制到to中，然后释放非存活的，同时from和to对换，缺点是只能使用一半的内存空间<br>    老生带内存的回收机制是将from中的使用的标记，回收未使用的<br>    1.6.2 外部访问内部的变量的方法叫闭包   还有的说是内部变量无法被外部访问的过程叫闭包<br>    1.6.3 查看内存使用process.memoryUsage() os.totalmem os.freemem </p>\n<p>1.7 Buffer<br>    1.7.1 Buffer与字符串转换<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Buffer(str, [encoding]);</span><br><span class=\"line\">buf.write(string, [offset], [length], [encodeing]);</span><br><span class=\"line\">buf.tostring([encoding], [start], [end]);</span><br></pre></td></tr></table></figure></p>\n<p>1.8 网络<br>    1.8.1 tcp协议中的osi模型（分为 物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）<br>    server<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var net = require(<span class=\"string\">'net'</span>);</span><br><span class=\"line\">var server = net.createServer(<span class=\"keyword\">function</span>(socket)&#123;</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'end'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.write(<span class=\"string\">'data'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<pre><code>client\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var net = require(<span class=\"string\">'net'</span>);</span><br><span class=\"line\">var client = net.connect(&#123;port: 8124&#125;,<span class=\"keyword\">function</span>(socket)&#123;</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'end'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.write(<span class=\"string\">'data'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.8.2 UDP是用户数据包协议，一个套接字可以与多个UDP通信\nserver\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dgrm = require(<span class=\"string\">\"dgrm\"</span>);</span><br><span class=\"line\">var server = dgrm.createSocket(<span class=\"string\">\"udp4\"</span>);</span><br><span class=\"line\">server.on(<span class=\"string\">\"message\"</span>, <span class=\"keyword\">function</span> (msg, rinfo)&#123;</span><br><span class=\"line\">\tconsole.log(<span class=\"string\">\"xxx\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">\tvar address = server.address();</span><br><span class=\"line\">\tconsole.log(<span class=\"string\">\"xxx\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.bind(41234);</span><br></pre></td></tr></table></figure>\n\nclient\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dgram = require(<span class=\"string\">'dgram'</span>);</span><br><span class=\"line\">var messgae = new Buffer(<span class=\"string\">\"xxxx\"</span>);</span><br><span class=\"line\">var client = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</span><br><span class=\"line\">clinet.send(message, 0, message.length, 41234, <span class=\"string\">\"localhost\"</span>, <span class=\"keyword\">function</span>(err,bytes)&#123;</span><br><span class=\"line\">\tclient.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.8.3 HTTP是构建在TCP之上属于应用层协议\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https_request : <span class=\"keyword\">function</span>(host, path, post_data, cb)&#123;</span><br><span class=\"line\">    var reqdata = JSON.stringify(post_data);</span><br><span class=\"line\">\tvar options = &#123;</span><br><span class=\"line\">\t    hostname: host,</span><br><span class=\"line\">\t    port: 443,</span><br><span class=\"line\">\t    method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">\t    path: path,</span><br><span class=\"line\">\t    headers: &#123;</span><br><span class=\"line\">\t        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar req_time_out = setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    \t\treq.abort();</span><br><span class=\"line\">    \t\tcb(400, &#123;code:400,message:<span class=\"string\">'请求超时'</span>&#125;);</span><br><span class=\"line\">    \t\tlogger.n.info(<span class=\"string\">'Got Request Timeout.'</span>);</span><br><span class=\"line\">\t&#125;, 10000);</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar req = https.request(options, <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">\t\tclearTimeout(req_time_out);</span><br><span class=\"line\">\t\t//等待响应60秒超时</span><br><span class=\"line\">\t\tvar res_time_out = setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">\t\t\tres.destroy();</span><br><span class=\"line\">\t\t\tcb(400, &#123;code:400,message:<span class=\"string\">'响应超时'</span>&#125;);</span><br><span class=\"line\">\t\t\tlogger.n.info(<span class=\"string\">'Got Response Timeout.'</span>);</span><br><span class=\"line\">\t\t&#125;, 60000);</span><br><span class=\"line\">\t\tvar status_code = res.statusCode;</span><br><span class=\"line\">\t\tvar body = null;</span><br><span class=\"line\">\t\tlogger.n.info(<span class=\"string\">\"Got status_code: \"</span> + status_code);</span><br><span class=\"line\">\t\tres.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">            body = JSON.parse(data);</span><br><span class=\"line\">        &#125;).on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        \tclearTimeout(res_time_out);</span><br><span class=\"line\">        \tcb(status_code, body);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">\t&#125;).on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span>(e) &#123;</span><br><span class=\"line\">\t\tcb(400, &#123;code:400,message:e.message&#125;);</span><br><span class=\"line\">\t\tlogger.n.info(<span class=\"string\">\"Got error: \"</span> + e.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\treq.write(reqdata);</span><br><span class=\"line\">\treq.end();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n1.8.4 WebSocket\nclient\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var client= new net.Socket();</span><br><span class=\"line\">var flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">var port = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">'connect'</span>,<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">    //正常连接</span><br><span class=\"line\">    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    logger.boot.info(<span class=\"string\">'socket Connection succeed'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    //flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.warn(<span class=\"string\">'!!!!!tcp_client disconnected'</span>);</span><br><span class=\"line\">    setTimeout(Fight_Service.tcp_reconnect, 1000);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">    //得到服务端返回来的数据</span><br><span class=\"line\">    Fight_Service.processResp(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(error)&#123;</span><br><span class=\"line\">    //错误出现之后关闭连接</span><br><span class=\"line\">    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.error(<span class=\"string\">'socket error:'</span> + error);</span><br><span class=\"line\">    client.destroy();</span><br><span class=\"line\">    setTimeout(Fight_Service.tcp_reconnect, 1000);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'close'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    //正常关闭连接</span><br><span class=\"line\">    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.warn(<span class=\"string\">'socket Connection closed'</span>);</span><br><span class=\"line\">    client.destroy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Fight_Service.tcp_reconnect = <span class=\"keyword\">function</span>(worker_id)&#123;</span><br><span class=\"line\">   //创建socket客户端</span><br><span class=\"line\">   client.setEncoding(<span class=\"string\">'binary'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (port == 0 )&#123;</span><br><span class=\"line\">       //连接到服务端115.159.186.60 8400</span><br><span class=\"line\">       // logger.boot.info(<span class=\"string\">\"socket process_work_id:\"</span> + worker_id);</span><br><span class=\"line\">       worker_id = worker_id % 8;</span><br><span class=\"line\">       port = 8400 + worker_id;</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       logger.boot.info(<span class=\"string\">\"socket tcp_reconnect\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   logger.boot.info(<span class=\"string\">\"socket_port_id:\"</span> + port);</span><br><span class=\"line\"></span><br><span class=\"line\">   client.connect(port,<span class=\"string\">\"10.96.71.91\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.9 多进程<br>    1.9.1 child_process模块<br>    1）spawn()启动一个子进程执行命令，无回调，无超时<br>    2）exec()启动一个子进程执行命令，有回调，有超时<br>    3）execFile()启动一个子进程执行可执行文件<br>    4）fork()启动node子进程执行js文件模块<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fork = require(<span class=\"string\">'child_process'</span>).fork;</span><br><span class=\"line\">var cpus = require(<span class=\"string\">'os'</span>).cpus();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i &lt; cpus.length; i++)&#123;</span><br><span class=\"line\">\tfork(<span class=\"string\">'./worker.js'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.9.2 进程间通信IPC，主线程与工作线程之间通过onmessage()和postMessage()进行通信，子进程对象则由send()方法实现主进程向子进程发送数据\n1.9.3 句柄是一种用来标识资源的引用，用来拓展有限的文件描述符\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.send(message,[sandHandle])如（child.send(<span class=\"string\">'server'</span>,server)）;</span><br><span class=\"line\">子进程代码</span><br><span class=\"line\">process.on(<span class=\"string\">'message'</span>,<span class=\"keyword\">function</span>(m, server)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(m == <span class=\"string\">'server'</span>)&#123;</span><br><span class=\"line\">\txxxxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n1.9.4 父进程可以通过kill()方法给子进程发送一个SIGTERM信号杀进程\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chid.kill([signal]);</span><br><span class=\"line\">process.kill(pid, [signal]);</span><br><span class=\"line\">``` </span><br><span class=\"line\">在退出中加入自动重启可能会有新用户进来请求丢失的情况，工作进程在得知退出时，向主进程发送一个自杀信号（达到先创建在退出进程）</span><br><span class=\"line\">``` bash</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * cluster mode</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">if</span> (   opts.get(<span class=\"string\">'cluster'</span>)</span><br><span class=\"line\">    || config.APP_CLUSTER.ENABLE) &#123;</span><br><span class=\"line\">    var cluster = require(<span class=\"string\">'cluster'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cluster.isMaster) &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'[CLUSTER MODE] MASTER'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var i=0; i&lt;config.APP_CLUSTER.NUM; i++) &#123;</span><br><span class=\"line\">            cluster.fork();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cluster.on(<span class=\"string\">'exit'</span>, <span class=\"keyword\">function</span>(worker, code, signal) &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'worker '</span> + worker.process.pid + <span class=\"string\">' died'</span>);</span><br><span class=\"line\">            cluster.fork();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(<span class=\"string\">'[CLUSTER MODE] WORKER'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.10 插件<br>    1.10.1 Sequelizejs  此插件在option索引的位置千万不能写错，写错有大几率导致db堵塞<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\"> \t\tattributes: [<span class=\"string\">'foo'</span>, [<span class=\"string\">'bar'</span>, <span class=\"string\">'baz'</span>]]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT foo, bar AS baz ...</span><br><span class=\"line\"></span><br><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: [[sequelize.fn(<span class=\"string\">'COUNT'</span>, sequelize.col(<span class=\"string\">'hats'</span>)), <span class=\"string\">'no_hats'</span>]]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT COUNT(hats) AS no_hats ...</span><br><span class=\"line\"></span><br><span class=\"line\">Post.findAll(&#123;</span><br><span class=\"line\">  <span class=\"built_in\">where</span>: &#123;</span><br><span class=\"line\">    [Op.or]: [&#123;authorId: 12&#125;, &#123;authorId: 13&#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT * FROM post WHERE authorId = 12 OR authorId = 13;</span><br><span class=\"line\"></span><br><span class=\"line\">Order.findAll(&#123;attributes:[<span class=\"string\">'name'</span>, [sequelize.fn(<span class=\"string\">'SUM'</span>, sequelize.col(<span class=\"string\">'price'</span>)), <span class=\"string\">'sum'</span>]], group:<span class=\"string\">'name'</span>, having:[<span class=\"string\">'COUNT(?)&gt;?'</span>, <span class=\"string\">'name'</span>, 1], raw:<span class=\"literal\">true</span>&#125;).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(result)&#123;</span><br><span class=\"line\"> console.log(result);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">SELECT `name`, sum(`price`) AS `sum` FROM `orders` AS `Orders` GROUP BY name HAVING COUNT(<span class=\"string\">'name'</span>)&gt;1;</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.10.2 Lodashjs\n[文档](https://www.lodashjs.com/docs/4.17.5.html)\n\n_.indexOf(array, value, [fromIndex=0])\nnumber): Returns the index of the matched value, else -1.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf([1, 2, 1, 2], 2);</span><br><span class=\"line\">// =&gt; 1</span><br><span class=\"line\"> </span><br><span class=\"line\">// Search from the `fromIndex`.</span><br><span class=\"line\">_.indexOf([1, 2, 1, 2], 2, 2);</span><br><span class=\"line\">// =&gt; 3</span><br></pre></td></tr></table></figure>\n\n_.dropRight(array, [n=1])\n(Array): Returns the slice of array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.dropRight([1, 2, 3]);</span><br><span class=\"line\">// =&gt; [1, 2]</span><br><span class=\"line\"> </span><br><span class=\"line\">_.dropRight([1, 2, 3], 2);</span><br><span class=\"line\">// =&gt; [1]</span><br><span class=\"line\"></span><br><span class=\"line\">_.dropRight([1, 2, 3], 0);</span><br><span class=\"line\">// =&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n\n_.filter(collection, [predicate=_.identity])\n(Array): Returns the new filtered array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>, <span class=\"string\">'age'</span>: 36, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,   <span class=\"string\">'age'</span>: 40, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"> </span><br><span class=\"line\">_.filter(users, <span class=\"keyword\">function</span>(o) &#123; <span class=\"built_in\">return</span> !o.active; &#125;);</span><br><span class=\"line\">// =&gt; objects <span class=\"keyword\">for</span> [<span class=\"string\">'fred'</span>]</span><br></pre></td></tr></table></figure>\n\n_.find(collection, [predicate=_.identity], [fromIndex=0])\n(*): Returns the matched element, else undefined.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tvar users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: 36, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: 40, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: 1,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"> </span><br><span class=\"line\">_.find(users, <span class=\"keyword\">function</span>(o) &#123; <span class=\"built_in\">return</span> o.age &lt; 40; &#125;);</span><br><span class=\"line\">// =&gt; object <span class=\"keyword\">for</span> <span class=\"string\">'barney'</span></span><br></pre></td></tr></table></figure>\n\n_.forEach(collection, [iteratee=_.identity])\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.forEach([1, 2], <span class=\"keyword\">function</span>(value) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// =&gt; Logs `1` <span class=\"keyword\">then</span> `2`.</span><br><span class=\"line\"> </span><br><span class=\"line\">_.forEach(&#123; <span class=\"string\">'a'</span>: 1, <span class=\"string\">'b'</span>: 2 &#125;, <span class=\"keyword\">function</span>(value, key) &#123;</span><br><span class=\"line\">  console.log(key);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n_.groupBy(collection, [iteratee=_.identity])\n(Object): Returns the composed aggregate object.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([6.1, 4.2, 6.3], Math.floor);</span><br><span class=\"line\">// =&gt; &#123; <span class=\"string\">'4'</span>: [4.2], <span class=\"string\">'6'</span>: [6.1, 6.3] &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// The `_.property` iteratee shorthand.</span><br><span class=\"line\">_.groupBy([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], <span class=\"string\">'length'</span>);</span><br><span class=\"line\">// =&gt; &#123; <span class=\"string\">'3'</span>: [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>], <span class=\"string\">'5'</span>: [<span class=\"string\">'three'</span>] &#125;</span><br></pre></td></tr></table></figure>\n\n#Promise.map Promise.all 相当于事务 \n_.map(collection, [iteratee=_.identity])\n(Array): Returns the new mapped array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> square(n) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> n * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_.map([4, 8], square);</span><br><span class=\"line\">// =&gt; [16, 64]</span><br><span class=\"line\"> </span><br><span class=\"line\">_.map(&#123; <span class=\"string\">'a'</span>: 4, <span class=\"string\">'b'</span>: 8 &#125;, square);</span><br><span class=\"line\">// =&gt; [16, 64] (iteration order is not guaranteed)</span><br></pre></td></tr></table></figure>\n\n#Promise.reduce是顺序执行\n_.reduce(collection, [iteratee=_.identity], [accumulator])  -\n(*): Returns the accumulated value.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f_.reduce([1, 2], <span class=\"keyword\">function</span>(sum, n) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> sum + n;</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">// =&gt; 3</span><br></pre></td></tr></table></figure>\n\n_.isEmpty(value)\n(boolean): Returns true if value is empty, else false.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isEmpty(null);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(<span class=\"literal\">true</span>);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(1);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty([1, 2, 3]);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(&#123; <span class=\"string\">'a'</span>: 1 &#125;);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n项目案例 略\n\n1.10.3 Moment.js\n[文档](http://momentjs.cn)\n案例使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment(event.start_time).startOf(<span class=\"string\">'day'</span>)/1000;</span><br><span class=\"line\">moment.unix(moment().startOf(<span class=\"string\">'month'</span>)/1000).utcOffset(config.TIME_ZONE_DIFF).format(<span class=\"string\">\"YYYY-MM-DD HH:mm:ss\"</span>);</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"充值流程","date":"2019-03-06T12:01:38.000Z","_content":"\n接触到的充值流程是这样的\n客户端发起请求->lcm后台，lcm后台确认充值成功，会将充值的金额变成平台货币保存在平台端，并通知到客户端充值成功，\n收到充值成功的客户端对游戏服务端发起请求，游戏服务端收到请求后，请求lcm平台调用spend方法，平台确认信息相符就扣币\n并告诉游戏服务端消费成功，游戏服务端在将平台货币转换为对应的游戏币，同时告诉客户端充值成功\n\n2.平台充值成功可能会产生回调直接通知游戏服务端，服务端接收请求，后请求平台spend，成功后发币记录，客户端请求服务端查到有记录就告知客户端成功不做spend\n\n掉单：\n如果掉单\n1.平台回调请求会保证执行spend方法，达到补单的效果\n2.客户端能读到平台币，直接通过平台剩余币与游戏服务端直接交易\n\n注意：\n任何时间判断以天为单位要特别小心，如果出现两版批次连续很容易出问题","source":"_posts/充值流程.md","raw":"---\ntitle: 充值流程\ndate: 2019-03-06 20:01:38\ntags:\n---\n\n接触到的充值流程是这样的\n客户端发起请求->lcm后台，lcm后台确认充值成功，会将充值的金额变成平台货币保存在平台端，并通知到客户端充值成功，\n收到充值成功的客户端对游戏服务端发起请求，游戏服务端收到请求后，请求lcm平台调用spend方法，平台确认信息相符就扣币\n并告诉游戏服务端消费成功，游戏服务端在将平台货币转换为对应的游戏币，同时告诉客户端充值成功\n\n2.平台充值成功可能会产生回调直接通知游戏服务端，服务端接收请求，后请求平台spend，成功后发币记录，客户端请求服务端查到有记录就告知客户端成功不做spend\n\n掉单：\n如果掉单\n1.平台回调请求会保证执行spend方法，达到补单的效果\n2.客户端能读到平台币，直接通过平台剩余币与游戏服务端直接交易\n\n注意：\n任何时间判断以天为单位要特别小心，如果出现两版批次连续很容易出问题","slug":"充值流程","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91g000r1d8ntdu59hzz","content":"<p>接触到的充值流程是这样的<br>客户端发起请求-&gt;lcm后台，lcm后台确认充值成功，会将充值的金额变成平台货币保存在平台端，并通知到客户端充值成功，<br>收到充值成功的客户端对游戏服务端发起请求，游戏服务端收到请求后，请求lcm平台调用spend方法，平台确认信息相符就扣币<br>并告诉游戏服务端消费成功，游戏服务端在将平台货币转换为对应的游戏币，同时告诉客户端充值成功</p>\n<p>2.平台充值成功可能会产生回调直接通知游戏服务端，服务端接收请求，后请求平台spend，成功后发币记录，客户端请求服务端查到有记录就告知客户端成功不做spend</p>\n<p>掉单：<br>如果掉单<br>1.平台回调请求会保证执行spend方法，达到补单的效果<br>2.客户端能读到平台币，直接通过平台剩余币与游戏服务端直接交易</p>\n<p>注意：<br>任何时间判断以天为单位要特别小心，如果出现两版批次连续很容易出问题</p>\n","site":{"data":{}},"excerpt":"","more":"<p>接触到的充值流程是这样的<br>客户端发起请求-&gt;lcm后台，lcm后台确认充值成功，会将充值的金额变成平台货币保存在平台端，并通知到客户端充值成功，<br>收到充值成功的客户端对游戏服务端发起请求，游戏服务端收到请求后，请求lcm平台调用spend方法，平台确认信息相符就扣币<br>并告诉游戏服务端消费成功，游戏服务端在将平台货币转换为对应的游戏币，同时告诉客户端充值成功</p>\n<p>2.平台充值成功可能会产生回调直接通知游戏服务端，服务端接收请求，后请求平台spend，成功后发币记录，客户端请求服务端查到有记录就告知客户端成功不做spend</p>\n<p>掉单：<br>如果掉单<br>1.平台回调请求会保证执行spend方法，达到补单的效果<br>2.客户端能读到平台币，直接通过平台剩余币与游戏服务端直接交易</p>\n<p>注意：<br>任何时间判断以天为单位要特别小心，如果出现两版批次连续很容易出问题</p>\n"},{"title":"redis笔记","date":"2018-08-01T08:52:31.000Z","_content":"\n1. Redis是什么、特点、优势\nredis是Key-Value数据库,数据包含各种数据 字符串String、字典Hash、列表List、集合Set、有序集合SortedSet等\n  redis支持数据持久化，重启再次加载,支持数据备份(支持分布式),Redis是单进程单线程的\nRedis的优势\n  性能高 读速度110000/s 写速度81000/s\n  丰富的数据类型\n\n2. redis安装（Linux）、启动、退出、设置密码、远程连接\n2.1 安装redis\n下载redis安装包（如：redis-2.8.17.tar.gz）\n``` bash\ntar -zxvf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\nsudo make install\n```\n2.2 后台启动服务端\n``` bash\nnohup redis-server &\n```\n2.3 启动客户端、验证\n``` bash\ncd /usr/local/bin\nredis-cli\nset var \"hello world\"\nget var\n```\n<!-- more -->\n\n3. Reis key\n序号\tRedis keys命令及描述\n1\tDEL key\n该命令用于在 key 存在是删除 key。\n2\tDUMP key \n序列化给定 key ，并返回被序列化的值。\n3\tEXISTS key \n检查给定 key 是否存在。\n4\tEXPIRE key seconds\n为给定 key 设置过期时间。\n5\tEXPIREAT key timestamp \nEXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。\n6\tPEXPIRE key milliseconds \n设置 key 的过期时间亿以毫秒计。\n7\tPEXPIREAT key milliseconds-timestamp \n设置 key 过期时间的时间戳(unix timestamp) 以毫秒计\n8\tKEYS pattern \n查找所有符合给定模式( pattern)的 key 。例如keys * 返回所有的key\n9\tMOVE key db \n将当前数据库的 key 移动到给定的数据库 db 当中。\n10\tPERSIST key \n移除 key 的过期时间，key 将持久保持。\n11\tPTTL key \n以毫秒为单位返回 key 的剩余的过期时间。\n12\tTTL key \n以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。\n13\tRANDOMKEY \n从当前数据库中随机返回一个 key 。\n14\tRENAME key newkey \n修改 key 的名称\n15\tRENAMENX key newkey \n仅当 newkey 不存在时，将 key 改名为 newkey 。\n16\tTYPE key \n返回 key 所储存的值的类型。\n...\n[中文文档](http://redisdoc.com)\n\n4. Redis 发布订阅\n占时没用过，看起来跟微信公众号一样,Pub/Sub做延时队列可以用在玩家登录排队上\n\n5. Redis事务\n一个事务从开始到结束经过以下三个阶段：\n\n开始事务\n命令入队\n执行事务\n例子\n\n``` bash\nlocalhost:6379> MULTI\nOK\nlocalhost:6379> set name jihite\nQUEUED\nlocalhost:6379> get name\nQUEUED\nlocalhost:6379> sadd language \"c++\" \"python\" \"java\"\nQUEUED\nlocalhost:6379> smembers language\nQUEUED\nlocalhost:6379> exec\n```\n说明：事务以MULTI开始，以EXEC结束\n\n6. 关闭持久化与持久化\n(RDB)bgsave做镜像全量持久化，aof做增量持久化\nRDB相当于快照，是fork一个子进程，快照成功后替换\naof相当于日志，cow，copy and write,一条一条的数据\n\n这是redis与其他缓存服务的比较明显的特点,如memcache\n修改配置文件，改完后重启。\n``` bash\n#save 900 1  \n#save 300 10  \n#save 60 10000  \n```\n或执行操作命令\n``` bash\nCONFIG SET save \"\"\n```\n\n7. redis相比memcached有哪些优势？\n\n(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型\n(2) redis的速度比memcached快很多\n(3) redis可以持久化其数据\n\n8. redis常见性能问题和解决方案：\n\n(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件\n(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次\n(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内\n(4) 尽量避免在压力很大的主库上增加从库\n(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3...\n\n这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。\n\n9. Redis 常见的性能问题都有哪些？如何解决？\n1).Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。\n2).Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。\n3).Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。\n4). Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内\n\n10. Redis分布式锁\n拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。\n\n11. Redis做异步队列\n一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。\n","source":"_posts/redis笔记.md","raw":"---\ntitle: redis笔记\ndate: 2018-08-01 16:52:31\ncategories: \"数据库\"\ntags:\n\t- redis\n---\n\n1. Redis是什么、特点、优势\nredis是Key-Value数据库,数据包含各种数据 字符串String、字典Hash、列表List、集合Set、有序集合SortedSet等\n  redis支持数据持久化，重启再次加载,支持数据备份(支持分布式),Redis是单进程单线程的\nRedis的优势\n  性能高 读速度110000/s 写速度81000/s\n  丰富的数据类型\n\n2. redis安装（Linux）、启动、退出、设置密码、远程连接\n2.1 安装redis\n下载redis安装包（如：redis-2.8.17.tar.gz）\n``` bash\ntar -zxvf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\nsudo make install\n```\n2.2 后台启动服务端\n``` bash\nnohup redis-server &\n```\n2.3 启动客户端、验证\n``` bash\ncd /usr/local/bin\nredis-cli\nset var \"hello world\"\nget var\n```\n<!-- more -->\n\n3. Reis key\n序号\tRedis keys命令及描述\n1\tDEL key\n该命令用于在 key 存在是删除 key。\n2\tDUMP key \n序列化给定 key ，并返回被序列化的值。\n3\tEXISTS key \n检查给定 key 是否存在。\n4\tEXPIRE key seconds\n为给定 key 设置过期时间。\n5\tEXPIREAT key timestamp \nEXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。\n6\tPEXPIRE key milliseconds \n设置 key 的过期时间亿以毫秒计。\n7\tPEXPIREAT key milliseconds-timestamp \n设置 key 过期时间的时间戳(unix timestamp) 以毫秒计\n8\tKEYS pattern \n查找所有符合给定模式( pattern)的 key 。例如keys * 返回所有的key\n9\tMOVE key db \n将当前数据库的 key 移动到给定的数据库 db 当中。\n10\tPERSIST key \n移除 key 的过期时间，key 将持久保持。\n11\tPTTL key \n以毫秒为单位返回 key 的剩余的过期时间。\n12\tTTL key \n以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。\n13\tRANDOMKEY \n从当前数据库中随机返回一个 key 。\n14\tRENAME key newkey \n修改 key 的名称\n15\tRENAMENX key newkey \n仅当 newkey 不存在时，将 key 改名为 newkey 。\n16\tTYPE key \n返回 key 所储存的值的类型。\n...\n[中文文档](http://redisdoc.com)\n\n4. Redis 发布订阅\n占时没用过，看起来跟微信公众号一样,Pub/Sub做延时队列可以用在玩家登录排队上\n\n5. Redis事务\n一个事务从开始到结束经过以下三个阶段：\n\n开始事务\n命令入队\n执行事务\n例子\n\n``` bash\nlocalhost:6379> MULTI\nOK\nlocalhost:6379> set name jihite\nQUEUED\nlocalhost:6379> get name\nQUEUED\nlocalhost:6379> sadd language \"c++\" \"python\" \"java\"\nQUEUED\nlocalhost:6379> smembers language\nQUEUED\nlocalhost:6379> exec\n```\n说明：事务以MULTI开始，以EXEC结束\n\n6. 关闭持久化与持久化\n(RDB)bgsave做镜像全量持久化，aof做增量持久化\nRDB相当于快照，是fork一个子进程，快照成功后替换\naof相当于日志，cow，copy and write,一条一条的数据\n\n这是redis与其他缓存服务的比较明显的特点,如memcache\n修改配置文件，改完后重启。\n``` bash\n#save 900 1  \n#save 300 10  \n#save 60 10000  \n```\n或执行操作命令\n``` bash\nCONFIG SET save \"\"\n```\n\n7. redis相比memcached有哪些优势？\n\n(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型\n(2) redis的速度比memcached快很多\n(3) redis可以持久化其数据\n\n8. redis常见性能问题和解决方案：\n\n(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件\n(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次\n(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内\n(4) 尽量避免在压力很大的主库上增加从库\n(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3...\n\n这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。\n\n9. Redis 常见的性能问题都有哪些？如何解决？\n1).Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。\n2).Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。\n3).Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。\n4). Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内\n\n10. Redis分布式锁\n拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。\n\n11. Redis做异步队列\n一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。\n","slug":"redis笔记","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91h000t1d8nr5m1n6ta","content":"<ol>\n<li><p>Redis是什么、特点、优势<br>redis是Key-Value数据库,数据包含各种数据 字符串String、字典Hash、列表List、集合Set、有序集合SortedSet等<br>redis支持数据持久化，重启再次加载,支持数据备份(支持分布式),Redis是单进程单线程的<br>Redis的优势<br>性能高 读速度110000/s 写速度81000/s<br>丰富的数据类型</p>\n</li>\n<li><p>redis安装（Linux）、启动、退出、设置密码、远程连接<br>2.1 安装redis<br>下载redis安装包（如：redis-2.8.17.tar.gz）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf redis-2.8.17.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis-2.8.17</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.2 后台启动服务端<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup redis-server &amp;</span><br></pre></td></tr></table></figure></p>\n<p>2.3 启动客户端、验证<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\">redis-cli</span><br><span class=\"line\"><span class=\"built_in\">set</span> var <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">get var</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<ol start=\"3\">\n<li><p>Reis key<br>序号    Redis keys命令及描述<br>1    DEL key<br>该命令用于在 key 存在是删除 key。<br>2    DUMP key<br>序列化给定 key ，并返回被序列化的值。<br>3    EXISTS key<br>检查给定 key 是否存在。<br>4    EXPIRE key seconds<br>为给定 key 设置过期时间。<br>5    EXPIREAT key timestamp<br>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。<br>6    PEXPIRE key milliseconds<br>设置 key 的过期时间亿以毫秒计。<br>7    PEXPIREAT key milliseconds-timestamp<br>设置 key 过期时间的时间戳(unix timestamp) 以毫秒计<br>8    KEYS pattern<br>查找所有符合给定模式( pattern)的 key 。例如keys * 返回所有的key<br>9    MOVE key db<br>将当前数据库的 key 移动到给定的数据库 db 当中。<br>10    PERSIST key<br>移除 key 的过期时间，key 将持久保持。<br>11    PTTL key<br>以毫秒为单位返回 key 的剩余的过期时间。<br>12    TTL key<br>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。<br>13    RANDOMKEY<br>从当前数据库中随机返回一个 key 。<br>14    RENAME key newkey<br>修改 key 的名称<br>15    RENAMENX key newkey<br>仅当 newkey 不存在时，将 key 改名为 newkey 。<br>16    TYPE key<br>返回 key 所储存的值的类型。<br>…<br><a href=\"http://redisdoc.com\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</li>\n<li><p>Redis 发布订阅<br>占时没用过，看起来跟微信公众号一样,Pub/Sub做延时队列可以用在玩家登录排队上</p>\n</li>\n<li><p>Redis事务<br>一个事务从开始到结束经过以下三个阶段：</p>\n</li>\n</ol>\n<p>开始事务<br>命令入队<br>执行事务<br>例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:6379&gt; MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\">localhost:6379&gt; <span class=\"built_in\">set</span> name jihite</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">localhost:6379&gt; get name</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">localhost:6379&gt; sadd language <span class=\"string\">\"c++\"</span> <span class=\"string\">\"python\"</span> <span class=\"string\">\"java\"</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">localhost:6379&gt; smembers language</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">localhost:6379&gt; <span class=\"built_in\">exec</span></span><br></pre></td></tr></table></figure>\n<p>说明：事务以MULTI开始，以EXEC结束</p>\n<ol start=\"6\">\n<li>关闭持久化与持久化<br>(RDB)bgsave做镜像全量持久化，aof做增量持久化<br>RDB相当于快照，是fork一个子进程，快照成功后替换<br>aof相当于日志，cow，copy and write,一条一条的数据</li>\n</ol>\n<p>这是redis与其他缓存服务的比较明显的特点,如memcache<br>修改配置文件，改完后重启。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#save 900 1  </span></span><br><span class=\"line\"><span class=\"comment\">#save 300 10  </span></span><br><span class=\"line\"><span class=\"comment\">#save 60 10000</span></span><br></pre></td></tr></table></figure></p>\n<p>或执行操作命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG SET save <span class=\"string\">\"\"</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"7\">\n<li>redis相比memcached有哪些优势？</li>\n</ol>\n<p>(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型<br>(2) redis的速度比memcached快很多<br>(3) redis可以持久化其数据</p>\n<ol start=\"8\">\n<li>redis常见性能问题和解决方案：</li>\n</ol>\n<p>(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件<br>(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次<br>(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内<br>(4) 尽量避免在压力很大的主库上增加从库<br>(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3…</p>\n<p>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</p>\n<ol start=\"9\">\n<li><p>Redis 常见的性能问题都有哪些？如何解决？<br>1).Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。<br>2).Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。<br>3).Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。<br>4). Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</p>\n</li>\n<li><p>Redis分布式锁<br>拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。</p>\n</li>\n<li><p>Redis做异步队列<br>一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>Redis是什么、特点、优势<br>redis是Key-Value数据库,数据包含各种数据 字符串String、字典Hash、列表List、集合Set、有序集合SortedSet等<br>redis支持数据持久化，重启再次加载,支持数据备份(支持分布式),Redis是单进程单线程的<br>Redis的优势<br>性能高 读速度110000/s 写速度81000/s<br>丰富的数据类型</p>\n</li>\n<li><p>redis安装（Linux）、启动、退出、设置密码、远程连接<br>2.1 安装redis<br>下载redis安装包（如：redis-2.8.17.tar.gz）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf redis-2.8.17.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis-2.8.17</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.2 后台启动服务端<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup redis-server &amp;</span><br></pre></td></tr></table></figure></p>\n<p>2.3 启动客户端、验证<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\">redis-cli</span><br><span class=\"line\"><span class=\"built_in\">set</span> var <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">get var</span><br></pre></td></tr></table></figure></p>","more":"<ol start=\"3\">\n<li><p>Reis key<br>序号    Redis keys命令及描述<br>1    DEL key<br>该命令用于在 key 存在是删除 key。<br>2    DUMP key<br>序列化给定 key ，并返回被序列化的值。<br>3    EXISTS key<br>检查给定 key 是否存在。<br>4    EXPIRE key seconds<br>为给定 key 设置过期时间。<br>5    EXPIREAT key timestamp<br>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。<br>6    PEXPIRE key milliseconds<br>设置 key 的过期时间亿以毫秒计。<br>7    PEXPIREAT key milliseconds-timestamp<br>设置 key 过期时间的时间戳(unix timestamp) 以毫秒计<br>8    KEYS pattern<br>查找所有符合给定模式( pattern)的 key 。例如keys * 返回所有的key<br>9    MOVE key db<br>将当前数据库的 key 移动到给定的数据库 db 当中。<br>10    PERSIST key<br>移除 key 的过期时间，key 将持久保持。<br>11    PTTL key<br>以毫秒为单位返回 key 的剩余的过期时间。<br>12    TTL key<br>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。<br>13    RANDOMKEY<br>从当前数据库中随机返回一个 key 。<br>14    RENAME key newkey<br>修改 key 的名称<br>15    RENAMENX key newkey<br>仅当 newkey 不存在时，将 key 改名为 newkey 。<br>16    TYPE key<br>返回 key 所储存的值的类型。<br>…<br><a href=\"http://redisdoc.com\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</li>\n<li><p>Redis 发布订阅<br>占时没用过，看起来跟微信公众号一样,Pub/Sub做延时队列可以用在玩家登录排队上</p>\n</li>\n<li><p>Redis事务<br>一个事务从开始到结束经过以下三个阶段：</p>\n</li>\n</ol>\n<p>开始事务<br>命令入队<br>执行事务<br>例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:6379&gt; MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\">localhost:6379&gt; <span class=\"built_in\">set</span> name jihite</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">localhost:6379&gt; get name</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">localhost:6379&gt; sadd language <span class=\"string\">\"c++\"</span> <span class=\"string\">\"python\"</span> <span class=\"string\">\"java\"</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">localhost:6379&gt; smembers language</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">localhost:6379&gt; <span class=\"built_in\">exec</span></span><br></pre></td></tr></table></figure>\n<p>说明：事务以MULTI开始，以EXEC结束</p>\n<ol start=\"6\">\n<li>关闭持久化与持久化<br>(RDB)bgsave做镜像全量持久化，aof做增量持久化<br>RDB相当于快照，是fork一个子进程，快照成功后替换<br>aof相当于日志，cow，copy and write,一条一条的数据</li>\n</ol>\n<p>这是redis与其他缓存服务的比较明显的特点,如memcache<br>修改配置文件，改完后重启。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#save 900 1  </span></span><br><span class=\"line\"><span class=\"comment\">#save 300 10  </span></span><br><span class=\"line\"><span class=\"comment\">#save 60 10000</span></span><br></pre></td></tr></table></figure></p>\n<p>或执行操作命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG SET save <span class=\"string\">\"\"</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"7\">\n<li>redis相比memcached有哪些优势？</li>\n</ol>\n<p>(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型<br>(2) redis的速度比memcached快很多<br>(3) redis可以持久化其数据</p>\n<ol start=\"8\">\n<li>redis常见性能问题和解决方案：</li>\n</ol>\n<p>(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件<br>(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次<br>(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内<br>(4) 尽量避免在压力很大的主库上增加从库<br>(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3…</p>\n<p>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</p>\n<ol start=\"9\">\n<li><p>Redis 常见的性能问题都有哪些？如何解决？<br>1).Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。<br>2).Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。<br>3).Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。<br>4). Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</p>\n</li>\n<li><p>Redis分布式锁<br>拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。</p>\n</li>\n<li><p>Redis做异步队列<br>一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。</p>\n</li>\n</ol>"},{"title":"游戏运营活动框架思路","date":"2019-11-22T08:15:07.000Z","_content":"\n游戏的运营活动一般会有好多种类型，但是这些类型的功能一般是有共同和非共同的部分，这里记录一个对多类型运营活动的管理框架\n通过模板表录入运营活动的参数，包括跳转模块，开启方法，红点方法，等级等。如果有类似活动结束发奖的奖励表也可以用表来记录不同活动operation_id对应的奖励\n进行管理。\n![1574411899](1574411899.jpg)\n1.初始化玩家排行\n``` bash\ninit_sky_bless_rank() ->\n    List = [PlayerSkyBless || PlayerSkyBless <- get_all_player_st_sky_bless(),\n        PlayerSkyBless #player_st_sky_bless.bless_times > 0],\n    SortFunction = fun(A,B) ->\n        if  A #player_st_sky_bless.bless_times =:= B #player_st_sky_bless.bless_times ->\n                A #player_st_sky_bless.last_time =< B #player_st_sky_bless.last_time;\n            true ->\n                A #player_st_sky_bless.bless_times > B #player_st_sky_bless.bless_times\n        end\n    end,\n    SortList = lists:sort(SortFunction,List),\n    Num = length(SortList),\n    Tran = fun() ->\n        if  Num > 0 ->\n                lists:foreach(\n                    fun(Seq) ->\n                        PlayerSkyBless = lists:nth(Seq,SortList),\n                        lib_ets:insert(sky_bless_player_ranking,#sky_lantern_bless_player_ranking{\n                            player_id = PlayerSkyBless #player_st_sky_bless.player_id,ranking = Seq},replace),\n                        BlessRanking = #sky_lantern_bless_ranking{\n                            ranking = Seq,\n                            player_id = PlayerSkyBless #player_st_sky_bless.player_id,\n                            times   = PlayerSkyBless #player_st_sky_bless.bless_times,\n                            bless_time = PlayerSkyBless #player_st_sky_bless.last_time\n                        },\n                        lib_ets:insert(sky_bless_ranking,BlessRanking,replace)\n                    end,\n                    lists:seq(1,Num)\n                );\n            true ->\n                noop\n        end\n    end,\n    game_db:do(Tran).\n```\n<!-- more -->\n2.处理玩家排行\n``` bash\ndeal_update_player_ranking(PlayerId) ->\n    PlayerSkyBless = get_player_st_sky_bless(PlayerId),\n    BlessTimes = PlayerSkyBless #player_st_sky_bless.bless_times,\n    BlessTime  = PlayerSkyBless #player_st_sky_bless.last_time,\n    NowRanking = get_sky_bless_player_ranking(PlayerId),\n    Tran = fun() ->\n        if  NowRanking == 0 ->\n                Len = length(get_all_sky_bless_ranking()),\n                NewRanking = #sky_lantern_bless_ranking{\n                    ranking     = Len + 1,\n                    player_id   = PlayerId,\n                    times       = BlessTimes,\n                    bless_time  = BlessTime\n                },\n                lib_ets:insert(sky_bless_ranking,NewRanking,replace),\n                lib_ets:insert(sky_bless_player_ranking,#sky_lantern_bless_player_ranking{\n                    player_id = PlayerId,ranking = Len + 1},replace),\n                ranking_sort(PlayerId,BlessTimes,BlessTime,Len);\n            true ->\n                lib_ets:update(sky_bless_ranking,NowRanking,[{#sky_lantern_bless_ranking.times,BlessTimes},\n                    {#sky_lantern_bless_ranking.bless_time,BlessTime}]),\n                ranking_sort(PlayerId,BlessTimes,BlessTime,NowRanking - 1)\n        end\n    end,\n    game_db:do(Tran).\n\nranking_sort(_,_,_,0) ->\n    noop;\n\nranking_sort(PlayerId,BlessTimes,Time,Ranking) ->\n    BlessRanking = get_sky_bless_ranking(Ranking),\n    case sort(BlessTimes,Time,BlessRanking #sky_lantern_bless_ranking.times,BlessRanking #sky_lantern_bless_ranking.bless_time) of\n        true ->\n            NewRanking = #sky_lantern_bless_ranking{\n                ranking = Ranking,\n                player_id = PlayerId,\n                times   = BlessTimes,\n                bless_time = Time\n            },\n            ARanking = #sky_lantern_bless_ranking{\n                ranking = Ranking + 1,\n                player_id = BlessRanking #sky_lantern_bless_ranking.player_id,\n                times = BlessRanking #sky_lantern_bless_ranking.times,\n                bless_time = BlessRanking #sky_lantern_bless_ranking.bless_time\n            },\n            lib_ets:insert(sky_bless_player_ranking,#sky_lantern_bless_player_ranking{\n                player_id = BlessRanking #sky_lantern_bless_ranking.player_id,ranking = Ranking + 1},replace),\n            lib_ets:insert(sky_bless_player_ranking,#sky_lantern_bless_player_ranking{\n                player_id = PlayerId,ranking = Ranking},replace),\n            lib_ets:insert(sky_bless_ranking,NewRanking,replace),\n            lib_ets:insert(sky_bless_ranking,ARanking,replace),\n            ranking_sort(PlayerId,BlessTimes,Time,Ranking - 1);\n        false ->\n            noop\n    end.\n```\n\n3.通过公共管理进程对活动进行管理发奖及消息通知\n``` bash\nhandle_cast({async_send}, {true,State}) ->\n    catch api_st_sky_bless:timer_notify(State),\n    start_timer(1),\n    {noreply, {true,[]}};\n\nhandle_cast({activity_stop},State) ->\n    mod_st_sky_bless:give_award(),\n    {noreply,State};\n```","source":"_posts/游戏运营活动框架思路.md","raw":"---\ntitle: 游戏运营活动框架思路\ndate: 2019-11-22 16:15:07\ntags:\n\t游戏\n---\n\n游戏的运营活动一般会有好多种类型，但是这些类型的功能一般是有共同和非共同的部分，这里记录一个对多类型运营活动的管理框架\n通过模板表录入运营活动的参数，包括跳转模块，开启方法，红点方法，等级等。如果有类似活动结束发奖的奖励表也可以用表来记录不同活动operation_id对应的奖励\n进行管理。\n![1574411899](1574411899.jpg)\n1.初始化玩家排行\n``` bash\ninit_sky_bless_rank() ->\n    List = [PlayerSkyBless || PlayerSkyBless <- get_all_player_st_sky_bless(),\n        PlayerSkyBless #player_st_sky_bless.bless_times > 0],\n    SortFunction = fun(A,B) ->\n        if  A #player_st_sky_bless.bless_times =:= B #player_st_sky_bless.bless_times ->\n                A #player_st_sky_bless.last_time =< B #player_st_sky_bless.last_time;\n            true ->\n                A #player_st_sky_bless.bless_times > B #player_st_sky_bless.bless_times\n        end\n    end,\n    SortList = lists:sort(SortFunction,List),\n    Num = length(SortList),\n    Tran = fun() ->\n        if  Num > 0 ->\n                lists:foreach(\n                    fun(Seq) ->\n                        PlayerSkyBless = lists:nth(Seq,SortList),\n                        lib_ets:insert(sky_bless_player_ranking,#sky_lantern_bless_player_ranking{\n                            player_id = PlayerSkyBless #player_st_sky_bless.player_id,ranking = Seq},replace),\n                        BlessRanking = #sky_lantern_bless_ranking{\n                            ranking = Seq,\n                            player_id = PlayerSkyBless #player_st_sky_bless.player_id,\n                            times   = PlayerSkyBless #player_st_sky_bless.bless_times,\n                            bless_time = PlayerSkyBless #player_st_sky_bless.last_time\n                        },\n                        lib_ets:insert(sky_bless_ranking,BlessRanking,replace)\n                    end,\n                    lists:seq(1,Num)\n                );\n            true ->\n                noop\n        end\n    end,\n    game_db:do(Tran).\n```\n<!-- more -->\n2.处理玩家排行\n``` bash\ndeal_update_player_ranking(PlayerId) ->\n    PlayerSkyBless = get_player_st_sky_bless(PlayerId),\n    BlessTimes = PlayerSkyBless #player_st_sky_bless.bless_times,\n    BlessTime  = PlayerSkyBless #player_st_sky_bless.last_time,\n    NowRanking = get_sky_bless_player_ranking(PlayerId),\n    Tran = fun() ->\n        if  NowRanking == 0 ->\n                Len = length(get_all_sky_bless_ranking()),\n                NewRanking = #sky_lantern_bless_ranking{\n                    ranking     = Len + 1,\n                    player_id   = PlayerId,\n                    times       = BlessTimes,\n                    bless_time  = BlessTime\n                },\n                lib_ets:insert(sky_bless_ranking,NewRanking,replace),\n                lib_ets:insert(sky_bless_player_ranking,#sky_lantern_bless_player_ranking{\n                    player_id = PlayerId,ranking = Len + 1},replace),\n                ranking_sort(PlayerId,BlessTimes,BlessTime,Len);\n            true ->\n                lib_ets:update(sky_bless_ranking,NowRanking,[{#sky_lantern_bless_ranking.times,BlessTimes},\n                    {#sky_lantern_bless_ranking.bless_time,BlessTime}]),\n                ranking_sort(PlayerId,BlessTimes,BlessTime,NowRanking - 1)\n        end\n    end,\n    game_db:do(Tran).\n\nranking_sort(_,_,_,0) ->\n    noop;\n\nranking_sort(PlayerId,BlessTimes,Time,Ranking) ->\n    BlessRanking = get_sky_bless_ranking(Ranking),\n    case sort(BlessTimes,Time,BlessRanking #sky_lantern_bless_ranking.times,BlessRanking #sky_lantern_bless_ranking.bless_time) of\n        true ->\n            NewRanking = #sky_lantern_bless_ranking{\n                ranking = Ranking,\n                player_id = PlayerId,\n                times   = BlessTimes,\n                bless_time = Time\n            },\n            ARanking = #sky_lantern_bless_ranking{\n                ranking = Ranking + 1,\n                player_id = BlessRanking #sky_lantern_bless_ranking.player_id,\n                times = BlessRanking #sky_lantern_bless_ranking.times,\n                bless_time = BlessRanking #sky_lantern_bless_ranking.bless_time\n            },\n            lib_ets:insert(sky_bless_player_ranking,#sky_lantern_bless_player_ranking{\n                player_id = BlessRanking #sky_lantern_bless_ranking.player_id,ranking = Ranking + 1},replace),\n            lib_ets:insert(sky_bless_player_ranking,#sky_lantern_bless_player_ranking{\n                player_id = PlayerId,ranking = Ranking},replace),\n            lib_ets:insert(sky_bless_ranking,NewRanking,replace),\n            lib_ets:insert(sky_bless_ranking,ARanking,replace),\n            ranking_sort(PlayerId,BlessTimes,Time,Ranking - 1);\n        false ->\n            noop\n    end.\n```\n\n3.通过公共管理进程对活动进行管理发奖及消息通知\n``` bash\nhandle_cast({async_send}, {true,State}) ->\n    catch api_st_sky_bless:timer_notify(State),\n    start_timer(1),\n    {noreply, {true,[]}};\n\nhandle_cast({activity_stop},State) ->\n    mod_st_sky_bless:give_award(),\n    {noreply,State};\n```","slug":"游戏运营活动框架思路","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91l000x1d8nkcut94da","content":"<p>游戏的运营活动一般会有好多种类型，但是这些类型的功能一般是有共同和非共同的部分，这里记录一个对多类型运营活动的管理框架<br>通过模板表录入运营活动的参数，包括跳转模块，开启方法，红点方法，等级等。如果有类似活动结束发奖的奖励表也可以用表来记录不同活动operation_id对应的奖励<br>进行管理。<br><img src=\"1574411899.jpg\" alt=\"1574411899\"><br>1.初始化玩家排行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_sky_bless_rank() -&gt;</span><br><span class=\"line\">    List = [PlayerSkyBless || PlayerSkyBless &lt;- get_all_player_st_sky_bless(),</span><br><span class=\"line\">        PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.bless_times &gt; 0],</span></span><br><span class=\"line\">    SortFunction = fun(A,B) -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  A <span class=\"comment\">#player_st_sky_bless.bless_times =:= B #player_st_sky_bless.bless_times -&gt;</span></span><br><span class=\"line\">                A <span class=\"comment\">#player_st_sky_bless.last_time =&lt; B #player_st_sky_bless.last_time;</span></span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                A <span class=\"comment\">#player_st_sky_bless.bless_times &gt; B #player_st_sky_bless.bless_times</span></span><br><span class=\"line\">        end</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    SortList = lists:sort(SortFunction,List),</span><br><span class=\"line\">    Num = length(SortList),</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  Num &gt; 0 -&gt;</span><br><span class=\"line\">                lists:foreach(</span><br><span class=\"line\">                    fun(Seq) -&gt;</span><br><span class=\"line\">                        PlayerSkyBless = lists:nth(Seq,SortList),</span><br><span class=\"line\">                        lib_ets:insert(sky_bless_player_ranking,<span class=\"comment\">#sky_lantern_bless_player_ranking&#123;</span></span><br><span class=\"line\">                            player_id = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.player_id,ranking = Seq&#125;,replace),</span></span><br><span class=\"line\">                        BlessRanking = <span class=\"comment\">#sky_lantern_bless_ranking&#123;</span></span><br><span class=\"line\">                            ranking = Seq,</span><br><span class=\"line\">                            player_id = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.player_id,</span></span><br><span class=\"line\">                            <span class=\"built_in\">times</span>   = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.bless_times,</span></span><br><span class=\"line\">                            bless_time = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.last_time</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        lib_ets:insert(sky_bless_ranking,BlessRanking,replace)</span><br><span class=\"line\">                    end,</span><br><span class=\"line\">                    lists:seq(1,Num)</span><br><span class=\"line\">                );</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                noop</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran).</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.处理玩家排行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deal_update_player_ranking(PlayerId) -&gt;</span><br><span class=\"line\">    PlayerSkyBless = get_player_st_sky_bless(PlayerId),</span><br><span class=\"line\">    BlessTimes = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.bless_times,</span></span><br><span class=\"line\">    BlessTime  = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.last_time,</span></span><br><span class=\"line\">    NowRanking = get_sky_bless_player_ranking(PlayerId),</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  NowRanking == 0 -&gt;</span><br><span class=\"line\">                Len = length(get_all_sky_bless_ranking()),</span><br><span class=\"line\">                NewRanking = <span class=\"comment\">#sky_lantern_bless_ranking&#123;</span></span><br><span class=\"line\">                    ranking     = Len + 1,</span><br><span class=\"line\">                    player_id   = PlayerId,</span><br><span class=\"line\">                    <span class=\"built_in\">times</span>       = BlessTimes,</span><br><span class=\"line\">                    bless_time  = BlessTime</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                lib_ets:insert(sky_bless_ranking,NewRanking,replace),</span><br><span class=\"line\">                lib_ets:insert(sky_bless_player_ranking,<span class=\"comment\">#sky_lantern_bless_player_ranking&#123;</span></span><br><span class=\"line\">                    player_id = PlayerId,ranking = Len + 1&#125;,replace),</span><br><span class=\"line\">                ranking_sort(PlayerId,BlessTimes,BlessTime,Len);</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                lib_ets:update(sky_bless_ranking,NowRanking,[&#123;<span class=\"comment\">#sky_lantern_bless_ranking.times,BlessTimes&#125;,</span></span><br><span class=\"line\">                    &#123;<span class=\"comment\">#sky_lantern_bless_ranking.bless_time,BlessTime&#125;]),</span></span><br><span class=\"line\">                ranking_sort(PlayerId,BlessTimes,BlessTime,NowRanking - 1)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran).</span><br><span class=\"line\"></span><br><span class=\"line\">ranking_sort(_,_,_,0) -&gt;</span><br><span class=\"line\">    noop;</span><br><span class=\"line\"></span><br><span class=\"line\">ranking_sort(PlayerId,BlessTimes,Time,Ranking) -&gt;</span><br><span class=\"line\">    BlessRanking = get_sky_bless_ranking(Ranking),</span><br><span class=\"line\">    <span class=\"keyword\">case</span> sort(BlessTimes,Time,BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.times,BlessRanking #sky_lantern_bless_ranking.bless_time) of</span></span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            NewRanking = <span class=\"comment\">#sky_lantern_bless_ranking&#123;</span></span><br><span class=\"line\">                ranking = Ranking,</span><br><span class=\"line\">                player_id = PlayerId,</span><br><span class=\"line\">                <span class=\"built_in\">times</span>   = BlessTimes,</span><br><span class=\"line\">                bless_time = Time</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ARanking = <span class=\"comment\">#sky_lantern_bless_ranking&#123;</span></span><br><span class=\"line\">                ranking = Ranking + 1,</span><br><span class=\"line\">                player_id = BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.player_id,</span></span><br><span class=\"line\">                <span class=\"built_in\">times</span> = BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.times,</span></span><br><span class=\"line\">                bless_time = BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.bless_time</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            lib_ets:insert(sky_bless_player_ranking,<span class=\"comment\">#sky_lantern_bless_player_ranking&#123;</span></span><br><span class=\"line\">                player_id = BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.player_id,ranking = Ranking + 1&#125;,replace),</span></span><br><span class=\"line\">            lib_ets:insert(sky_bless_player_ranking,<span class=\"comment\">#sky_lantern_bless_player_ranking&#123;</span></span><br><span class=\"line\">                player_id = PlayerId,ranking = Ranking&#125;,replace),</span><br><span class=\"line\">            lib_ets:insert(sky_bless_ranking,NewRanking,replace),</span><br><span class=\"line\">            lib_ets:insert(sky_bless_ranking,ARanking,replace),</span><br><span class=\"line\">            ranking_sort(PlayerId,BlessTimes,Time,Ranking - 1);</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            noop</span><br><span class=\"line\">    end.</span><br></pre></td></tr></table></figure></p>\n<p>3.通过公共管理进程对活动进行管理发奖及消息通知<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handle_cast(&#123;async_send&#125;, &#123;<span class=\"literal\">true</span>,State&#125;) -&gt;</span><br><span class=\"line\">    catch api_st_sky_bless:timer_notify(State),</span><br><span class=\"line\">    start_timer(1),</span><br><span class=\"line\">    &#123;noreply, &#123;<span class=\"literal\">true</span>,[]&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">handle_cast(&#123;activity_stop&#125;,State) -&gt;</span><br><span class=\"line\">    mod_st_sky_bless:give_award(),</span><br><span class=\"line\">    &#123;noreply,State&#125;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>游戏的运营活动一般会有好多种类型，但是这些类型的功能一般是有共同和非共同的部分，这里记录一个对多类型运营活动的管理框架<br>通过模板表录入运营活动的参数，包括跳转模块，开启方法，红点方法，等级等。如果有类似活动结束发奖的奖励表也可以用表来记录不同活动operation_id对应的奖励<br>进行管理。<br><img src=\"1574411899.jpg\" alt=\"1574411899\"><br>1.初始化玩家排行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_sky_bless_rank() -&gt;</span><br><span class=\"line\">    List = [PlayerSkyBless || PlayerSkyBless &lt;- get_all_player_st_sky_bless(),</span><br><span class=\"line\">        PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.bless_times &gt; 0],</span></span><br><span class=\"line\">    SortFunction = fun(A,B) -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  A <span class=\"comment\">#player_st_sky_bless.bless_times =:= B #player_st_sky_bless.bless_times -&gt;</span></span><br><span class=\"line\">                A <span class=\"comment\">#player_st_sky_bless.last_time =&lt; B #player_st_sky_bless.last_time;</span></span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                A <span class=\"comment\">#player_st_sky_bless.bless_times &gt; B #player_st_sky_bless.bless_times</span></span><br><span class=\"line\">        end</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    SortList = lists:sort(SortFunction,List),</span><br><span class=\"line\">    Num = length(SortList),</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  Num &gt; 0 -&gt;</span><br><span class=\"line\">                lists:foreach(</span><br><span class=\"line\">                    fun(Seq) -&gt;</span><br><span class=\"line\">                        PlayerSkyBless = lists:nth(Seq,SortList),</span><br><span class=\"line\">                        lib_ets:insert(sky_bless_player_ranking,<span class=\"comment\">#sky_lantern_bless_player_ranking&#123;</span></span><br><span class=\"line\">                            player_id = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.player_id,ranking = Seq&#125;,replace),</span></span><br><span class=\"line\">                        BlessRanking = <span class=\"comment\">#sky_lantern_bless_ranking&#123;</span></span><br><span class=\"line\">                            ranking = Seq,</span><br><span class=\"line\">                            player_id = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.player_id,</span></span><br><span class=\"line\">                            <span class=\"built_in\">times</span>   = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.bless_times,</span></span><br><span class=\"line\">                            bless_time = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.last_time</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        lib_ets:insert(sky_bless_ranking,BlessRanking,replace)</span><br><span class=\"line\">                    end,</span><br><span class=\"line\">                    lists:seq(1,Num)</span><br><span class=\"line\">                );</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                noop</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran).</span><br></pre></td></tr></table></figure></p>","more":"<p>2.处理玩家排行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deal_update_player_ranking(PlayerId) -&gt;</span><br><span class=\"line\">    PlayerSkyBless = get_player_st_sky_bless(PlayerId),</span><br><span class=\"line\">    BlessTimes = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.bless_times,</span></span><br><span class=\"line\">    BlessTime  = PlayerSkyBless <span class=\"comment\">#player_st_sky_bless.last_time,</span></span><br><span class=\"line\">    NowRanking = get_sky_bless_player_ranking(PlayerId),</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  NowRanking == 0 -&gt;</span><br><span class=\"line\">                Len = length(get_all_sky_bless_ranking()),</span><br><span class=\"line\">                NewRanking = <span class=\"comment\">#sky_lantern_bless_ranking&#123;</span></span><br><span class=\"line\">                    ranking     = Len + 1,</span><br><span class=\"line\">                    player_id   = PlayerId,</span><br><span class=\"line\">                    <span class=\"built_in\">times</span>       = BlessTimes,</span><br><span class=\"line\">                    bless_time  = BlessTime</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                lib_ets:insert(sky_bless_ranking,NewRanking,replace),</span><br><span class=\"line\">                lib_ets:insert(sky_bless_player_ranking,<span class=\"comment\">#sky_lantern_bless_player_ranking&#123;</span></span><br><span class=\"line\">                    player_id = PlayerId,ranking = Len + 1&#125;,replace),</span><br><span class=\"line\">                ranking_sort(PlayerId,BlessTimes,BlessTime,Len);</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                lib_ets:update(sky_bless_ranking,NowRanking,[&#123;<span class=\"comment\">#sky_lantern_bless_ranking.times,BlessTimes&#125;,</span></span><br><span class=\"line\">                    &#123;<span class=\"comment\">#sky_lantern_bless_ranking.bless_time,BlessTime&#125;]),</span></span><br><span class=\"line\">                ranking_sort(PlayerId,BlessTimes,BlessTime,NowRanking - 1)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran).</span><br><span class=\"line\"></span><br><span class=\"line\">ranking_sort(_,_,_,0) -&gt;</span><br><span class=\"line\">    noop;</span><br><span class=\"line\"></span><br><span class=\"line\">ranking_sort(PlayerId,BlessTimes,Time,Ranking) -&gt;</span><br><span class=\"line\">    BlessRanking = get_sky_bless_ranking(Ranking),</span><br><span class=\"line\">    <span class=\"keyword\">case</span> sort(BlessTimes,Time,BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.times,BlessRanking #sky_lantern_bless_ranking.bless_time) of</span></span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            NewRanking = <span class=\"comment\">#sky_lantern_bless_ranking&#123;</span></span><br><span class=\"line\">                ranking = Ranking,</span><br><span class=\"line\">                player_id = PlayerId,</span><br><span class=\"line\">                <span class=\"built_in\">times</span>   = BlessTimes,</span><br><span class=\"line\">                bless_time = Time</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ARanking = <span class=\"comment\">#sky_lantern_bless_ranking&#123;</span></span><br><span class=\"line\">                ranking = Ranking + 1,</span><br><span class=\"line\">                player_id = BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.player_id,</span></span><br><span class=\"line\">                <span class=\"built_in\">times</span> = BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.times,</span></span><br><span class=\"line\">                bless_time = BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.bless_time</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            lib_ets:insert(sky_bless_player_ranking,<span class=\"comment\">#sky_lantern_bless_player_ranking&#123;</span></span><br><span class=\"line\">                player_id = BlessRanking <span class=\"comment\">#sky_lantern_bless_ranking.player_id,ranking = Ranking + 1&#125;,replace),</span></span><br><span class=\"line\">            lib_ets:insert(sky_bless_player_ranking,<span class=\"comment\">#sky_lantern_bless_player_ranking&#123;</span></span><br><span class=\"line\">                player_id = PlayerId,ranking = Ranking&#125;,replace),</span><br><span class=\"line\">            lib_ets:insert(sky_bless_ranking,NewRanking,replace),</span><br><span class=\"line\">            lib_ets:insert(sky_bless_ranking,ARanking,replace),</span><br><span class=\"line\">            ranking_sort(PlayerId,BlessTimes,Time,Ranking - 1);</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            noop</span><br><span class=\"line\">    end.</span><br></pre></td></tr></table></figure></p>\n<p>3.通过公共管理进程对活动进行管理发奖及消息通知<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handle_cast(&#123;async_send&#125;, &#123;<span class=\"literal\">true</span>,State&#125;) -&gt;</span><br><span class=\"line\">    catch api_st_sky_bless:timer_notify(State),</span><br><span class=\"line\">    start_timer(1),</span><br><span class=\"line\">    &#123;noreply, &#123;<span class=\"literal\">true</span>,[]&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">handle_cast(&#123;activity_stop&#125;,State) -&gt;</span><br><span class=\"line\">    mod_st_sky_bless:give_award(),</span><br><span class=\"line\">    &#123;noreply,State&#125;;</span><br></pre></td></tr></table></figure></p>"},{"title":"游戏中大型自动比赛玩法设计","date":"2019-07-30T08:08:45.000Z","_content":"\n争霸赛赛程范例\t\t\n3月1日 0：00~3月3日 12:00\t报名\t40级以上手动报名\n3月3日 13：00\t淘汰赛\t\"13:00取数据，提前1小时向玩家发送邮件提醒\n13:10开始出战报，每隔5分钟出1场战报\n天榜负5局进入地榜，地榜负5局则被淘汰\"\n3月4日 14:00\t16强赛（32进16）\t\"每小时1局，每局取1次数据，5局3胜制\n天地榜同时进行\n比赛开始前1小时向玩家发送邮件提醒取数据制度\"\n3月5日 14:00\t16进8\t\n3月6日 14:00\t8进4\t\n3月7日 14:00\t半决赛\t\n3月8日 14:00\t决赛\t\n3月8日 决赛全部结束\t统一发放奖励\t\n\n\n比赛的时间控制由单独时间进程来控制时间的推进，相当于php中的crontab,表结构上一个玩家比赛进程表player_race,\n一个各阶段玩家成员信息表player_race_member，后期系统匹配各阶段玩家匹配信息表player_race_opponent，\n一个各阶段玩家战报信息表player_race_report，一个各阶段玩家结果表player_race_result，\n玩家表可以分为  玩家比赛信息表  player_st_jjc_race 玩家匹配信息表 player_st_jjc_race_opponent 玩家日志表 player_st_jjc_race_score_log\n\n第一步 报名\n很简单直接报名请求记录玩家数据就行,报名时间结束时触发事件对所有玩家进行匹配\n``` bash\ncase try_get_player_server_war(PlayerId) of\n    null ->\n        Tran = fun() ->\n            game_db:write(#player_server_war {\n                player_id  = PlayerId, \n                apply_time = lib_misc:get_local_timestamp()\n            })\n            % mod_deploy:get(PlayerId, ?RACE_SERVER_WAR)\n        end, \n        game_db:do(Tran);\n    _ ->\n        exit(already_apply)\nend.\n\n% 本服报名结束手机玩家数据\napply_over() ->\n    List = get_all_player_server_war(),\n    Tran = fun() ->\n        lists:foreach(\n            fun(Rec) ->\n                game_db:write(Rec #player_server_war {\n                    race_step = ?RS_TIAN_BANG_TAOTAI\n                })\n            end, \n            List\n        )\n    end,\n    game_db:do(Tran),\n    ?INFO(\"apply_over\",[]),\n    ZoneList = lists:foldl(\n        fun(PlayerServerWar, R) ->\n            [PlayerServerWar #player_server_war.player_id | R]\n        end,\n        [],\n        get_all_player_server_war()\n    ),\n\n    mod_race:init_race_member(\n       ?RACE_SERVER_WAR,\n       0,\n       ?RS_TIAN_BANG_TAOTAI,\n       0,\n       ZoneList,\n       normal\n    ).\n```\n注意的是用一个单独的进程来管理活动步骤开启结束\n![Er15646489002180](Er15646489002180.png)\n<!-- more -->\n``` bash\n% 每一个活动开始所要做的处理\nactivity_start (ActivityId) ->\n    case mod_server:is_game_server() of\n        true ->\n            xdh_race_srv:activity_start(ActivityId);\n        false ->\n            case mod_server:is_cc_server() of\n                true ->\n                    % cc_server_war_cron_srv:activity_start(Id);\n                    noop;\n                false ->\n                    noop\n            end\n    end.\n\n% 每一个活动结束所要做的处理\nactivity_stop (ActivityId) ->\n   case mod_server:is_game_server() of\n        true ->\n            xdh_race_srv:activity_stop(ActivityId);\n        false ->\n            case mod_server:is_cc_server() of\n                true ->\n                    % cc_server_war_cron_srv:activity_stop(Id);\n                    noop;\n                false ->\n                    noop\n            end\n    end.\n```\n在到点时间的相应上做特殊处理\n\n第二步 开启淘汰赛\n淘汰赛的开启同样用时间进程来控制，到点后调用启动方法\n![Er15646493808263](Er15646493808263.png) （判断结束 、清上一轮数据）\n淘汰赛相当于一个递归的过程，全服玩家进行了一场比赛后记录玩家信息及淘汰结果直到淘汰赛结束的条件,同时需要一个全服步骤数据记录，然后循环比赛\n其中每一轮淘汰赛可分为 判断结束 、清上一轮数据 、不重复随机匹配 、 战斗及数据记录 、 循环\n![Er15647109579023](Er15647109579023.png) （不重复随机匹配 循环）\n``` bash\n<!-- 战斗部分及记录 -->\nrace_fight (RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) ->\n    #player_race {\n        race_times = RaceTimes\n    } = get_player_race(RaceId, ZoneId), \n\n    Tran = fun() ->\n        case race_call(RaceId, fight, [RaceStep, TeamIdA, TeamIdB]) of\n            [] ->\n                exit({invalid_fight, RaceId, TeamIdA, TeamIdB});\n            ReportList ->\n                {_, WinTeamId} = lists:foldr(\n                    fun(Report, {NowIndex, NowWinTeamId}) ->\n                        #war_result {\n                            winner       = {_, WinnerId}, \n                            army_result1 = #army_result {\n                                army_key = {_, PlayerIdA}\n                            }, \n                            army_result2 = #army_result {\n                                army_key = {_, PlayerIdB}\n                            }\n                        } = Report, \n\n                        NewWinTeamId = if\n                            NowIndex =:= length(ReportList) ->\n                                WinTeamId = if\n                                    WinnerId =:= PlayerIdA ->\n                                        TeamIdA;\n                                    true ->\n                                        TeamIdB\n                                end, \n\n                                game_db:write(#player_race_result {\n                                    race_id     = RaceId, \n                                    zone_id     = ZoneId, \n                                    race_step   = RaceStep, \n                                    player_id   = TeamIdA, \n                                    player_id1  = TeamIdB, \n                                    race_times  = RaceTimes, \n                                    version     = ?GET_ENV(vsn, \"\"), \n                                    report_time = lib_misc:get_local_timestamp(), \n                                    winner_id   = WinTeamId\n                                }), \n\n                                WinTeamId;\n                            true ->\n                                NowWinTeamId\n                        end, \n\n                        game_db:write(#player_race_report {\n                            race_id     = RaceId, \n                            zone_id     = ZoneId, \n                            race_step   = RaceStep, \n                            player_id   = TeamIdA, \n                            race_times  = RaceTimes, \n                            index       = NowIndex, \n                            attacker_id = PlayerIdA, \n                            defender_id = PlayerIdB, \n                            winner_id   = WinnerId, \n                            report_id   = war_report_srv:record_war_report(Report, 30 * 86400)\n                        }), \n\n                        {\n                            NowIndex - 1, \n                            NewWinTeamId\n                        }\n                    end, \n                    {length(ReportList), 0}, \n                    ReportList\n                ), \n\n                WinTeamId\n        end\n    end, \n\n    {atomic, TeamId} = game_db:do(Tran), \n    TeamId.\n```\n在淘汰赛结束后，将剩余晋级玩家进入晋级赛步骤，同时初始化随机匹配\n![Er15647120482687](Er15647120482687.png) \n一下两种匹配方式\n``` bash\ninit_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, normal) ->\n    Tran = fun() ->\n        lists:foldl(\n            fun(TeamId, NowIndex) ->\n                game_db:write(#player_race_member {\n                    race_id   = RaceId, \n                    race_step = RaceStep, \n                    zone_id   = ZoneId, \n                    group     = Group, \n                    index     = NowIndex, \n                    player_id = TeamId\n                }), \n\n                NowIndex + 1\n            end, \n            1, \n            TeamIdList\n        )\n    end, \n\n    game_db:do(Tran);\n\ninit_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, random) ->\n    #race_step {\n        match_num = MatchNum\n    } = get_race_step(RaceStep), \n\n    Step = get_index_step(length(TeamIdList), MatchNum), \n\n    Tran = fun() ->\n        lists:foldl(\n            fun(TeamId, NowIndex) ->\n                game_db:write(#player_race_member {\n                    race_id   = RaceId, \n                    race_step = RaceStep, \n                    zone_id   = ZoneId, \n                    group     = Group, \n                    index     = NowIndex, \n                    player_id = TeamId\n                }), \n\n                if\n                    NowIndex + Step > MatchNum * 2 ->\n                        1 + Step div 2;\n                    true ->\n                        NowIndex + Step\n                end\n            end, \n            1, \n            lib_misc:shuffle(TeamIdList)\n        )\n    end, \n\n    game_db:do(Tran);\n```\n\n第三步 战报\n战报开启也是进程时间来控制\n![Er15647145661718](Er15647145661718.png)\n\n第四步 开启晋级赛\n同样是进程计时器开启，比赛流程除了一局定输赢以外和淘汰赛基本一致，比赛也是一次性打完，战报根据时间慢慢的播放\n``` bash \n% 开启杯赛\ntimer_start_race() ->\n    case mod_server:is_cc_server() of\n        true ->\n            % cc_server_war_cron_srv:start_race(0);\n            noop;\n        false ->\n            Times = mod_server:get_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES),\n            xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,Times + 1]),\n            start_race(),\n            mod_timer:reset(1, ?TIMER_XIAN_DAO_HUI_BEI_SAI)\n    end. \n\nstart_race() ->\n    RaceStep    = get_server_war_race_step(), \n    PlayerRace  = mod_race:get_player_race(?RACE_SERVER_WAR,0),\n    IsOver = case mod_race:start_race(?RACE_SERVER_WAR, 0, RaceStep, 3) of\n        true ->\n            true;\n        _ -> \n            mod_timer:reset(0, ?TIMER_XIAN_DAO_HUI_BEI_SAI, 3420),\n            false\n    end,\n\n    RaceTimes = if\n        RaceStep =/= PlayerRace #player_race.race_step ->\n            1;\n        true ->\n            PlayerRace #player_race.race_times + 1\n    end,\n    xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,RaceTimes]),\n    deal_receive_beisai_data(RaceStep,IsOver).\n\n```\n战斗部分基本一致多一个匹配结果记录表\n``` bash\nstart_race(RaceId, ZoneId, RaceStep, WinTimes) ->\n    #race_step {\n        match_num = MatchNum, \n        next_race = NextRace, \n        next_step = NextStep\n    } = get_race_step(RaceStep), \n\n    Tran = fun() ->\n        PlayerRace = get_player_race(RaceId, ZoneId), \n\n        if\n            PlayerRace #player_race.race_step =:= RaceStep,\n                PlayerRace #player_race.race_times =/= 0 ->\n                case check_race_over(RaceId, ZoneId, RaceStep) of\n                    true ->\n                        exit(race_over);\n                    _ ->\n                        noop\n                end, \n\n                game_db:write(PlayerRace #player_race {\n                    race_times = PlayerRace #player_race.race_times + 1, \n                    last_time  = lib_misc:get_local_timestamp()\n                });\n            true ->\n                clear_race_data(RaceId, ZoneId, RaceStep), \n                init_race_opponent(RaceId, ZoneId, RaceStep), \n\n                game_db:write(PlayerRace #player_race {\n                    race_step  = RaceStep, \n                    race_times = 1, \n                    last_time  = lib_misc:get_local_timestamp(), \n                    win_times  = WinTimes\n                })\n        end, \n\n        lists:foreach(\n            fun(Group) ->\n                lists:foreach(\n                    fun(Index) ->\n                        RaceMemberA = try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2 - 1), \n                        RaceMemberB = try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2), \n\n                        if\n                            RaceMemberA =:= null, RaceMemberB =:= null ->\n                                noop;\n                            %%轮空为全空或者B为空\n                            % RaceMemberA =:= null ->\n                            %     game_db:write(#player_race_member {\n                            %         race_id   = RaceId, \n                            %         race_step = NextRace, \n                            %         group     = Group, \n                            %         index     = Index, \n                            %         player_id = RaceMemberB #player_race_member.player_id\n                            %     });\n                            RaceMemberB =:= null ->\n                                TeamIdA  = RaceMemberA #player_race_member.player_id, \n\n                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of\n                                    true ->\n                                        noop;\n                                    _ ->\n                                        Opponent = try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), \n\n                                        game_db:write(Opponent #player_race_opponent {\n                                            winner_id = TeamIdA\n                                        }), \n\n                                        game_db:write(#player_race_member {\n                                            race_id   = RaceId,\n                                            zone_id   = ZoneId, \n                                            race_step = NextRace, \n                                            group     = Group, \n                                            index     = Index, \n                                            player_id = TeamIdA\n                                        }), \n\n                                        race_call(RaceId, race_win, [TeamIdA, Group, RaceStep, NextRace])\n                                end;\n                            true ->\n                                TeamIdA = RaceMemberA #player_race_member.player_id, \n                                TeamIdB = RaceMemberB #player_race_member.player_id, \n\n                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of\n                                    true ->\n                                        noop;\n                                    _ ->\n                                        case race_fight(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of\n                                            0 ->\n                                                noop;\n                                            WinnerId ->\n                                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of\n                                                    true ->\n                                                        Opponent = try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), \n\n                                                        game_db:write(Opponent #player_race_opponent {\n                                                            winner_id = WinnerId\n                                                        }), \n\n                                                        game_db:write(#player_race_member {\n                                                            race_id   = RaceId,\n                                                            zone_id   = ZoneId, \n                                                            race_step = NextRace, \n                                                            group     = Group, \n                                                            index     = Index, \n                                                            player_id = WinnerId\n                                                        }), \n\n                                                        race_call(RaceId, race_win, [WinnerId, Group, RaceStep, NextRace]);\n                                                    _ ->\n                                                        noop\n                                                end\n                                        end\n                                end\n                        end\n                    end, \n                    lists:seq(1, MatchNum)\n                )\n            end, \n            get_all_race_group()\n        ), \n\n        IsOver = check_race_over(RaceId, ZoneId, RaceStep), \n\n        if\n            IsOver =:= true ->\n                NowPlayerRace = get_player_race(RaceId, ZoneId), \n\n                game_db:write(NowPlayerRace #player_race {\n                    race_step  = NextStep, \n                    race_times = 0, \n                    last_time  = lib_misc:get_local_timestamp()\n                });\n            true ->\n                noop\n        end, \n\n        IsOver\n    end, \n\n    {atomic, Result} = game_db:do(Tran), \n    Result.\n```\n\n第五步 出晋级赛战报\n``` bash \n% 播报战报及通知\ndeal_receive_beisai_data(RaceStep,IsOver) ->\n    Tran = fun() ->\n        % write_race_data(RaceReportList,RaceResultList,MemberList,OpponentList, WorldWarList),\n        if  \n            IsOver =:= true ->\n                #race_step {\n                    next_step = NextStep\n                } = mod_race:get_race_step(RaceStep),\n                % return_bet(RaceStep),\n                if\n                    RaceStep =:= ?RS_RACE_1 ->\n                        % give_award(),给予奖励\n                        ZoneId = 0,\n                        case mod_race:try_get_player_race_member(?RACE_SERVER_WAR, ZoneId, ?RS_RACE_1_OVER, ?RG_TIAN_BANG, 1) of\n                            null ->\n                                noop;\n                            Member ->\n                                ServerId   = mod_player:get_player_data(Member #player_race_member.player_id,server_id),\n                                ServerName = mod_server:get_server_name(ServerId),\n                                NickName   = mod_player:get_player_data(Member #player_race_member.player_id,nickname),\n                                api_chat:centre_screen_message_notify(\n                                    ?MEST_XIAN_DAO_HUI_GUAN_JUN, \n                                    [{ServerName},{NickName}]\n                                )\n                        end;\n                    true ->\n                        noop\n                end,\n                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_STEP, NextStep), \n                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES, 0),\n                mod_timer:close(1,?TIMER_XIAN_DAO_HUI_BEI_SAI);\n            true ->\n                noop\n        end\n    end,\n    game_db:do(Tran).\n    % api_server_war:notify_new_report().\n```","source":"_posts/游戏中大型比赛玩法设计思路.md","raw":"---\ntitle: 游戏中大型自动比赛玩法设计\ndate: 2019-07-30 16:08:45\ntags:\n\t游戏\n---\n\n争霸赛赛程范例\t\t\n3月1日 0：00~3月3日 12:00\t报名\t40级以上手动报名\n3月3日 13：00\t淘汰赛\t\"13:00取数据，提前1小时向玩家发送邮件提醒\n13:10开始出战报，每隔5分钟出1场战报\n天榜负5局进入地榜，地榜负5局则被淘汰\"\n3月4日 14:00\t16强赛（32进16）\t\"每小时1局，每局取1次数据，5局3胜制\n天地榜同时进行\n比赛开始前1小时向玩家发送邮件提醒取数据制度\"\n3月5日 14:00\t16进8\t\n3月6日 14:00\t8进4\t\n3月7日 14:00\t半决赛\t\n3月8日 14:00\t决赛\t\n3月8日 决赛全部结束\t统一发放奖励\t\n\n\n比赛的时间控制由单独时间进程来控制时间的推进，相当于php中的crontab,表结构上一个玩家比赛进程表player_race,\n一个各阶段玩家成员信息表player_race_member，后期系统匹配各阶段玩家匹配信息表player_race_opponent，\n一个各阶段玩家战报信息表player_race_report，一个各阶段玩家结果表player_race_result，\n玩家表可以分为  玩家比赛信息表  player_st_jjc_race 玩家匹配信息表 player_st_jjc_race_opponent 玩家日志表 player_st_jjc_race_score_log\n\n第一步 报名\n很简单直接报名请求记录玩家数据就行,报名时间结束时触发事件对所有玩家进行匹配\n``` bash\ncase try_get_player_server_war(PlayerId) of\n    null ->\n        Tran = fun() ->\n            game_db:write(#player_server_war {\n                player_id  = PlayerId, \n                apply_time = lib_misc:get_local_timestamp()\n            })\n            % mod_deploy:get(PlayerId, ?RACE_SERVER_WAR)\n        end, \n        game_db:do(Tran);\n    _ ->\n        exit(already_apply)\nend.\n\n% 本服报名结束手机玩家数据\napply_over() ->\n    List = get_all_player_server_war(),\n    Tran = fun() ->\n        lists:foreach(\n            fun(Rec) ->\n                game_db:write(Rec #player_server_war {\n                    race_step = ?RS_TIAN_BANG_TAOTAI\n                })\n            end, \n            List\n        )\n    end,\n    game_db:do(Tran),\n    ?INFO(\"apply_over\",[]),\n    ZoneList = lists:foldl(\n        fun(PlayerServerWar, R) ->\n            [PlayerServerWar #player_server_war.player_id | R]\n        end,\n        [],\n        get_all_player_server_war()\n    ),\n\n    mod_race:init_race_member(\n       ?RACE_SERVER_WAR,\n       0,\n       ?RS_TIAN_BANG_TAOTAI,\n       0,\n       ZoneList,\n       normal\n    ).\n```\n注意的是用一个单独的进程来管理活动步骤开启结束\n![Er15646489002180](Er15646489002180.png)\n<!-- more -->\n``` bash\n% 每一个活动开始所要做的处理\nactivity_start (ActivityId) ->\n    case mod_server:is_game_server() of\n        true ->\n            xdh_race_srv:activity_start(ActivityId);\n        false ->\n            case mod_server:is_cc_server() of\n                true ->\n                    % cc_server_war_cron_srv:activity_start(Id);\n                    noop;\n                false ->\n                    noop\n            end\n    end.\n\n% 每一个活动结束所要做的处理\nactivity_stop (ActivityId) ->\n   case mod_server:is_game_server() of\n        true ->\n            xdh_race_srv:activity_stop(ActivityId);\n        false ->\n            case mod_server:is_cc_server() of\n                true ->\n                    % cc_server_war_cron_srv:activity_stop(Id);\n                    noop;\n                false ->\n                    noop\n            end\n    end.\n```\n在到点时间的相应上做特殊处理\n\n第二步 开启淘汰赛\n淘汰赛的开启同样用时间进程来控制，到点后调用启动方法\n![Er15646493808263](Er15646493808263.png) （判断结束 、清上一轮数据）\n淘汰赛相当于一个递归的过程，全服玩家进行了一场比赛后记录玩家信息及淘汰结果直到淘汰赛结束的条件,同时需要一个全服步骤数据记录，然后循环比赛\n其中每一轮淘汰赛可分为 判断结束 、清上一轮数据 、不重复随机匹配 、 战斗及数据记录 、 循环\n![Er15647109579023](Er15647109579023.png) （不重复随机匹配 循环）\n``` bash\n<!-- 战斗部分及记录 -->\nrace_fight (RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) ->\n    #player_race {\n        race_times = RaceTimes\n    } = get_player_race(RaceId, ZoneId), \n\n    Tran = fun() ->\n        case race_call(RaceId, fight, [RaceStep, TeamIdA, TeamIdB]) of\n            [] ->\n                exit({invalid_fight, RaceId, TeamIdA, TeamIdB});\n            ReportList ->\n                {_, WinTeamId} = lists:foldr(\n                    fun(Report, {NowIndex, NowWinTeamId}) ->\n                        #war_result {\n                            winner       = {_, WinnerId}, \n                            army_result1 = #army_result {\n                                army_key = {_, PlayerIdA}\n                            }, \n                            army_result2 = #army_result {\n                                army_key = {_, PlayerIdB}\n                            }\n                        } = Report, \n\n                        NewWinTeamId = if\n                            NowIndex =:= length(ReportList) ->\n                                WinTeamId = if\n                                    WinnerId =:= PlayerIdA ->\n                                        TeamIdA;\n                                    true ->\n                                        TeamIdB\n                                end, \n\n                                game_db:write(#player_race_result {\n                                    race_id     = RaceId, \n                                    zone_id     = ZoneId, \n                                    race_step   = RaceStep, \n                                    player_id   = TeamIdA, \n                                    player_id1  = TeamIdB, \n                                    race_times  = RaceTimes, \n                                    version     = ?GET_ENV(vsn, \"\"), \n                                    report_time = lib_misc:get_local_timestamp(), \n                                    winner_id   = WinTeamId\n                                }), \n\n                                WinTeamId;\n                            true ->\n                                NowWinTeamId\n                        end, \n\n                        game_db:write(#player_race_report {\n                            race_id     = RaceId, \n                            zone_id     = ZoneId, \n                            race_step   = RaceStep, \n                            player_id   = TeamIdA, \n                            race_times  = RaceTimes, \n                            index       = NowIndex, \n                            attacker_id = PlayerIdA, \n                            defender_id = PlayerIdB, \n                            winner_id   = WinnerId, \n                            report_id   = war_report_srv:record_war_report(Report, 30 * 86400)\n                        }), \n\n                        {\n                            NowIndex - 1, \n                            NewWinTeamId\n                        }\n                    end, \n                    {length(ReportList), 0}, \n                    ReportList\n                ), \n\n                WinTeamId\n        end\n    end, \n\n    {atomic, TeamId} = game_db:do(Tran), \n    TeamId.\n```\n在淘汰赛结束后，将剩余晋级玩家进入晋级赛步骤，同时初始化随机匹配\n![Er15647120482687](Er15647120482687.png) \n一下两种匹配方式\n``` bash\ninit_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, normal) ->\n    Tran = fun() ->\n        lists:foldl(\n            fun(TeamId, NowIndex) ->\n                game_db:write(#player_race_member {\n                    race_id   = RaceId, \n                    race_step = RaceStep, \n                    zone_id   = ZoneId, \n                    group     = Group, \n                    index     = NowIndex, \n                    player_id = TeamId\n                }), \n\n                NowIndex + 1\n            end, \n            1, \n            TeamIdList\n        )\n    end, \n\n    game_db:do(Tran);\n\ninit_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, random) ->\n    #race_step {\n        match_num = MatchNum\n    } = get_race_step(RaceStep), \n\n    Step = get_index_step(length(TeamIdList), MatchNum), \n\n    Tran = fun() ->\n        lists:foldl(\n            fun(TeamId, NowIndex) ->\n                game_db:write(#player_race_member {\n                    race_id   = RaceId, \n                    race_step = RaceStep, \n                    zone_id   = ZoneId, \n                    group     = Group, \n                    index     = NowIndex, \n                    player_id = TeamId\n                }), \n\n                if\n                    NowIndex + Step > MatchNum * 2 ->\n                        1 + Step div 2;\n                    true ->\n                        NowIndex + Step\n                end\n            end, \n            1, \n            lib_misc:shuffle(TeamIdList)\n        )\n    end, \n\n    game_db:do(Tran);\n```\n\n第三步 战报\n战报开启也是进程时间来控制\n![Er15647145661718](Er15647145661718.png)\n\n第四步 开启晋级赛\n同样是进程计时器开启，比赛流程除了一局定输赢以外和淘汰赛基本一致，比赛也是一次性打完，战报根据时间慢慢的播放\n``` bash \n% 开启杯赛\ntimer_start_race() ->\n    case mod_server:is_cc_server() of\n        true ->\n            % cc_server_war_cron_srv:start_race(0);\n            noop;\n        false ->\n            Times = mod_server:get_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES),\n            xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,Times + 1]),\n            start_race(),\n            mod_timer:reset(1, ?TIMER_XIAN_DAO_HUI_BEI_SAI)\n    end. \n\nstart_race() ->\n    RaceStep    = get_server_war_race_step(), \n    PlayerRace  = mod_race:get_player_race(?RACE_SERVER_WAR,0),\n    IsOver = case mod_race:start_race(?RACE_SERVER_WAR, 0, RaceStep, 3) of\n        true ->\n            true;\n        _ -> \n            mod_timer:reset(0, ?TIMER_XIAN_DAO_HUI_BEI_SAI, 3420),\n            false\n    end,\n\n    RaceTimes = if\n        RaceStep =/= PlayerRace #player_race.race_step ->\n            1;\n        true ->\n            PlayerRace #player_race.race_times + 1\n    end,\n    xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,RaceTimes]),\n    deal_receive_beisai_data(RaceStep,IsOver).\n\n```\n战斗部分基本一致多一个匹配结果记录表\n``` bash\nstart_race(RaceId, ZoneId, RaceStep, WinTimes) ->\n    #race_step {\n        match_num = MatchNum, \n        next_race = NextRace, \n        next_step = NextStep\n    } = get_race_step(RaceStep), \n\n    Tran = fun() ->\n        PlayerRace = get_player_race(RaceId, ZoneId), \n\n        if\n            PlayerRace #player_race.race_step =:= RaceStep,\n                PlayerRace #player_race.race_times =/= 0 ->\n                case check_race_over(RaceId, ZoneId, RaceStep) of\n                    true ->\n                        exit(race_over);\n                    _ ->\n                        noop\n                end, \n\n                game_db:write(PlayerRace #player_race {\n                    race_times = PlayerRace #player_race.race_times + 1, \n                    last_time  = lib_misc:get_local_timestamp()\n                });\n            true ->\n                clear_race_data(RaceId, ZoneId, RaceStep), \n                init_race_opponent(RaceId, ZoneId, RaceStep), \n\n                game_db:write(PlayerRace #player_race {\n                    race_step  = RaceStep, \n                    race_times = 1, \n                    last_time  = lib_misc:get_local_timestamp(), \n                    win_times  = WinTimes\n                })\n        end, \n\n        lists:foreach(\n            fun(Group) ->\n                lists:foreach(\n                    fun(Index) ->\n                        RaceMemberA = try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2 - 1), \n                        RaceMemberB = try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2), \n\n                        if\n                            RaceMemberA =:= null, RaceMemberB =:= null ->\n                                noop;\n                            %%轮空为全空或者B为空\n                            % RaceMemberA =:= null ->\n                            %     game_db:write(#player_race_member {\n                            %         race_id   = RaceId, \n                            %         race_step = NextRace, \n                            %         group     = Group, \n                            %         index     = Index, \n                            %         player_id = RaceMemberB #player_race_member.player_id\n                            %     });\n                            RaceMemberB =:= null ->\n                                TeamIdA  = RaceMemberA #player_race_member.player_id, \n\n                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of\n                                    true ->\n                                        noop;\n                                    _ ->\n                                        Opponent = try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), \n\n                                        game_db:write(Opponent #player_race_opponent {\n                                            winner_id = TeamIdA\n                                        }), \n\n                                        game_db:write(#player_race_member {\n                                            race_id   = RaceId,\n                                            zone_id   = ZoneId, \n                                            race_step = NextRace, \n                                            group     = Group, \n                                            index     = Index, \n                                            player_id = TeamIdA\n                                        }), \n\n                                        race_call(RaceId, race_win, [TeamIdA, Group, RaceStep, NextRace])\n                                end;\n                            true ->\n                                TeamIdA = RaceMemberA #player_race_member.player_id, \n                                TeamIdB = RaceMemberB #player_race_member.player_id, \n\n                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of\n                                    true ->\n                                        noop;\n                                    _ ->\n                                        case race_fight(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of\n                                            0 ->\n                                                noop;\n                                            WinnerId ->\n                                                case check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of\n                                                    true ->\n                                                        Opponent = try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), \n\n                                                        game_db:write(Opponent #player_race_opponent {\n                                                            winner_id = WinnerId\n                                                        }), \n\n                                                        game_db:write(#player_race_member {\n                                                            race_id   = RaceId,\n                                                            zone_id   = ZoneId, \n                                                            race_step = NextRace, \n                                                            group     = Group, \n                                                            index     = Index, \n                                                            player_id = WinnerId\n                                                        }), \n\n                                                        race_call(RaceId, race_win, [WinnerId, Group, RaceStep, NextRace]);\n                                                    _ ->\n                                                        noop\n                                                end\n                                        end\n                                end\n                        end\n                    end, \n                    lists:seq(1, MatchNum)\n                )\n            end, \n            get_all_race_group()\n        ), \n\n        IsOver = check_race_over(RaceId, ZoneId, RaceStep), \n\n        if\n            IsOver =:= true ->\n                NowPlayerRace = get_player_race(RaceId, ZoneId), \n\n                game_db:write(NowPlayerRace #player_race {\n                    race_step  = NextStep, \n                    race_times = 0, \n                    last_time  = lib_misc:get_local_timestamp()\n                });\n            true ->\n                noop\n        end, \n\n        IsOver\n    end, \n\n    {atomic, Result} = game_db:do(Tran), \n    Result.\n```\n\n第五步 出晋级赛战报\n``` bash \n% 播报战报及通知\ndeal_receive_beisai_data(RaceStep,IsOver) ->\n    Tran = fun() ->\n        % write_race_data(RaceReportList,RaceResultList,MemberList,OpponentList, WorldWarList),\n        if  \n            IsOver =:= true ->\n                #race_step {\n                    next_step = NextStep\n                } = mod_race:get_race_step(RaceStep),\n                % return_bet(RaceStep),\n                if\n                    RaceStep =:= ?RS_RACE_1 ->\n                        % give_award(),给予奖励\n                        ZoneId = 0,\n                        case mod_race:try_get_player_race_member(?RACE_SERVER_WAR, ZoneId, ?RS_RACE_1_OVER, ?RG_TIAN_BANG, 1) of\n                            null ->\n                                noop;\n                            Member ->\n                                ServerId   = mod_player:get_player_data(Member #player_race_member.player_id,server_id),\n                                ServerName = mod_server:get_server_name(ServerId),\n                                NickName   = mod_player:get_player_data(Member #player_race_member.player_id,nickname),\n                                api_chat:centre_screen_message_notify(\n                                    ?MEST_XIAN_DAO_HUI_GUAN_JUN, \n                                    [{ServerName},{NickName}]\n                                )\n                        end;\n                    true ->\n                        noop\n                end,\n                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_STEP, NextStep), \n                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES, 0),\n                mod_timer:close(1,?TIMER_XIAN_DAO_HUI_BEI_SAI);\n            true ->\n                noop\n        end\n    end,\n    game_db:do(Tran).\n    % api_server_war:notify_new_report().\n```","slug":"游戏中大型比赛玩法设计思路","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91m000y1d8n0y7l0uye","content":"<p>争霸赛赛程范例<br>3月1日 0：00~3月3日 12:00    报名    40级以上手动报名<br>3月3日 13：00    淘汰赛    “13:00取数据，提前1小时向玩家发送邮件提醒<br>13:10开始出战报，每隔5分钟出1场战报<br>天榜负5局进入地榜，地榜负5局则被淘汰”<br>3月4日 14:00    16强赛（32进16）    “每小时1局，每局取1次数据，5局3胜制<br>天地榜同时进行<br>比赛开始前1小时向玩家发送邮件提醒取数据制度”<br>3月5日 14:00    16进8<br>3月6日 14:00    8进4<br>3月7日 14:00    半决赛<br>3月8日 14:00    决赛<br>3月8日 决赛全部结束    统一发放奖励    </p>\n<p>比赛的时间控制由单独时间进程来控制时间的推进，相当于php中的crontab,表结构上一个玩家比赛进程表player_race,<br>一个各阶段玩家成员信息表player_race_member，后期系统匹配各阶段玩家匹配信息表player_race_opponent，<br>一个各阶段玩家战报信息表player_race_report，一个各阶段玩家结果表player_race_result，<br>玩家表可以分为  玩家比赛信息表  player_st_jjc_race 玩家匹配信息表 player_st_jjc_race_opponent 玩家日志表 player_st_jjc_race_score_log</p>\n<p>第一步 报名<br>很简单直接报名请求记录玩家数据就行,报名时间结束时触发事件对所有玩家进行匹配<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> try_get_player_server_war(PlayerId) of</span><br><span class=\"line\">    null -&gt;</span><br><span class=\"line\">        Tran = fun() -&gt;</span><br><span class=\"line\">            game_db:write(<span class=\"comment\">#player_server_war &#123;</span></span><br><span class=\"line\">                player_id  = PlayerId, </span><br><span class=\"line\">                apply_time = lib_misc:get_local_timestamp()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            % mod_deploy:get(PlayerId, ?RACE_SERVER_WAR)</span><br><span class=\"line\">        end, </span><br><span class=\"line\">        game_db:<span class=\"keyword\">do</span>(Tran);</span><br><span class=\"line\">    _ -&gt;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(already_apply)</span><br><span class=\"line\">end.</span><br><span class=\"line\"></span><br><span class=\"line\">% 本服报名结束手机玩家数据</span><br><span class=\"line\">apply_over() -&gt;</span><br><span class=\"line\">    List = get_all_player_server_war(),</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        lists:foreach(</span><br><span class=\"line\">            fun(Rec) -&gt;</span><br><span class=\"line\">                game_db:write(Rec <span class=\"comment\">#player_server_war &#123;</span></span><br><span class=\"line\">                    race_step = ?RS_TIAN_BANG_TAOTAI</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            end, </span><br><span class=\"line\">            List</span><br><span class=\"line\">        )</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran),</span><br><span class=\"line\">    ?INFO(<span class=\"string\">\"apply_over\"</span>,[]),</span><br><span class=\"line\">    ZoneList = lists:foldl(</span><br><span class=\"line\">        fun(PlayerServerWar, R) -&gt;</span><br><span class=\"line\">            [PlayerServerWar <span class=\"comment\">#player_server_war.player_id | R]</span></span><br><span class=\"line\">        end,</span><br><span class=\"line\">        [],</span><br><span class=\"line\">        get_all_player_server_war()</span><br><span class=\"line\">    ),</span><br><span class=\"line\"></span><br><span class=\"line\">    mod_race:init_race_member(</span><br><span class=\"line\">       ?RACE_SERVER_WAR,</span><br><span class=\"line\">       0,</span><br><span class=\"line\">       ?RS_TIAN_BANG_TAOTAI,</span><br><span class=\"line\">       0,</span><br><span class=\"line\">       ZoneList,</span><br><span class=\"line\">       normal</span><br><span class=\"line\">    ).</span><br></pre></td></tr></table></figure></p>\n<p>注意的是用一个单独的进程来管理活动步骤开启结束<br><img src=\"Er15646489002180.png\" alt=\"Er15646489002180\"><br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% 每一个活动开始所要做的处理</span><br><span class=\"line\">activity_start (ActivityId) -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mod_server:is_game_server() of</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            xdh_race_srv:activity_start(ActivityId);</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> mod_server:is_cc_server() of</span><br><span class=\"line\">                <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                    % cc_server_war_cron_srv:activity_start(Id);</span><br><span class=\"line\">                    noop;</span><br><span class=\"line\">                <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">                    noop</span><br><span class=\"line\">            end</span><br><span class=\"line\">    end.</span><br><span class=\"line\"></span><br><span class=\"line\">% 每一个活动结束所要做的处理</span><br><span class=\"line\">activity_stop (ActivityId) -&gt;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> mod_server:is_game_server() of</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            xdh_race_srv:activity_stop(ActivityId);</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> mod_server:is_cc_server() of</span><br><span class=\"line\">                <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                    % cc_server_war_cron_srv:activity_stop(Id);</span><br><span class=\"line\">                    noop;</span><br><span class=\"line\">                <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">                    noop</span><br><span class=\"line\">            end</span><br><span class=\"line\">    end.</span><br></pre></td></tr></table></figure></p>\n<p>在到点时间的相应上做特殊处理</p>\n<p>第二步 开启淘汰赛<br>淘汰赛的开启同样用时间进程来控制，到点后调用启动方法<br><img src=\"Er15646493808263.png\" alt=\"Er15646493808263\"> （判断结束 、清上一轮数据）<br>淘汰赛相当于一个递归的过程，全服玩家进行了一场比赛后记录玩家信息及淘汰结果直到淘汰赛结束的条件,同时需要一个全服步骤数据记录，然后循环比赛<br>其中每一轮淘汰赛可分为 判断结束 、清上一轮数据 、不重复随机匹配 、 战斗及数据记录 、 循环<br><img src=\"Er15647109579023.png\" alt=\"Er15647109579023\"> （不重复随机匹配 循环）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 战斗部分及记录 --&gt;</span><br><span class=\"line\">race_fight (RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) -&gt;</span><br><span class=\"line\">    <span class=\"comment\">#player_race &#123;</span></span><br><span class=\"line\">        race_times = RaceTimes</span><br><span class=\"line\">    &#125; = get_player_race(RaceId, ZoneId), </span><br><span class=\"line\"></span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> race_call(RaceId, fight, [RaceStep, TeamIdA, TeamIdB]) of</span><br><span class=\"line\">            [] -&gt;</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(&#123;invalid_fight, RaceId, TeamIdA, TeamIdB&#125;);</span><br><span class=\"line\">            ReportList -&gt;</span><br><span class=\"line\">                &#123;_, WinTeamId&#125; = lists:foldr(</span><br><span class=\"line\">                    fun(Report, &#123;NowIndex, NowWinTeamId&#125;) -&gt;</span><br><span class=\"line\">                        <span class=\"comment\">#war_result &#123;</span></span><br><span class=\"line\">                            winner       = &#123;_, WinnerId&#125;, </span><br><span class=\"line\">                            army_result1 = <span class=\"comment\">#army_result &#123;</span></span><br><span class=\"line\">                                army_key = &#123;_, PlayerIdA&#125;</span><br><span class=\"line\">                            &#125;, </span><br><span class=\"line\">                            army_result2 = <span class=\"comment\">#army_result &#123;</span></span><br><span class=\"line\">                                army_key = &#123;_, PlayerIdB&#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; = Report, </span><br><span class=\"line\"></span><br><span class=\"line\">                        NewWinTeamId = <span class=\"keyword\">if</span></span><br><span class=\"line\">                            NowIndex =:= length(ReportList) -&gt;</span><br><span class=\"line\">                                WinTeamId = <span class=\"keyword\">if</span></span><br><span class=\"line\">                                    WinnerId =:= PlayerIdA -&gt;</span><br><span class=\"line\">                                        TeamIdA;</span><br><span class=\"line\">                                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                        TeamIdB</span><br><span class=\"line\">                                end, </span><br><span class=\"line\"></span><br><span class=\"line\">                                game_db:write(<span class=\"comment\">#player_race_result &#123;</span></span><br><span class=\"line\">                                    race_id     = RaceId, </span><br><span class=\"line\">                                    zone_id     = ZoneId, </span><br><span class=\"line\">                                    race_step   = RaceStep, </span><br><span class=\"line\">                                    player_id   = TeamIdA, </span><br><span class=\"line\">                                    player_id1  = TeamIdB, </span><br><span class=\"line\">                                    race_times  = RaceTimes, </span><br><span class=\"line\">                                    version     = ?GET_ENV(vsn, <span class=\"string\">\"\"</span>), </span><br><span class=\"line\">                                    report_time = lib_misc:get_local_timestamp(), </span><br><span class=\"line\">                                    winner_id   = WinTeamId</span><br><span class=\"line\">                                &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                WinTeamId;</span><br><span class=\"line\">                            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                NowWinTeamId</span><br><span class=\"line\">                        end, </span><br><span class=\"line\"></span><br><span class=\"line\">                        game_db:write(<span class=\"comment\">#player_race_report &#123;</span></span><br><span class=\"line\">                            race_id     = RaceId, </span><br><span class=\"line\">                            zone_id     = ZoneId, </span><br><span class=\"line\">                            race_step   = RaceStep, </span><br><span class=\"line\">                            player_id   = TeamIdA, </span><br><span class=\"line\">                            race_times  = RaceTimes, </span><br><span class=\"line\">                            index       = NowIndex, </span><br><span class=\"line\">                            attacker_id = PlayerIdA, </span><br><span class=\"line\">                            defender_id = PlayerIdB, </span><br><span class=\"line\">                            winner_id   = WinnerId, </span><br><span class=\"line\">                            report_id   = war_report_srv:record_war_report(Report, 30 * 86400)</span><br><span class=\"line\">                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            NowIndex - 1, </span><br><span class=\"line\">                            NewWinTeamId</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    end, </span><br><span class=\"line\">                    &#123;length(ReportList), 0&#125;, </span><br><span class=\"line\">                    ReportList</span><br><span class=\"line\">                ), </span><br><span class=\"line\"></span><br><span class=\"line\">                WinTeamId</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end, </span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;atomic, TeamId&#125; = game_db:<span class=\"keyword\">do</span>(Tran), </span><br><span class=\"line\">    TeamId.</span><br></pre></td></tr></table></figure></p>\n<p>在淘汰赛结束后，将剩余晋级玩家进入晋级赛步骤，同时初始化随机匹配<br><img src=\"Er15647120482687.png\" alt=\"Er15647120482687\"><br>一下两种匹配方式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, normal) -&gt;</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        lists:foldl(</span><br><span class=\"line\">            fun(TeamId, NowIndex) -&gt;</span><br><span class=\"line\">                game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                    race_id   = RaceId, </span><br><span class=\"line\">                    race_step = RaceStep, </span><br><span class=\"line\">                    zone_id   = ZoneId, </span><br><span class=\"line\">                    group     = Group, </span><br><span class=\"line\">                    index     = NowIndex, </span><br><span class=\"line\">                    player_id = TeamId</span><br><span class=\"line\">                &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                NowIndex + 1</span><br><span class=\"line\">            end, </span><br><span class=\"line\">            1, </span><br><span class=\"line\">            TeamIdList</span><br><span class=\"line\">        )</span><br><span class=\"line\">    end, </span><br><span class=\"line\"></span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran);</span><br><span class=\"line\"></span><br><span class=\"line\">init_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, random) -&gt;</span><br><span class=\"line\">    <span class=\"comment\">#race_step &#123;</span></span><br><span class=\"line\">        match_num = MatchNum</span><br><span class=\"line\">    &#125; = get_race_step(RaceStep), </span><br><span class=\"line\"></span><br><span class=\"line\">    Step = get_index_step(length(TeamIdList), MatchNum), </span><br><span class=\"line\"></span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        lists:foldl(</span><br><span class=\"line\">            fun(TeamId, NowIndex) -&gt;</span><br><span class=\"line\">                game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                    race_id   = RaceId, </span><br><span class=\"line\">                    race_step = RaceStep, </span><br><span class=\"line\">                    zone_id   = ZoneId, </span><br><span class=\"line\">                    group     = Group, </span><br><span class=\"line\">                    index     = NowIndex, </span><br><span class=\"line\">                    player_id = TeamId</span><br><span class=\"line\">                &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span></span><br><span class=\"line\">                    NowIndex + Step &gt; MatchNum * 2 -&gt;</span><br><span class=\"line\">                        1 + Step div 2;</span><br><span class=\"line\">                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                        NowIndex + Step</span><br><span class=\"line\">                end</span><br><span class=\"line\">            end, </span><br><span class=\"line\">            1, </span><br><span class=\"line\">            lib_misc:shuffle(TeamIdList)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    end, </span><br><span class=\"line\"></span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran);</span><br></pre></td></tr></table></figure></p>\n<p>第三步 战报<br>战报开启也是进程时间来控制<br><img src=\"Er15647145661718.png\" alt=\"Er15647145661718\"></p>\n<p>第四步 开启晋级赛<br>同样是进程计时器开启，比赛流程除了一局定输赢以外和淘汰赛基本一致，比赛也是一次性打完，战报根据时间慢慢的播放<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% 开启杯赛</span><br><span class=\"line\">timer_start_race() -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mod_server:is_cc_server() of</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            % cc_server_war_cron_srv:start_race(0);</span><br><span class=\"line\">            noop;</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            Times = mod_server:get_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES),</span><br><span class=\"line\">            xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,Times + 1]),</span><br><span class=\"line\">            start_race(),</span><br><span class=\"line\">            mod_timer:reset(1, ?TIMER_XIAN_DAO_HUI_BEI_SAI)</span><br><span class=\"line\">    end. </span><br><span class=\"line\"></span><br><span class=\"line\">start_race() -&gt;</span><br><span class=\"line\">    RaceStep    = get_server_war_race_step(), </span><br><span class=\"line\">    PlayerRace  = mod_race:get_player_race(?RACE_SERVER_WAR,0),</span><br><span class=\"line\">    IsOver = <span class=\"keyword\">case</span> mod_race:start_race(?RACE_SERVER_WAR, 0, RaceStep, 3) of</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            <span class=\"literal\">true</span>;</span><br><span class=\"line\">        _ -&gt; </span><br><span class=\"line\">            mod_timer:reset(0, ?TIMER_XIAN_DAO_HUI_BEI_SAI, 3420),</span><br><span class=\"line\">            <span class=\"literal\">false</span></span><br><span class=\"line\">    end,</span><br><span class=\"line\"></span><br><span class=\"line\">    RaceTimes = <span class=\"keyword\">if</span></span><br><span class=\"line\">        RaceStep =/= PlayerRace <span class=\"comment\">#player_race.race_step -&gt;</span></span><br><span class=\"line\">            1;</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            PlayerRace <span class=\"comment\">#player_race.race_times + 1</span></span><br><span class=\"line\">    end,</span><br><span class=\"line\">    xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,RaceTimes]),</span><br><span class=\"line\">    deal_receive_beisai_data(RaceStep,IsOver).</span><br></pre></td></tr></table></figure></p>\n<p>战斗部分基本一致多一个匹配结果记录表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start_race(RaceId, ZoneId, RaceStep, WinTimes) -&gt;</span><br><span class=\"line\">    <span class=\"comment\">#race_step &#123;</span></span><br><span class=\"line\">        match_num = MatchNum, </span><br><span class=\"line\">        next_race = NextRace, </span><br><span class=\"line\">        next_step = NextStep</span><br><span class=\"line\">    &#125; = get_race_step(RaceStep), </span><br><span class=\"line\"></span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        PlayerRace = get_player_race(RaceId, ZoneId), </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span></span><br><span class=\"line\">            PlayerRace <span class=\"comment\">#player_race.race_step =:= RaceStep,</span></span><br><span class=\"line\">                PlayerRace <span class=\"comment\">#player_race.race_times =/= 0 -&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> check_race_over(RaceId, ZoneId, RaceStep) of</span><br><span class=\"line\">                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                        <span class=\"built_in\">exit</span>(race_over);</span><br><span class=\"line\">                    _ -&gt;</span><br><span class=\"line\">                        noop</span><br><span class=\"line\">                end, </span><br><span class=\"line\"></span><br><span class=\"line\">                game_db:write(PlayerRace <span class=\"comment\">#player_race &#123;</span></span><br><span class=\"line\">                    race_times = PlayerRace <span class=\"comment\">#player_race.race_times + 1, </span></span><br><span class=\"line\">                    last_time  = lib_misc:get_local_timestamp()</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                clear_race_data(RaceId, ZoneId, RaceStep), </span><br><span class=\"line\">                init_race_opponent(RaceId, ZoneId, RaceStep), </span><br><span class=\"line\"></span><br><span class=\"line\">                game_db:write(PlayerRace <span class=\"comment\">#player_race &#123;</span></span><br><span class=\"line\">                    race_step  = RaceStep, </span><br><span class=\"line\">                    race_times = 1, </span><br><span class=\"line\">                    last_time  = lib_misc:get_local_timestamp(), </span><br><span class=\"line\">                    win_times  = WinTimes</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        end, </span><br><span class=\"line\"></span><br><span class=\"line\">        lists:foreach(</span><br><span class=\"line\">            fun(Group) -&gt;</span><br><span class=\"line\">                lists:foreach(</span><br><span class=\"line\">                    fun(Index) -&gt;</span><br><span class=\"line\">                        RaceMemberA = try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2 - 1), </span><br><span class=\"line\">                        RaceMemberB = try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2), </span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span></span><br><span class=\"line\">                            RaceMemberA =:= null, RaceMemberB =:= null -&gt;</span><br><span class=\"line\">                                noop;</span><br><span class=\"line\">                            %%轮空为全空或者B为空</span><br><span class=\"line\">                            % RaceMemberA =:= null -&gt;</span><br><span class=\"line\">                            %     game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                            %         race_id   = RaceId, </span><br><span class=\"line\">                            %         race_step = NextRace, </span><br><span class=\"line\">                            %         group     = Group, </span><br><span class=\"line\">                            %         index     = Index, </span><br><span class=\"line\">                            %         player_id = RaceMemberB <span class=\"comment\">#player_race_member.player_id</span></span><br><span class=\"line\">                            %     &#125;);</span><br><span class=\"line\">                            RaceMemberB =:= null -&gt;</span><br><span class=\"line\">                                TeamIdA  = RaceMemberA <span class=\"comment\">#player_race_member.player_id, </span></span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"keyword\">case</span> check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of</span><br><span class=\"line\">                                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                        noop;</span><br><span class=\"line\">                                    _ -&gt;</span><br><span class=\"line\">                                        Opponent = try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), </span><br><span class=\"line\"></span><br><span class=\"line\">                                        game_db:write(Opponent <span class=\"comment\">#player_race_opponent &#123;</span></span><br><span class=\"line\">                                            winner_id = TeamIdA</span><br><span class=\"line\">                                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                        game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                                            race_id   = RaceId,</span><br><span class=\"line\">                                            zone_id   = ZoneId, </span><br><span class=\"line\">                                            race_step = NextRace, </span><br><span class=\"line\">                                            group     = Group, </span><br><span class=\"line\">                                            index     = Index, </span><br><span class=\"line\">                                            player_id = TeamIdA</span><br><span class=\"line\">                                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                        race_call(RaceId, race_win, [TeamIdA, Group, RaceStep, NextRace])</span><br><span class=\"line\">                                end;</span><br><span class=\"line\">                            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                TeamIdA = RaceMemberA <span class=\"comment\">#player_race_member.player_id, </span></span><br><span class=\"line\">                                TeamIdB = RaceMemberB <span class=\"comment\">#player_race_member.player_id, </span></span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"keyword\">case</span> check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of</span><br><span class=\"line\">                                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                        noop;</span><br><span class=\"line\">                                    _ -&gt;</span><br><span class=\"line\">                                        <span class=\"keyword\">case</span> race_fight(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of</span><br><span class=\"line\">                                            0 -&gt;</span><br><span class=\"line\">                                                noop;</span><br><span class=\"line\">                                            WinnerId -&gt;</span><br><span class=\"line\">                                                <span class=\"keyword\">case</span> check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of</span><br><span class=\"line\">                                                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                                        Opponent = try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), </span><br><span class=\"line\"></span><br><span class=\"line\">                                                        game_db:write(Opponent <span class=\"comment\">#player_race_opponent &#123;</span></span><br><span class=\"line\">                                                            winner_id = WinnerId</span><br><span class=\"line\">                                                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                                        game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                                                            race_id   = RaceId,</span><br><span class=\"line\">                                                            zone_id   = ZoneId, </span><br><span class=\"line\">                                                            race_step = NextRace, </span><br><span class=\"line\">                                                            group     = Group, </span><br><span class=\"line\">                                                            index     = Index, </span><br><span class=\"line\">                                                            player_id = WinnerId</span><br><span class=\"line\">                                                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                                        race_call(RaceId, race_win, [WinnerId, Group, RaceStep, NextRace]);</span><br><span class=\"line\">                                                    _ -&gt;</span><br><span class=\"line\">                                                        noop</span><br><span class=\"line\">                                                end</span><br><span class=\"line\">                                        end</span><br><span class=\"line\">                                end</span><br><span class=\"line\">                        end</span><br><span class=\"line\">                    end, </span><br><span class=\"line\">                    lists:seq(1, MatchNum)</span><br><span class=\"line\">                )</span><br><span class=\"line\">            end, </span><br><span class=\"line\">            get_all_race_group()</span><br><span class=\"line\">        ), </span><br><span class=\"line\"></span><br><span class=\"line\">        IsOver = check_race_over(RaceId, ZoneId, RaceStep), </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span></span><br><span class=\"line\">            IsOver =:= <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                NowPlayerRace = get_player_race(RaceId, ZoneId), </span><br><span class=\"line\"></span><br><span class=\"line\">                game_db:write(NowPlayerRace <span class=\"comment\">#player_race &#123;</span></span><br><span class=\"line\">                    race_step  = NextStep, </span><br><span class=\"line\">                    race_times = 0, </span><br><span class=\"line\">                    last_time  = lib_misc:get_local_timestamp()</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                noop</span><br><span class=\"line\">        end, </span><br><span class=\"line\"></span><br><span class=\"line\">        IsOver</span><br><span class=\"line\">    end, </span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;atomic, Result&#125; = game_db:<span class=\"keyword\">do</span>(Tran), </span><br><span class=\"line\">    Result.</span><br></pre></td></tr></table></figure></p>\n<p>第五步 出晋级赛战报<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% 播报战报及通知</span><br><span class=\"line\">deal_receive_beisai_data(RaceStep,IsOver) -&gt;</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        % write_race_data(RaceReportList,RaceResultList,MemberList,OpponentList, WorldWarList),</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  </span><br><span class=\"line\">            IsOver =:= <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                <span class=\"comment\">#race_step &#123;</span></span><br><span class=\"line\">                    next_step = NextStep</span><br><span class=\"line\">                &#125; = mod_race:get_race_step(RaceStep),</span><br><span class=\"line\">                % return_bet(RaceStep),</span><br><span class=\"line\">                <span class=\"keyword\">if</span></span><br><span class=\"line\">                    RaceStep =:= ?RS_RACE_1 -&gt;</span><br><span class=\"line\">                        % give_award(),给予奖励</span><br><span class=\"line\">                        ZoneId = 0,</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> mod_race:try_get_player_race_member(?RACE_SERVER_WAR, ZoneId, ?RS_RACE_1_OVER, ?RG_TIAN_BANG, 1) of</span><br><span class=\"line\">                            null -&gt;</span><br><span class=\"line\">                                noop;</span><br><span class=\"line\">                            Member -&gt;</span><br><span class=\"line\">                                ServerId   = mod_player:get_player_data(Member <span class=\"comment\">#player_race_member.player_id,server_id),</span></span><br><span class=\"line\">                                ServerName = mod_server:get_server_name(ServerId),</span><br><span class=\"line\">                                NickName   = mod_player:get_player_data(Member <span class=\"comment\">#player_race_member.player_id,nickname),</span></span><br><span class=\"line\">                                api_chat:centre_screen_message_notify(</span><br><span class=\"line\">                                    ?MEST_XIAN_DAO_HUI_GUAN_JUN, </span><br><span class=\"line\">                                    [&#123;ServerName&#125;,&#123;NickName&#125;]</span><br><span class=\"line\">                                )</span><br><span class=\"line\">                        end;</span><br><span class=\"line\">                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                        noop</span><br><span class=\"line\">                end,</span><br><span class=\"line\">                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_STEP, NextStep), </span><br><span class=\"line\">                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES, 0),</span><br><span class=\"line\">                mod_timer:close(1,?TIMER_XIAN_DAO_HUI_BEI_SAI);</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                noop</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran).</span><br><span class=\"line\">    % api_server_war:notify_new_report().</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>争霸赛赛程范例<br>3月1日 0：00~3月3日 12:00    报名    40级以上手动报名<br>3月3日 13：00    淘汰赛    “13:00取数据，提前1小时向玩家发送邮件提醒<br>13:10开始出战报，每隔5分钟出1场战报<br>天榜负5局进入地榜，地榜负5局则被淘汰”<br>3月4日 14:00    16强赛（32进16）    “每小时1局，每局取1次数据，5局3胜制<br>天地榜同时进行<br>比赛开始前1小时向玩家发送邮件提醒取数据制度”<br>3月5日 14:00    16进8<br>3月6日 14:00    8进4<br>3月7日 14:00    半决赛<br>3月8日 14:00    决赛<br>3月8日 决赛全部结束    统一发放奖励    </p>\n<p>比赛的时间控制由单独时间进程来控制时间的推进，相当于php中的crontab,表结构上一个玩家比赛进程表player_race,<br>一个各阶段玩家成员信息表player_race_member，后期系统匹配各阶段玩家匹配信息表player_race_opponent，<br>一个各阶段玩家战报信息表player_race_report，一个各阶段玩家结果表player_race_result，<br>玩家表可以分为  玩家比赛信息表  player_st_jjc_race 玩家匹配信息表 player_st_jjc_race_opponent 玩家日志表 player_st_jjc_race_score_log</p>\n<p>第一步 报名<br>很简单直接报名请求记录玩家数据就行,报名时间结束时触发事件对所有玩家进行匹配<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> try_get_player_server_war(PlayerId) of</span><br><span class=\"line\">    null -&gt;</span><br><span class=\"line\">        Tran = fun() -&gt;</span><br><span class=\"line\">            game_db:write(<span class=\"comment\">#player_server_war &#123;</span></span><br><span class=\"line\">                player_id  = PlayerId, </span><br><span class=\"line\">                apply_time = lib_misc:get_local_timestamp()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            % mod_deploy:get(PlayerId, ?RACE_SERVER_WAR)</span><br><span class=\"line\">        end, </span><br><span class=\"line\">        game_db:<span class=\"keyword\">do</span>(Tran);</span><br><span class=\"line\">    _ -&gt;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(already_apply)</span><br><span class=\"line\">end.</span><br><span class=\"line\"></span><br><span class=\"line\">% 本服报名结束手机玩家数据</span><br><span class=\"line\">apply_over() -&gt;</span><br><span class=\"line\">    List = get_all_player_server_war(),</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        lists:foreach(</span><br><span class=\"line\">            fun(Rec) -&gt;</span><br><span class=\"line\">                game_db:write(Rec <span class=\"comment\">#player_server_war &#123;</span></span><br><span class=\"line\">                    race_step = ?RS_TIAN_BANG_TAOTAI</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            end, </span><br><span class=\"line\">            List</span><br><span class=\"line\">        )</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran),</span><br><span class=\"line\">    ?INFO(<span class=\"string\">\"apply_over\"</span>,[]),</span><br><span class=\"line\">    ZoneList = lists:foldl(</span><br><span class=\"line\">        fun(PlayerServerWar, R) -&gt;</span><br><span class=\"line\">            [PlayerServerWar <span class=\"comment\">#player_server_war.player_id | R]</span></span><br><span class=\"line\">        end,</span><br><span class=\"line\">        [],</span><br><span class=\"line\">        get_all_player_server_war()</span><br><span class=\"line\">    ),</span><br><span class=\"line\"></span><br><span class=\"line\">    mod_race:init_race_member(</span><br><span class=\"line\">       ?RACE_SERVER_WAR,</span><br><span class=\"line\">       0,</span><br><span class=\"line\">       ?RS_TIAN_BANG_TAOTAI,</span><br><span class=\"line\">       0,</span><br><span class=\"line\">       ZoneList,</span><br><span class=\"line\">       normal</span><br><span class=\"line\">    ).</span><br></pre></td></tr></table></figure></p>\n<p>注意的是用一个单独的进程来管理活动步骤开启结束<br><img src=\"Er15646489002180.png\" alt=\"Er15646489002180\"><br>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% 每一个活动开始所要做的处理</span><br><span class=\"line\">activity_start (ActivityId) -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mod_server:is_game_server() of</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            xdh_race_srv:activity_start(ActivityId);</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> mod_server:is_cc_server() of</span><br><span class=\"line\">                <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                    % cc_server_war_cron_srv:activity_start(Id);</span><br><span class=\"line\">                    noop;</span><br><span class=\"line\">                <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">                    noop</span><br><span class=\"line\">            end</span><br><span class=\"line\">    end.</span><br><span class=\"line\"></span><br><span class=\"line\">% 每一个活动结束所要做的处理</span><br><span class=\"line\">activity_stop (ActivityId) -&gt;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> mod_server:is_game_server() of</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            xdh_race_srv:activity_stop(ActivityId);</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> mod_server:is_cc_server() of</span><br><span class=\"line\">                <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                    % cc_server_war_cron_srv:activity_stop(Id);</span><br><span class=\"line\">                    noop;</span><br><span class=\"line\">                <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">                    noop</span><br><span class=\"line\">            end</span><br><span class=\"line\">    end.</span><br></pre></td></tr></table></figure></p>\n<p>在到点时间的相应上做特殊处理</p>\n<p>第二步 开启淘汰赛<br>淘汰赛的开启同样用时间进程来控制，到点后调用启动方法<br><img src=\"Er15646493808263.png\" alt=\"Er15646493808263\"> （判断结束 、清上一轮数据）<br>淘汰赛相当于一个递归的过程，全服玩家进行了一场比赛后记录玩家信息及淘汰结果直到淘汰赛结束的条件,同时需要一个全服步骤数据记录，然后循环比赛<br>其中每一轮淘汰赛可分为 判断结束 、清上一轮数据 、不重复随机匹配 、 战斗及数据记录 、 循环<br><img src=\"Er15647109579023.png\" alt=\"Er15647109579023\"> （不重复随机匹配 循环）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 战斗部分及记录 --&gt;</span><br><span class=\"line\">race_fight (RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) -&gt;</span><br><span class=\"line\">    <span class=\"comment\">#player_race &#123;</span></span><br><span class=\"line\">        race_times = RaceTimes</span><br><span class=\"line\">    &#125; = get_player_race(RaceId, ZoneId), </span><br><span class=\"line\"></span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> race_call(RaceId, fight, [RaceStep, TeamIdA, TeamIdB]) of</span><br><span class=\"line\">            [] -&gt;</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(&#123;invalid_fight, RaceId, TeamIdA, TeamIdB&#125;);</span><br><span class=\"line\">            ReportList -&gt;</span><br><span class=\"line\">                &#123;_, WinTeamId&#125; = lists:foldr(</span><br><span class=\"line\">                    fun(Report, &#123;NowIndex, NowWinTeamId&#125;) -&gt;</span><br><span class=\"line\">                        <span class=\"comment\">#war_result &#123;</span></span><br><span class=\"line\">                            winner       = &#123;_, WinnerId&#125;, </span><br><span class=\"line\">                            army_result1 = <span class=\"comment\">#army_result &#123;</span></span><br><span class=\"line\">                                army_key = &#123;_, PlayerIdA&#125;</span><br><span class=\"line\">                            &#125;, </span><br><span class=\"line\">                            army_result2 = <span class=\"comment\">#army_result &#123;</span></span><br><span class=\"line\">                                army_key = &#123;_, PlayerIdB&#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; = Report, </span><br><span class=\"line\"></span><br><span class=\"line\">                        NewWinTeamId = <span class=\"keyword\">if</span></span><br><span class=\"line\">                            NowIndex =:= length(ReportList) -&gt;</span><br><span class=\"line\">                                WinTeamId = <span class=\"keyword\">if</span></span><br><span class=\"line\">                                    WinnerId =:= PlayerIdA -&gt;</span><br><span class=\"line\">                                        TeamIdA;</span><br><span class=\"line\">                                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                        TeamIdB</span><br><span class=\"line\">                                end, </span><br><span class=\"line\"></span><br><span class=\"line\">                                game_db:write(<span class=\"comment\">#player_race_result &#123;</span></span><br><span class=\"line\">                                    race_id     = RaceId, </span><br><span class=\"line\">                                    zone_id     = ZoneId, </span><br><span class=\"line\">                                    race_step   = RaceStep, </span><br><span class=\"line\">                                    player_id   = TeamIdA, </span><br><span class=\"line\">                                    player_id1  = TeamIdB, </span><br><span class=\"line\">                                    race_times  = RaceTimes, </span><br><span class=\"line\">                                    version     = ?GET_ENV(vsn, <span class=\"string\">\"\"</span>), </span><br><span class=\"line\">                                    report_time = lib_misc:get_local_timestamp(), </span><br><span class=\"line\">                                    winner_id   = WinTeamId</span><br><span class=\"line\">                                &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                WinTeamId;</span><br><span class=\"line\">                            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                NowWinTeamId</span><br><span class=\"line\">                        end, </span><br><span class=\"line\"></span><br><span class=\"line\">                        game_db:write(<span class=\"comment\">#player_race_report &#123;</span></span><br><span class=\"line\">                            race_id     = RaceId, </span><br><span class=\"line\">                            zone_id     = ZoneId, </span><br><span class=\"line\">                            race_step   = RaceStep, </span><br><span class=\"line\">                            player_id   = TeamIdA, </span><br><span class=\"line\">                            race_times  = RaceTimes, </span><br><span class=\"line\">                            index       = NowIndex, </span><br><span class=\"line\">                            attacker_id = PlayerIdA, </span><br><span class=\"line\">                            defender_id = PlayerIdB, </span><br><span class=\"line\">                            winner_id   = WinnerId, </span><br><span class=\"line\">                            report_id   = war_report_srv:record_war_report(Report, 30 * 86400)</span><br><span class=\"line\">                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            NowIndex - 1, </span><br><span class=\"line\">                            NewWinTeamId</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    end, </span><br><span class=\"line\">                    &#123;length(ReportList), 0&#125;, </span><br><span class=\"line\">                    ReportList</span><br><span class=\"line\">                ), </span><br><span class=\"line\"></span><br><span class=\"line\">                WinTeamId</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end, </span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;atomic, TeamId&#125; = game_db:<span class=\"keyword\">do</span>(Tran), </span><br><span class=\"line\">    TeamId.</span><br></pre></td></tr></table></figure></p>\n<p>在淘汰赛结束后，将剩余晋级玩家进入晋级赛步骤，同时初始化随机匹配<br><img src=\"Er15647120482687.png\" alt=\"Er15647120482687\"><br>一下两种匹配方式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, normal) -&gt;</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        lists:foldl(</span><br><span class=\"line\">            fun(TeamId, NowIndex) -&gt;</span><br><span class=\"line\">                game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                    race_id   = RaceId, </span><br><span class=\"line\">                    race_step = RaceStep, </span><br><span class=\"line\">                    zone_id   = ZoneId, </span><br><span class=\"line\">                    group     = Group, </span><br><span class=\"line\">                    index     = NowIndex, </span><br><span class=\"line\">                    player_id = TeamId</span><br><span class=\"line\">                &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                NowIndex + 1</span><br><span class=\"line\">            end, </span><br><span class=\"line\">            1, </span><br><span class=\"line\">            TeamIdList</span><br><span class=\"line\">        )</span><br><span class=\"line\">    end, </span><br><span class=\"line\"></span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran);</span><br><span class=\"line\"></span><br><span class=\"line\">init_race_member(RaceId, ZoneId, RaceStep, Group, TeamIdList, random) -&gt;</span><br><span class=\"line\">    <span class=\"comment\">#race_step &#123;</span></span><br><span class=\"line\">        match_num = MatchNum</span><br><span class=\"line\">    &#125; = get_race_step(RaceStep), </span><br><span class=\"line\"></span><br><span class=\"line\">    Step = get_index_step(length(TeamIdList), MatchNum), </span><br><span class=\"line\"></span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        lists:foldl(</span><br><span class=\"line\">            fun(TeamId, NowIndex) -&gt;</span><br><span class=\"line\">                game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                    race_id   = RaceId, </span><br><span class=\"line\">                    race_step = RaceStep, </span><br><span class=\"line\">                    zone_id   = ZoneId, </span><br><span class=\"line\">                    group     = Group, </span><br><span class=\"line\">                    index     = NowIndex, </span><br><span class=\"line\">                    player_id = TeamId</span><br><span class=\"line\">                &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span></span><br><span class=\"line\">                    NowIndex + Step &gt; MatchNum * 2 -&gt;</span><br><span class=\"line\">                        1 + Step div 2;</span><br><span class=\"line\">                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                        NowIndex + Step</span><br><span class=\"line\">                end</span><br><span class=\"line\">            end, </span><br><span class=\"line\">            1, </span><br><span class=\"line\">            lib_misc:shuffle(TeamIdList)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    end, </span><br><span class=\"line\"></span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran);</span><br></pre></td></tr></table></figure></p>\n<p>第三步 战报<br>战报开启也是进程时间来控制<br><img src=\"Er15647145661718.png\" alt=\"Er15647145661718\"></p>\n<p>第四步 开启晋级赛<br>同样是进程计时器开启，比赛流程除了一局定输赢以外和淘汰赛基本一致，比赛也是一次性打完，战报根据时间慢慢的播放<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% 开启杯赛</span><br><span class=\"line\">timer_start_race() -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mod_server:is_cc_server() of</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            % cc_server_war_cron_srv:start_race(0);</span><br><span class=\"line\">            noop;</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            Times = mod_server:get_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES),</span><br><span class=\"line\">            xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,Times + 1]),</span><br><span class=\"line\">            start_race(),</span><br><span class=\"line\">            mod_timer:reset(1, ?TIMER_XIAN_DAO_HUI_BEI_SAI)</span><br><span class=\"line\">    end. </span><br><span class=\"line\"></span><br><span class=\"line\">start_race() -&gt;</span><br><span class=\"line\">    RaceStep    = get_server_war_race_step(), </span><br><span class=\"line\">    PlayerRace  = mod_race:get_player_race(?RACE_SERVER_WAR,0),</span><br><span class=\"line\">    IsOver = <span class=\"keyword\">case</span> mod_race:start_race(?RACE_SERVER_WAR, 0, RaceStep, 3) of</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            <span class=\"literal\">true</span>;</span><br><span class=\"line\">        _ -&gt; </span><br><span class=\"line\">            mod_timer:reset(0, ?TIMER_XIAN_DAO_HUI_BEI_SAI, 3420),</span><br><span class=\"line\">            <span class=\"literal\">false</span></span><br><span class=\"line\">    end,</span><br><span class=\"line\"></span><br><span class=\"line\">    RaceTimes = <span class=\"keyword\">if</span></span><br><span class=\"line\">        RaceStep =/= PlayerRace <span class=\"comment\">#player_race.race_step -&gt;</span></span><br><span class=\"line\">            1;</span><br><span class=\"line\">        <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">            PlayerRace <span class=\"comment\">#player_race.race_times + 1</span></span><br><span class=\"line\">    end,</span><br><span class=\"line\">    xdh_race_srv:try_apply(mod_server,set_player_server_int_data,[?SDT_SERVER_WAR_RACE_TIMES,RaceTimes]),</span><br><span class=\"line\">    deal_receive_beisai_data(RaceStep,IsOver).</span><br></pre></td></tr></table></figure></p>\n<p>战斗部分基本一致多一个匹配结果记录表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start_race(RaceId, ZoneId, RaceStep, WinTimes) -&gt;</span><br><span class=\"line\">    <span class=\"comment\">#race_step &#123;</span></span><br><span class=\"line\">        match_num = MatchNum, </span><br><span class=\"line\">        next_race = NextRace, </span><br><span class=\"line\">        next_step = NextStep</span><br><span class=\"line\">    &#125; = get_race_step(RaceStep), </span><br><span class=\"line\"></span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        PlayerRace = get_player_race(RaceId, ZoneId), </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span></span><br><span class=\"line\">            PlayerRace <span class=\"comment\">#player_race.race_step =:= RaceStep,</span></span><br><span class=\"line\">                PlayerRace <span class=\"comment\">#player_race.race_times =/= 0 -&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> check_race_over(RaceId, ZoneId, RaceStep) of</span><br><span class=\"line\">                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                        <span class=\"built_in\">exit</span>(race_over);</span><br><span class=\"line\">                    _ -&gt;</span><br><span class=\"line\">                        noop</span><br><span class=\"line\">                end, </span><br><span class=\"line\"></span><br><span class=\"line\">                game_db:write(PlayerRace <span class=\"comment\">#player_race &#123;</span></span><br><span class=\"line\">                    race_times = PlayerRace <span class=\"comment\">#player_race.race_times + 1, </span></span><br><span class=\"line\">                    last_time  = lib_misc:get_local_timestamp()</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                clear_race_data(RaceId, ZoneId, RaceStep), </span><br><span class=\"line\">                init_race_opponent(RaceId, ZoneId, RaceStep), </span><br><span class=\"line\"></span><br><span class=\"line\">                game_db:write(PlayerRace <span class=\"comment\">#player_race &#123;</span></span><br><span class=\"line\">                    race_step  = RaceStep, </span><br><span class=\"line\">                    race_times = 1, </span><br><span class=\"line\">                    last_time  = lib_misc:get_local_timestamp(), </span><br><span class=\"line\">                    win_times  = WinTimes</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        end, </span><br><span class=\"line\"></span><br><span class=\"line\">        lists:foreach(</span><br><span class=\"line\">            fun(Group) -&gt;</span><br><span class=\"line\">                lists:foreach(</span><br><span class=\"line\">                    fun(Index) -&gt;</span><br><span class=\"line\">                        RaceMemberA = try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2 - 1), </span><br><span class=\"line\">                        RaceMemberB = try_get_player_race_member(RaceId, ZoneId, RaceStep, Group, Index * 2), </span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span></span><br><span class=\"line\">                            RaceMemberA =:= null, RaceMemberB =:= null -&gt;</span><br><span class=\"line\">                                noop;</span><br><span class=\"line\">                            %%轮空为全空或者B为空</span><br><span class=\"line\">                            % RaceMemberA =:= null -&gt;</span><br><span class=\"line\">                            %     game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                            %         race_id   = RaceId, </span><br><span class=\"line\">                            %         race_step = NextRace, </span><br><span class=\"line\">                            %         group     = Group, </span><br><span class=\"line\">                            %         index     = Index, </span><br><span class=\"line\">                            %         player_id = RaceMemberB <span class=\"comment\">#player_race_member.player_id</span></span><br><span class=\"line\">                            %     &#125;);</span><br><span class=\"line\">                            RaceMemberB =:= null -&gt;</span><br><span class=\"line\">                                TeamIdA  = RaceMemberA <span class=\"comment\">#player_race_member.player_id, </span></span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"keyword\">case</span> check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of</span><br><span class=\"line\">                                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                        noop;</span><br><span class=\"line\">                                    _ -&gt;</span><br><span class=\"line\">                                        Opponent = try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), </span><br><span class=\"line\"></span><br><span class=\"line\">                                        game_db:write(Opponent <span class=\"comment\">#player_race_opponent &#123;</span></span><br><span class=\"line\">                                            winner_id = TeamIdA</span><br><span class=\"line\">                                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                        game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                                            race_id   = RaceId,</span><br><span class=\"line\">                                            zone_id   = ZoneId, </span><br><span class=\"line\">                                            race_step = NextRace, </span><br><span class=\"line\">                                            group     = Group, </span><br><span class=\"line\">                                            index     = Index, </span><br><span class=\"line\">                                            player_id = TeamIdA</span><br><span class=\"line\">                                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                        race_call(RaceId, race_win, [TeamIdA, Group, RaceStep, NextRace])</span><br><span class=\"line\">                                end;</span><br><span class=\"line\">                            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                TeamIdA = RaceMemberA <span class=\"comment\">#player_race_member.player_id, </span></span><br><span class=\"line\">                                TeamIdB = RaceMemberB <span class=\"comment\">#player_race_member.player_id, </span></span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"keyword\">case</span> check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA) of</span><br><span class=\"line\">                                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                        noop;</span><br><span class=\"line\">                                    _ -&gt;</span><br><span class=\"line\">                                        <span class=\"keyword\">case</span> race_fight(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of</span><br><span class=\"line\">                                            0 -&gt;</span><br><span class=\"line\">                                                noop;</span><br><span class=\"line\">                                            WinnerId -&gt;</span><br><span class=\"line\">                                                <span class=\"keyword\">case</span> check_opponent_over(RaceId, ZoneId, RaceStep, TeamIdA, TeamIdB) of</span><br><span class=\"line\">                                                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                                                        Opponent = try_get_player_race_opponent(RaceId, ZoneId, RaceStep, TeamIdA), </span><br><span class=\"line\"></span><br><span class=\"line\">                                                        game_db:write(Opponent <span class=\"comment\">#player_race_opponent &#123;</span></span><br><span class=\"line\">                                                            winner_id = WinnerId</span><br><span class=\"line\">                                                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                                        game_db:write(<span class=\"comment\">#player_race_member &#123;</span></span><br><span class=\"line\">                                                            race_id   = RaceId,</span><br><span class=\"line\">                                                            zone_id   = ZoneId, </span><br><span class=\"line\">                                                            race_step = NextRace, </span><br><span class=\"line\">                                                            group     = Group, </span><br><span class=\"line\">                                                            index     = Index, </span><br><span class=\"line\">                                                            player_id = WinnerId</span><br><span class=\"line\">                                                        &#125;), </span><br><span class=\"line\"></span><br><span class=\"line\">                                                        race_call(RaceId, race_win, [WinnerId, Group, RaceStep, NextRace]);</span><br><span class=\"line\">                                                    _ -&gt;</span><br><span class=\"line\">                                                        noop</span><br><span class=\"line\">                                                end</span><br><span class=\"line\">                                        end</span><br><span class=\"line\">                                end</span><br><span class=\"line\">                        end</span><br><span class=\"line\">                    end, </span><br><span class=\"line\">                    lists:seq(1, MatchNum)</span><br><span class=\"line\">                )</span><br><span class=\"line\">            end, </span><br><span class=\"line\">            get_all_race_group()</span><br><span class=\"line\">        ), </span><br><span class=\"line\"></span><br><span class=\"line\">        IsOver = check_race_over(RaceId, ZoneId, RaceStep), </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span></span><br><span class=\"line\">            IsOver =:= <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                NowPlayerRace = get_player_race(RaceId, ZoneId), </span><br><span class=\"line\"></span><br><span class=\"line\">                game_db:write(NowPlayerRace <span class=\"comment\">#player_race &#123;</span></span><br><span class=\"line\">                    race_step  = NextStep, </span><br><span class=\"line\">                    race_times = 0, </span><br><span class=\"line\">                    last_time  = lib_misc:get_local_timestamp()</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                noop</span><br><span class=\"line\">        end, </span><br><span class=\"line\"></span><br><span class=\"line\">        IsOver</span><br><span class=\"line\">    end, </span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;atomic, Result&#125; = game_db:<span class=\"keyword\">do</span>(Tran), </span><br><span class=\"line\">    Result.</span><br></pre></td></tr></table></figure></p>\n<p>第五步 出晋级赛战报<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% 播报战报及通知</span><br><span class=\"line\">deal_receive_beisai_data(RaceStep,IsOver) -&gt;</span><br><span class=\"line\">    Tran = fun() -&gt;</span><br><span class=\"line\">        % write_race_data(RaceReportList,RaceResultList,MemberList,OpponentList, WorldWarList),</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  </span><br><span class=\"line\">            IsOver =:= <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                <span class=\"comment\">#race_step &#123;</span></span><br><span class=\"line\">                    next_step = NextStep</span><br><span class=\"line\">                &#125; = mod_race:get_race_step(RaceStep),</span><br><span class=\"line\">                % return_bet(RaceStep),</span><br><span class=\"line\">                <span class=\"keyword\">if</span></span><br><span class=\"line\">                    RaceStep =:= ?RS_RACE_1 -&gt;</span><br><span class=\"line\">                        % give_award(),给予奖励</span><br><span class=\"line\">                        ZoneId = 0,</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> mod_race:try_get_player_race_member(?RACE_SERVER_WAR, ZoneId, ?RS_RACE_1_OVER, ?RG_TIAN_BANG, 1) of</span><br><span class=\"line\">                            null -&gt;</span><br><span class=\"line\">                                noop;</span><br><span class=\"line\">                            Member -&gt;</span><br><span class=\"line\">                                ServerId   = mod_player:get_player_data(Member <span class=\"comment\">#player_race_member.player_id,server_id),</span></span><br><span class=\"line\">                                ServerName = mod_server:get_server_name(ServerId),</span><br><span class=\"line\">                                NickName   = mod_player:get_player_data(Member <span class=\"comment\">#player_race_member.player_id,nickname),</span></span><br><span class=\"line\">                                api_chat:centre_screen_message_notify(</span><br><span class=\"line\">                                    ?MEST_XIAN_DAO_HUI_GUAN_JUN, </span><br><span class=\"line\">                                    [&#123;ServerName&#125;,&#123;NickName&#125;]</span><br><span class=\"line\">                                )</span><br><span class=\"line\">                        end;</span><br><span class=\"line\">                    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                        noop</span><br><span class=\"line\">                end,</span><br><span class=\"line\">                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_STEP, NextStep), </span><br><span class=\"line\">                mod_server:set_player_server_int_data(?SDT_SERVER_WAR_RACE_TIMES, 0),</span><br><span class=\"line\">                mod_timer:close(1,?TIMER_XIAN_DAO_HUI_BEI_SAI);</span><br><span class=\"line\">            <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                noop</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end,</span><br><span class=\"line\">    game_db:<span class=\"keyword\">do</span>(Tran).</span><br><span class=\"line\">    % api_server_war:notify_new_report().</span><br></pre></td></tr></table></figure></p>"},{"title":"翻译提取替换","date":"2018-08-03T03:02:18.000Z","_content":"1. 提取\n提取客户端资源文件之前先要用uc-utf8.php转utf-8 把unicode码转成utf-8的日文在提取\n将要提取文字的文件整合与getFromHtml.sh 放在同目录下\n``` bash\n#!/bin/bash\n#sh getFromHtml.sh under the template fold\n#Change filelist.csv to excel file, and give it to translator\n\nLANG=C grep -r -n -v '^[[:cntrl:][:print:]]*$' . | grep -v \"using UnityEngine;\" | grep -v svn | grep -v //  | grep -v \\* |  grep -v \"\\{\\*\" |  grep -v \"\\\"Name\\\"\" > ~/lj_2_3_server.csv\n\nsed -i 's@\\t@ @g' ~/lj_2_3_server.csv\nsed -i 's@\\([^:]*\\):\\([0-9]*\\):@\\1\\t\\2\\t@' ~/lj_2_3_server.csv\n```\n[点击下载](/download/getFromHtml.sh)\n<!-- more -->\n\n可以脚本文件内修改输出路径及文件名\n运行命令提取内容\nsh getFromHtml\n\n取出后的excel先在编辑软件里打开编码改成ansi, 否则直接excel打开会乱码\n在excel内，全选，点击数据->分列->分隔符号->Tab键->确定。。。。以Tab键分割内容\n完成后的数据格式如下：(A列为行数，B列为行号，C列为提取的原字符)\n![A46180F494E722BBE7AB60D25E81DD0B](A46180F494E722BBE7AB60D25E81DD0B.jpg)\n如果有发现提取到不需要翻译的错误的，可直接整行删除。。。\n提交翻译\n\n2. 替换\n翻译后的文件如果为xls，在最后另起一列，用公式=A1&\"^\"&B1&\"^\"&C1连接，拖到底，用连接的主要目的是让文件、行、数据之间有个特殊的符号分割\n^ 这个符号基本见不到所以用这个，将最后列的数据拷贝到sublime，替换\"^ \" 为 \"^\"去掉多余的数据与行之间的一个空格，然后将\\替换为@@@或者奇怪\n不重复的符号，如果不替换转换会被转换掉，最后将sublime上的代码考到新建的一个txt中另存为utf-8，上传到服务器对应的目录下面，修改\nchangeHtml.sh这个文件中判断中间的分割符号保存，整个文件权限777.\n\n``` bash \n#!/bin/bash\n#sh changeHtml.sh  result_file\n#result_file' content\n#file's path    line_no old_content     new_content\n\nfile=$1\n\nif [ -z $file ]\nthen\n        echo \"Input result_file\"\n        exit\nfi\n\nwhile read line\ndo\n        IFS=\"^\"\n        arr=($line)\n        filename=${arr[0]}\n        line_num=${arr[1]}\n        str_kr=${arr[2]}\n\n        if [ $str_kr ]\n        then\n        echo $filename\n        echo $line_num\n        echo $str_kr\n\n                sed -i ''$line_num' c\\'$str_kr''  $filename\n        else\n                echo $line\n        fi\ndone < $file\n```\n运行命令替换内容\nsh changeHtml.sh text.txt \n\n运行完.asset的文件是没办法替换的，要手动自行替换\n\ntext.txt数据格式如下\n![326AD4E2572831FEFC87D564932D6106](326AD4E2572831FEFC87D564932D6106.jpg) \n[点击下载](/download/changeHtml.sh)       ","source":"_posts/翻译提取替换.md","raw":"---\ntitle: 翻译提取替换\ndate: 2018-08-03 11:02:18\ncategories: \"脚本工具\"\ntags:\n---\n1. 提取\n提取客户端资源文件之前先要用uc-utf8.php转utf-8 把unicode码转成utf-8的日文在提取\n将要提取文字的文件整合与getFromHtml.sh 放在同目录下\n``` bash\n#!/bin/bash\n#sh getFromHtml.sh under the template fold\n#Change filelist.csv to excel file, and give it to translator\n\nLANG=C grep -r -n -v '^[[:cntrl:][:print:]]*$' . | grep -v \"using UnityEngine;\" | grep -v svn | grep -v //  | grep -v \\* |  grep -v \"\\{\\*\" |  grep -v \"\\\"Name\\\"\" > ~/lj_2_3_server.csv\n\nsed -i 's@\\t@ @g' ~/lj_2_3_server.csv\nsed -i 's@\\([^:]*\\):\\([0-9]*\\):@\\1\\t\\2\\t@' ~/lj_2_3_server.csv\n```\n[点击下载](/download/getFromHtml.sh)\n<!-- more -->\n\n可以脚本文件内修改输出路径及文件名\n运行命令提取内容\nsh getFromHtml\n\n取出后的excel先在编辑软件里打开编码改成ansi, 否则直接excel打开会乱码\n在excel内，全选，点击数据->分列->分隔符号->Tab键->确定。。。。以Tab键分割内容\n完成后的数据格式如下：(A列为行数，B列为行号，C列为提取的原字符)\n![A46180F494E722BBE7AB60D25E81DD0B](A46180F494E722BBE7AB60D25E81DD0B.jpg)\n如果有发现提取到不需要翻译的错误的，可直接整行删除。。。\n提交翻译\n\n2. 替换\n翻译后的文件如果为xls，在最后另起一列，用公式=A1&\"^\"&B1&\"^\"&C1连接，拖到底，用连接的主要目的是让文件、行、数据之间有个特殊的符号分割\n^ 这个符号基本见不到所以用这个，将最后列的数据拷贝到sublime，替换\"^ \" 为 \"^\"去掉多余的数据与行之间的一个空格，然后将\\替换为@@@或者奇怪\n不重复的符号，如果不替换转换会被转换掉，最后将sublime上的代码考到新建的一个txt中另存为utf-8，上传到服务器对应的目录下面，修改\nchangeHtml.sh这个文件中判断中间的分割符号保存，整个文件权限777.\n\n``` bash \n#!/bin/bash\n#sh changeHtml.sh  result_file\n#result_file' content\n#file's path    line_no old_content     new_content\n\nfile=$1\n\nif [ -z $file ]\nthen\n        echo \"Input result_file\"\n        exit\nfi\n\nwhile read line\ndo\n        IFS=\"^\"\n        arr=($line)\n        filename=${arr[0]}\n        line_num=${arr[1]}\n        str_kr=${arr[2]}\n\n        if [ $str_kr ]\n        then\n        echo $filename\n        echo $line_num\n        echo $str_kr\n\n                sed -i ''$line_num' c\\'$str_kr''  $filename\n        else\n                echo $line\n        fi\ndone < $file\n```\n运行命令替换内容\nsh changeHtml.sh text.txt \n\n运行完.asset的文件是没办法替换的，要手动自行替换\n\ntext.txt数据格式如下\n![326AD4E2572831FEFC87D564932D6106](326AD4E2572831FEFC87D564932D6106.jpg) \n[点击下载](/download/changeHtml.sh)       ","slug":"翻译提取替换","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91o00121d8ncyrsxjok","content":"<ol>\n<li>提取<br>提取客户端资源文件之前先要用uc-utf8.php转utf-8 把unicode码转成utf-8的日文在提取<br>将要提取文字的文件整合与getFromHtml.sh 放在同目录下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#sh getFromHtml.sh under the template fold</span></span><br><span class=\"line\"><span class=\"comment\">#Change filelist.csv to excel file, and give it to translator</span></span><br><span class=\"line\"></span><br><span class=\"line\">LANG=C grep -r -n -v <span class=\"string\">'^[[:cntrl:][:print:]]*$'</span> . | grep -v <span class=\"string\">\"using UnityEngine;\"</span> | grep -v svn | grep -v //  | grep -v \\* |  grep -v <span class=\"string\">\"\\&#123;\\*\"</span> |  grep -v <span class=\"string\">\"\\\"Name\\\"\"</span> &gt; ~/lj_2_3_server.csv</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">'s@\\t@ @g'</span> ~/lj_2_3_server.csv</span><br><span class=\"line\">sed -i <span class=\"string\">'s@\\([^:]*\\):\\([0-9]*\\):@\\1\\t\\2\\t@'</span> ~/lj_2_3_server.csv</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/getFromHtml.sh\">点击下载</a><br><a id=\"more\"></a></p>\n<p>可以脚本文件内修改输出路径及文件名<br>运行命令提取内容<br>sh getFromHtml</p>\n<p>取出后的excel先在编辑软件里打开编码改成ansi, 否则直接excel打开会乱码<br>在excel内，全选，点击数据-&gt;分列-&gt;分隔符号-&gt;Tab键-&gt;确定。。。。以Tab键分割内容<br>完成后的数据格式如下：(A列为行数，B列为行号，C列为提取的原字符)<br><img src=\"A46180F494E722BBE7AB60D25E81DD0B.jpg\" alt=\"A46180F494E722BBE7AB60D25E81DD0B\"><br>如果有发现提取到不需要翻译的错误的，可直接整行删除。。。<br>提交翻译</p>\n<ol start=\"2\">\n<li>替换<br>翻译后的文件如果为xls，在最后另起一列，用公式=A1&amp;”^”&amp;B1&amp;”^”&amp;C1连接，拖到底，用连接的主要目的是让文件、行、数据之间有个特殊的符号分割<br>^ 这个符号基本见不到所以用这个，将最后列的数据拷贝到sublime，替换”^ “ 为 “^”去掉多余的数据与行之间的一个空格，然后将\\替换为@@@或者奇怪<br>不重复的符号，如果不替换转换会被转换掉，最后将sublime上的代码考到新建的一个txt中另存为utf-8，上传到服务器对应的目录下面，修改<br>changeHtml.sh这个文件中判断中间的分割符号保存，整个文件权限777.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#sh changeHtml.sh  result_file</span></span><br><span class=\"line\"><span class=\"comment\">#result_file' content</span></span><br><span class=\"line\"><span class=\"comment\">#file's path    line_no old_content     new_content</span></span><br><span class=\"line\"></span><br><span class=\"line\">file=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Input result_file\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">        IFS=<span class=\"string\">\"^\"</span></span><br><span class=\"line\">        arr=(<span class=\"variable\">$line</span>)</span><br><span class=\"line\">        filename=<span class=\"variable\">$&#123;arr[0]&#125;</span></span><br><span class=\"line\">        line_num=<span class=\"variable\">$&#123;arr[1]&#125;</span></span><br><span class=\"line\">        str_kr=<span class=\"variable\">$&#123;arr[2]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"variable\">$str_kr</span> ]</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$filename</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$line_num</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$str_kr</span></span><br><span class=\"line\"></span><br><span class=\"line\">                sed -i <span class=\"string\">''</span><span class=\"variable\">$line_num</span><span class=\"string\">' c\\'</span><span class=\"variable\">$str_kr</span><span class=\"string\">''</span>  <span class=\"variable\">$filename</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"variable\">$line</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; <span class=\"variable\">$file</span></span><br></pre></td></tr></table></figure>\n<p>运行命令替换内容<br>sh changeHtml.sh text.txt </p>\n<p>运行完.asset的文件是没办法替换的，要手动自行替换</p>\n<p>text.txt数据格式如下<br><img src=\"326AD4E2572831FEFC87D564932D6106.jpg\" alt=\"326AD4E2572831FEFC87D564932D6106\"><br><a href=\"/download/changeHtml.sh\">点击下载</a>       </p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>提取<br>提取客户端资源文件之前先要用uc-utf8.php转utf-8 把unicode码转成utf-8的日文在提取<br>将要提取文字的文件整合与getFromHtml.sh 放在同目录下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#sh getFromHtml.sh under the template fold</span></span><br><span class=\"line\"><span class=\"comment\">#Change filelist.csv to excel file, and give it to translator</span></span><br><span class=\"line\"></span><br><span class=\"line\">LANG=C grep -r -n -v <span class=\"string\">'^[[:cntrl:][:print:]]*$'</span> . | grep -v <span class=\"string\">\"using UnityEngine;\"</span> | grep -v svn | grep -v //  | grep -v \\* |  grep -v <span class=\"string\">\"\\&#123;\\*\"</span> |  grep -v <span class=\"string\">\"\\\"Name\\\"\"</span> &gt; ~/lj_2_3_server.csv</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">'s@\\t@ @g'</span> ~/lj_2_3_server.csv</span><br><span class=\"line\">sed -i <span class=\"string\">'s@\\([^:]*\\):\\([0-9]*\\):@\\1\\t\\2\\t@'</span> ~/lj_2_3_server.csv</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/getFromHtml.sh\">点击下载</a><br>","more":"</p>\n<p>可以脚本文件内修改输出路径及文件名<br>运行命令提取内容<br>sh getFromHtml</p>\n<p>取出后的excel先在编辑软件里打开编码改成ansi, 否则直接excel打开会乱码<br>在excel内，全选，点击数据-&gt;分列-&gt;分隔符号-&gt;Tab键-&gt;确定。。。。以Tab键分割内容<br>完成后的数据格式如下：(A列为行数，B列为行号，C列为提取的原字符)<br><img src=\"A46180F494E722BBE7AB60D25E81DD0B.jpg\" alt=\"A46180F494E722BBE7AB60D25E81DD0B\"><br>如果有发现提取到不需要翻译的错误的，可直接整行删除。。。<br>提交翻译</p>\n<ol start=\"2\">\n<li>替换<br>翻译后的文件如果为xls，在最后另起一列，用公式=A1&amp;”^”&amp;B1&amp;”^”&amp;C1连接，拖到底，用连接的主要目的是让文件、行、数据之间有个特殊的符号分割<br>^ 这个符号基本见不到所以用这个，将最后列的数据拷贝到sublime，替换”^ “ 为 “^”去掉多余的数据与行之间的一个空格，然后将\\替换为@@@或者奇怪<br>不重复的符号，如果不替换转换会被转换掉，最后将sublime上的代码考到新建的一个txt中另存为utf-8，上传到服务器对应的目录下面，修改<br>changeHtml.sh这个文件中判断中间的分割符号保存，整个文件权限777.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#sh changeHtml.sh  result_file</span></span><br><span class=\"line\"><span class=\"comment\">#result_file' content</span></span><br><span class=\"line\"><span class=\"comment\">#file's path    line_no old_content     new_content</span></span><br><span class=\"line\"></span><br><span class=\"line\">file=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$file</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Input result_file\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">        IFS=<span class=\"string\">\"^\"</span></span><br><span class=\"line\">        arr=(<span class=\"variable\">$line</span>)</span><br><span class=\"line\">        filename=<span class=\"variable\">$&#123;arr[0]&#125;</span></span><br><span class=\"line\">        line_num=<span class=\"variable\">$&#123;arr[1]&#125;</span></span><br><span class=\"line\">        str_kr=<span class=\"variable\">$&#123;arr[2]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"variable\">$str_kr</span> ]</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$filename</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$line_num</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$str_kr</span></span><br><span class=\"line\"></span><br><span class=\"line\">                sed -i <span class=\"string\">''</span><span class=\"variable\">$line_num</span><span class=\"string\">' c\\'</span><span class=\"variable\">$str_kr</span><span class=\"string\">''</span>  <span class=\"variable\">$filename</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"variable\">$line</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; <span class=\"variable\">$file</span></span><br></pre></td></tr></table></figure>\n<p>运行命令替换内容<br>sh changeHtml.sh text.txt </p>\n<p>运行完.asset的文件是没办法替换的，要手动自行替换</p>\n<p>text.txt数据格式如下<br><img src=\"326AD4E2572831FEFC87D564932D6106.jpg\" alt=\"326AD4E2572831FEFC87D564932D6106\"><br><a href=\"/download/changeHtml.sh\">点击下载</a>       </p>"},{"title":"游戏全局通知红点系统","date":"2019-08-23T09:44:00.000Z","_content":"\n红点功能贯穿游戏所有功能，像是一个全局的通知，用一个配置表记录所有游戏功能及入口和红点、开启的方法名加载进内存\n![Red15669620461084](Red15669620461084.png)\n主入口界面时候调用\n取得已开启的功能列表mod_function:get_all_game_function() 构造成带父子关系的功能列表\n``` bash\n{Id,[{GameFunction #game_function.id}|List1]}\n|\nlists:delete({Id,List1},L)\n```\n通过核心回调到所有模块的红点方法\n``` bash\nIsRed = if\n    Mod =/= '', Func =/= '' ->\n        try erlang:apply(Mod,Func,[PlayerId]) of\n            Result ->\n                Result\n        catch\n            _ : _ ->\n                false\n        end;\n    true ->\n        false\nend,\n```\n最后将缓存中的玩家红点数据替换\n``` bash\nlib_ets:delete(player_red, PlayerId),\n    lib_ets:insert(\n        player_red,\n        #player_red{\n            player_id = PlayerId,\n            red_list  = N\n        },\n        replace\n    ),\n```\n\n不同的功能触发红点改变需要有个打点的函数,在功能需要改变红点状态的时候通知进来更新缓存\n``` bash\nnotify_game_function_is_red (PlayerId,FunctionId) ->\n    case mod_function:check_lock(PlayerId,FunctionId) of\n        false ->\n            noop;\n        _ ->\n            GameFunction = code_db:get(game_function,[FunctionId]),\n            Mod   = list_to_atom(GameFunction #game_function.red_mod),\n            Func  = list_to_atom(GameFunction #game_function.red_func),\n            IsRed = if\n                Mod =/= '', Func =/= '' ->\n                   try erlang:apply(Mod,Func,[PlayerId]) of\n                        Result ->\n                            Result\n                    catch\n                        _ : _ ->\n                            false\n                    end;\n                true ->\n                    false\n            end,\n            if\n                GameFunction #game_function.relation > 0 ->\n                    notify_relation_game_function_is_red(PlayerId,GameFunction #game_function.relation,FunctionId,IsRed);%通知父类联动的函数\n                true ->\n                    update_game_function_cache(PlayerId,FunctionId,IsRed)\n            end\n    end.\n```","source":"_posts/游戏全局通知红点系统.md","raw":"---\ntitle: 游戏全局通知红点系统\ndate: 2019-08-23 17:44:00\ntags:\n\t游戏\n---\n\n红点功能贯穿游戏所有功能，像是一个全局的通知，用一个配置表记录所有游戏功能及入口和红点、开启的方法名加载进内存\n![Red15669620461084](Red15669620461084.png)\n主入口界面时候调用\n取得已开启的功能列表mod_function:get_all_game_function() 构造成带父子关系的功能列表\n``` bash\n{Id,[{GameFunction #game_function.id}|List1]}\n|\nlists:delete({Id,List1},L)\n```\n通过核心回调到所有模块的红点方法\n``` bash\nIsRed = if\n    Mod =/= '', Func =/= '' ->\n        try erlang:apply(Mod,Func,[PlayerId]) of\n            Result ->\n                Result\n        catch\n            _ : _ ->\n                false\n        end;\n    true ->\n        false\nend,\n```\n最后将缓存中的玩家红点数据替换\n``` bash\nlib_ets:delete(player_red, PlayerId),\n    lib_ets:insert(\n        player_red,\n        #player_red{\n            player_id = PlayerId,\n            red_list  = N\n        },\n        replace\n    ),\n```\n\n不同的功能触发红点改变需要有个打点的函数,在功能需要改变红点状态的时候通知进来更新缓存\n``` bash\nnotify_game_function_is_red (PlayerId,FunctionId) ->\n    case mod_function:check_lock(PlayerId,FunctionId) of\n        false ->\n            noop;\n        _ ->\n            GameFunction = code_db:get(game_function,[FunctionId]),\n            Mod   = list_to_atom(GameFunction #game_function.red_mod),\n            Func  = list_to_atom(GameFunction #game_function.red_func),\n            IsRed = if\n                Mod =/= '', Func =/= '' ->\n                   try erlang:apply(Mod,Func,[PlayerId]) of\n                        Result ->\n                            Result\n                    catch\n                        _ : _ ->\n                            false\n                    end;\n                true ->\n                    false\n            end,\n            if\n                GameFunction #game_function.relation > 0 ->\n                    notify_relation_game_function_is_red(PlayerId,GameFunction #game_function.relation,FunctionId,IsRed);%通知父类联动的函数\n                true ->\n                    update_game_function_cache(PlayerId,FunctionId,IsRed)\n            end\n    end.\n```","slug":"游戏全局通知红点系统","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91p00141d8nmptoyqiz","content":"<p>红点功能贯穿游戏所有功能，像是一个全局的通知，用一个配置表记录所有游戏功能及入口和红点、开启的方法名加载进内存<br><img src=\"Red15669620461084.png\" alt=\"Red15669620461084\"><br>主入口界面时候调用<br>取得已开启的功能列表mod_function:get_all_game_function() 构造成带父子关系的功能列表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;Id,[&#123;GameFunction <span class=\"comment\">#game_function.id&#125;|List1]&#125;</span></span><br><span class=\"line\">|</span><br><span class=\"line\">lists:delete(&#123;Id,List1&#125;,L)</span><br></pre></td></tr></table></figure></p>\n<p>通过核心回调到所有模块的红点方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IsRed = <span class=\"keyword\">if</span></span><br><span class=\"line\">    Mod =/= <span class=\"string\">''</span>, Func =/= <span class=\"string\">''</span> -&gt;</span><br><span class=\"line\">        try erlang:apply(Mod,Func,[PlayerId]) of</span><br><span class=\"line\">            Result -&gt;</span><br><span class=\"line\">                Result</span><br><span class=\"line\">        catch</span><br><span class=\"line\">            _ : _ -&gt;</span><br><span class=\"line\">                <span class=\"literal\">false</span></span><br><span class=\"line\">        end;</span><br><span class=\"line\">    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">        <span class=\"literal\">false</span></span><br><span class=\"line\">end,</span><br></pre></td></tr></table></figure></p>\n<p>最后将缓存中的玩家红点数据替换<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lib_ets:delete(player_red, PlayerId),</span><br><span class=\"line\">    lib_ets:insert(</span><br><span class=\"line\">        player_red,</span><br><span class=\"line\">        <span class=\"comment\">#player_red&#123;</span></span><br><span class=\"line\">            player_id = PlayerId,</span><br><span class=\"line\">            red_list  = N</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        replace</span><br><span class=\"line\">    ),</span><br></pre></td></tr></table></figure></p>\n<p>不同的功能触发红点改变需要有个打点的函数,在功能需要改变红点状态的时候通知进来更新缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notify_game_function_is_red (PlayerId,FunctionId) -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mod_function:check_lock(PlayerId,FunctionId) of</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            noop;</span><br><span class=\"line\">        _ -&gt;</span><br><span class=\"line\">            GameFunction = code_db:get(game_function,[FunctionId]),</span><br><span class=\"line\">            Mod   = list_to_atom(GameFunction <span class=\"comment\">#game_function.red_mod),</span></span><br><span class=\"line\">            Func  = list_to_atom(GameFunction <span class=\"comment\">#game_function.red_func),</span></span><br><span class=\"line\">            IsRed = <span class=\"keyword\">if</span></span><br><span class=\"line\">                Mod =/= <span class=\"string\">''</span>, Func =/= <span class=\"string\">''</span> -&gt;</span><br><span class=\"line\">                   try erlang:apply(Mod,Func,[PlayerId]) of</span><br><span class=\"line\">                        Result -&gt;</span><br><span class=\"line\">                            Result</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                        _ : _ -&gt;</span><br><span class=\"line\">                            <span class=\"literal\">false</span></span><br><span class=\"line\">                    end;</span><br><span class=\"line\">                <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                    <span class=\"literal\">false</span></span><br><span class=\"line\">            end,</span><br><span class=\"line\">            <span class=\"keyword\">if</span></span><br><span class=\"line\">                GameFunction <span class=\"comment\">#game_function.relation &gt; 0 -&gt;</span></span><br><span class=\"line\">                    notify_relation_game_function_is_red(PlayerId,GameFunction <span class=\"comment\">#game_function.relation,FunctionId,IsRed);%通知父类联动的函数</span></span><br><span class=\"line\">                <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                    update_game_function_cache(PlayerId,FunctionId,IsRed)</span><br><span class=\"line\">            end</span><br><span class=\"line\">    end.</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>红点功能贯穿游戏所有功能，像是一个全局的通知，用一个配置表记录所有游戏功能及入口和红点、开启的方法名加载进内存<br><img src=\"Red15669620461084.png\" alt=\"Red15669620461084\"><br>主入口界面时候调用<br>取得已开启的功能列表mod_function:get_all_game_function() 构造成带父子关系的功能列表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;Id,[&#123;GameFunction <span class=\"comment\">#game_function.id&#125;|List1]&#125;</span></span><br><span class=\"line\">|</span><br><span class=\"line\">lists:delete(&#123;Id,List1&#125;,L)</span><br></pre></td></tr></table></figure></p>\n<p>通过核心回调到所有模块的红点方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IsRed = <span class=\"keyword\">if</span></span><br><span class=\"line\">    Mod =/= <span class=\"string\">''</span>, Func =/= <span class=\"string\">''</span> -&gt;</span><br><span class=\"line\">        try erlang:apply(Mod,Func,[PlayerId]) of</span><br><span class=\"line\">            Result -&gt;</span><br><span class=\"line\">                Result</span><br><span class=\"line\">        catch</span><br><span class=\"line\">            _ : _ -&gt;</span><br><span class=\"line\">                <span class=\"literal\">false</span></span><br><span class=\"line\">        end;</span><br><span class=\"line\">    <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">        <span class=\"literal\">false</span></span><br><span class=\"line\">end,</span><br></pre></td></tr></table></figure></p>\n<p>最后将缓存中的玩家红点数据替换<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lib_ets:delete(player_red, PlayerId),</span><br><span class=\"line\">    lib_ets:insert(</span><br><span class=\"line\">        player_red,</span><br><span class=\"line\">        <span class=\"comment\">#player_red&#123;</span></span><br><span class=\"line\">            player_id = PlayerId,</span><br><span class=\"line\">            red_list  = N</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        replace</span><br><span class=\"line\">    ),</span><br></pre></td></tr></table></figure></p>\n<p>不同的功能触发红点改变需要有个打点的函数,在功能需要改变红点状态的时候通知进来更新缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notify_game_function_is_red (PlayerId,FunctionId) -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mod_function:check_lock(PlayerId,FunctionId) of</span><br><span class=\"line\">        <span class=\"literal\">false</span> -&gt;</span><br><span class=\"line\">            noop;</span><br><span class=\"line\">        _ -&gt;</span><br><span class=\"line\">            GameFunction = code_db:get(game_function,[FunctionId]),</span><br><span class=\"line\">            Mod   = list_to_atom(GameFunction <span class=\"comment\">#game_function.red_mod),</span></span><br><span class=\"line\">            Func  = list_to_atom(GameFunction <span class=\"comment\">#game_function.red_func),</span></span><br><span class=\"line\">            IsRed = <span class=\"keyword\">if</span></span><br><span class=\"line\">                Mod =/= <span class=\"string\">''</span>, Func =/= <span class=\"string\">''</span> -&gt;</span><br><span class=\"line\">                   try erlang:apply(Mod,Func,[PlayerId]) of</span><br><span class=\"line\">                        Result -&gt;</span><br><span class=\"line\">                            Result</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                        _ : _ -&gt;</span><br><span class=\"line\">                            <span class=\"literal\">false</span></span><br><span class=\"line\">                    end;</span><br><span class=\"line\">                <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                    <span class=\"literal\">false</span></span><br><span class=\"line\">            end,</span><br><span class=\"line\">            <span class=\"keyword\">if</span></span><br><span class=\"line\">                GameFunction <span class=\"comment\">#game_function.relation &gt; 0 -&gt;</span></span><br><span class=\"line\">                    notify_relation_game_function_is_red(PlayerId,GameFunction <span class=\"comment\">#game_function.relation,FunctionId,IsRed);%通知父类联动的函数</span></span><br><span class=\"line\">                <span class=\"literal\">true</span> -&gt;</span><br><span class=\"line\">                    update_game_function_cache(PlayerId,FunctionId,IsRed)</span><br><span class=\"line\">            end</span><br><span class=\"line\">    end.</span><br></pre></td></tr></table></figure></p>\n"},{"title":"项目各种配置文件","date":"2018-07-31T08:43:21.000Z","_content":"\n1. srpg.conf\n``` bash\nserver {\n    listen 80;\n    listen 443 ssl;\n#    server_name alctwobt.ssl.91dena.cn;\n    server_name alccn2-release.ssl.91dena.cn;\n#    ssl on;\n    ssl_certificate /root/cert/91dena_cn.pem;\n    ssl_certificate_key /root/cert/91dena_cn.key;\n\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n\n    ## APP  11\n    location / {\n        # proxy\n        proxy_pass http://127.0.0.1:5000/;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        # connect to backend with keepalives\n\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        proxy_send_timeout 30s;\n        proxy_read_timeout 60s;\n        proxy_connect_timeout 30s;\n    }\n    access_log  /home/log/nginxlog/cnrelease/alccn2.ssl.91dena.cn.access.log main;\n    error_log   /home/log/nginxlog/cnrelease/alccn2.ssl.91dena.cn.error.log;\n}\n```\n[点击下载](/download/nginx.conf)\n<!-- more -->\n\n2. nginx\n``` bash\nuser nginx;\n\nworker_processes  auto;\nworker_rlimit_nofile 150000;\n\nerror_log   /tmp/error.log;\n\nevents {\n    worker_connections  65535;\n    multi_accept on ;\n\n}\n\n\nhttp {\n    include mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" $request_time'\n                      ' $status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"  $upstream_response_time';\n    access_log  /tmp/access.log;\n    sendfile        on;\n    tcp_nopush      on;\n    keepalive_timeout  120;\n\n    gzip  on;\n    \ninclude /etcinx/title/*.conf;\n\n}\n```\n[点击下载](/download/nginx.conf)\n\n3. srpg-app\n``` bash\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides:             webapp\n# Required-Start:       $syslog $remote_fs\n# Required-Stop:        $syslog $remote_fs\n# Should-Start:         $local_fs\n# Should-Stop:          $local_fs\n# Default-Start:        2 3 4 5\n# Default-Stop:         0 1 6\n# Short-Description:    Alchemist Webapp\n# Description:          Alchemist Webapp\n### END INIT INFO\n#\n### BEGIN CHKCONFIG INFO\n# chkconfig: 2345 55 25\n# description: Alchemist Webapp\n### END CHKCONFIG INFO\n\nUSER=\"webapp\"\nNAME=\"webapp\"\nNODE_ENV=\"production\"\nNODE_BIN_DIR=\"/usr/localde/bin\"\nNODE_PATH=\"/usr/localdebde_modules\"\nAPPLICATION_PATH=\"ar/webapps/alchemist/currentde/app/app.js\"\nAPPLICATION_WORKDIR=\"ar/webapps/alchemist/currentde/app/\"\nAPPLICATION_OPTION=\"\"\nLOGFILE=\"ar/webapps/alchemist/log/forever/app.log\"\nMIN_UPTIME=\"5000\"\nSPIN_SLEEP_TIME=\"10000\"\n\nPATH=$NODE_BIN_DIR:$PATH\n\nexport NODE_PATH=$NODE_PATH\n\nstart() {\n    echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\"\n    if [ \"$?\" -eq \"0\" ]; then\n        echo \"$NAME is already running.\"\n        RETVAL=0\n    else\n        echo \"Starting $NAME\"\n        runuser -l \"$USER\" -c \"\\\n        export NODE_ENV=$NODE_ENV &&\n        forever \\\n        -a \\\n        -l $LOGFILE \\\n        --minUptime $MIN_UPTIME \\\n        --spinSleepTime $SPIN_SLEEP_TIME \\\n        --workingDir $APPLICATION_WORKDIR \\\n        start $APPLICATION_PATH $APPLICATION_OPTION\" 2>&1 > /dev/null &\n        RETVAL=$?\n    fi\n}\n\nstop() {\n    echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\"\n    if [ \"$?\" -eq \"0\" ]; then\n        echo \"Shutting down $NAME\"\n        # Tell Forever to stop the process.\n        runuser -l \"$USER\" -c \"forever stop $APPLICATION_PATH\" 2>&1 > /dev/null\n        RETVAL=$?\n    else\n        echo \"$NAME is not running.\"\n        RETVAL=0\n    fi\n}\n\nrestart() {\n    stop\n    start\n}\n\nstatus() {\n    echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\"\n    if [ \"$?\" -eq \"0\" ]; then\n        echo \"$NAME is running.\"\n        RETVAL=0\n    else\n        echo \"$NAME is not running.\"\n        RETVAL=3\n    fi\n}\n\ncase \"$1\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    status)\n        status\n        ;;\n    restart)\n        restart\n        ;;\n    *)\n        echo \"Usage: {start|stop|status|restart}\"\n        exit 1\n        ;;\nesac\nexit $RETVAL\n```\n[点击下载](/download/srpg-app)\n\n4. td-agent\n``` bash\n####\n## Output descriptions:\n##\n\n# Treasure Data (http://www.treasure-data.com/) provides cloud based data\n# analytics platform, which easily stores and processes data from td-agent.\n# FREE plan is also provided.\n# @see http://docs.fluentd.org/articles/http-to-td\n#\n# This section matches events whose tag is td.DATABASE.TABLE\n<match td.*.*>\n  @type tdlog\n  apikey YOUR_API_KEY\n\n  auto_create_table\n  buffer_type file\n  buffer_path /var/log/td-agent/buffer/td\n\n  <secondary>\n    @type file\n    path /var/log/td-agent/failed_records\n  </secondary>\n</match>\n\n## match tag=debug.** and dump to console\n<match debug.**>\n  @type stdout\n</match>\n\n####\n## Source descriptions:\n##\n\n## built-in TCP input\n## @see http://docs.fluentd.org/articles/in_forward\n<source>\n  @type forward\n</source>\n\n## built-in UNIX socket input\n#<source>\n#  @type unix\n#</source>\n\n# HTTP input\n# POST http://localhost:8888/<tag>?json=<json>\n# POST http://localhost:8888/td.myapp.login?json={\"user\"%3A\"me\"}\n# @see http://docs.fluentd.org/articles/in_http\n<source>\n  @type http\n  port 8888\n</source>\n\n## live debugging agent\n<source>\n  @type debug_agent\n  bind 127.0.0.1\n  port 24230\n</source>\n\n####\n## Examples:\n##\n\n## File input\n## read apache logs continuously and tags td.apache.access\n#<source>\n#  @type tail\n#  format apache\n#  path /var/log/httpd-access.log\n#  tag td.apache.access\n#</source>\n\n## File output\n## match tag=local.** and write to file\n#<match local.**>\n#  @type file\n#  path /var/log/td-agent/access\n#</match>\n\n## Forwarding\n## match tag=system.** and forward to another td-agent server\n#<match system.**>\n#  @type forward\n#  host 192.168.0.11\n#  # secondary host is optional\n#  <secondary>\n#    host 192.168.0.12\n#  </secondary>\n#</match>\n\n## Multiple output\n## match tag=td.*.* and output to Treasure Data AND file\n#<match td.*.*>\n#  @type copy\n#  <store>\n#    @type tdlog\n#    apikey API_KEY\n#  auto_create_table\n#    buffer_type file\n#    buffer_path /var/log/td-agent/buffer/td\n#  </store>\n#  <store>\n#    @type file\n#    path /var/log/td-agent/td-%Y-%m-%d/%H.log\n#  </store>\n#</match>\n#<match *.**>\n#  type file\n#   path /var/log/td-agent/error.log\n#</match>\n\n<match alchemist.**>\n  type forward\n  heartbeat_type tcp\n  buffer_type file\n  buffer_path /var/tmp/td-agent/forward.*.buffer\n  buffer_chunk_limit 8m     # チャンクサイズ\n  buffer_queue_limit 256    # 1queueに保存できるchunk数の上限\n  flush_interval 1s        # 10秒に1回送信\n  flush_at_shutdown true    # シャットダウン時にチャンクを処理するか?(ファイルバッファのみ有効)\n  retry_wait 5s            # 再送実施までの待ち時間\n  retry_limit 2             # 再送実施回数\n  require_ack_response true\n  expire_dns_cache 0\n  dns_round_robin true\n\n  <server>\n    host mongodb.alccn.91dena.cn\n    port 24224\n  </server>\n\n  # ログ送信失敗時のファイル\n  #  # <secondary>\n  #      #  type file\n  #         #   path /var/log/td-agent/failed/forward-failed\n  #           #</secondary>\n </match>\n```\n[点击下载](/download/td-agent.conf)\n\n\n","source":"_posts/项目各种配置文件.md","raw":"---\ntitle: 项目各种配置文件\ndate: 2018-07-31 16:43:21\ncategories: \"开发环境安装\"\ntags:\n\t- nginx\n\t- td-agent\n---\n\n1. srpg.conf\n``` bash\nserver {\n    listen 80;\n    listen 443 ssl;\n#    server_name alctwobt.ssl.91dena.cn;\n    server_name alccn2-release.ssl.91dena.cn;\n#    ssl on;\n    ssl_certificate /root/cert/91dena_cn.pem;\n    ssl_certificate_key /root/cert/91dena_cn.key;\n\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n\n    ## APP  11\n    location / {\n        # proxy\n        proxy_pass http://127.0.0.1:5000/;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        # connect to backend with keepalives\n\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        proxy_send_timeout 30s;\n        proxy_read_timeout 60s;\n        proxy_connect_timeout 30s;\n    }\n    access_log  /home/log/nginxlog/cnrelease/alccn2.ssl.91dena.cn.access.log main;\n    error_log   /home/log/nginxlog/cnrelease/alccn2.ssl.91dena.cn.error.log;\n}\n```\n[点击下载](/download/nginx.conf)\n<!-- more -->\n\n2. nginx\n``` bash\nuser nginx;\n\nworker_processes  auto;\nworker_rlimit_nofile 150000;\n\nerror_log   /tmp/error.log;\n\nevents {\n    worker_connections  65535;\n    multi_accept on ;\n\n}\n\n\nhttp {\n    include mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" $request_time'\n                      ' $status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"  $upstream_response_time';\n    access_log  /tmp/access.log;\n    sendfile        on;\n    tcp_nopush      on;\n    keepalive_timeout  120;\n\n    gzip  on;\n    \ninclude /etcinx/title/*.conf;\n\n}\n```\n[点击下载](/download/nginx.conf)\n\n3. srpg-app\n``` bash\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides:             webapp\n# Required-Start:       $syslog $remote_fs\n# Required-Stop:        $syslog $remote_fs\n# Should-Start:         $local_fs\n# Should-Stop:          $local_fs\n# Default-Start:        2 3 4 5\n# Default-Stop:         0 1 6\n# Short-Description:    Alchemist Webapp\n# Description:          Alchemist Webapp\n### END INIT INFO\n#\n### BEGIN CHKCONFIG INFO\n# chkconfig: 2345 55 25\n# description: Alchemist Webapp\n### END CHKCONFIG INFO\n\nUSER=\"webapp\"\nNAME=\"webapp\"\nNODE_ENV=\"production\"\nNODE_BIN_DIR=\"/usr/localde/bin\"\nNODE_PATH=\"/usr/localdebde_modules\"\nAPPLICATION_PATH=\"ar/webapps/alchemist/currentde/app/app.js\"\nAPPLICATION_WORKDIR=\"ar/webapps/alchemist/currentde/app/\"\nAPPLICATION_OPTION=\"\"\nLOGFILE=\"ar/webapps/alchemist/log/forever/app.log\"\nMIN_UPTIME=\"5000\"\nSPIN_SLEEP_TIME=\"10000\"\n\nPATH=$NODE_BIN_DIR:$PATH\n\nexport NODE_PATH=$NODE_PATH\n\nstart() {\n    echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\"\n    if [ \"$?\" -eq \"0\" ]; then\n        echo \"$NAME is already running.\"\n        RETVAL=0\n    else\n        echo \"Starting $NAME\"\n        runuser -l \"$USER\" -c \"\\\n        export NODE_ENV=$NODE_ENV &&\n        forever \\\n        -a \\\n        -l $LOGFILE \\\n        --minUptime $MIN_UPTIME \\\n        --spinSleepTime $SPIN_SLEEP_TIME \\\n        --workingDir $APPLICATION_WORKDIR \\\n        start $APPLICATION_PATH $APPLICATION_OPTION\" 2>&1 > /dev/null &\n        RETVAL=$?\n    fi\n}\n\nstop() {\n    echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\"\n    if [ \"$?\" -eq \"0\" ]; then\n        echo \"Shutting down $NAME\"\n        # Tell Forever to stop the process.\n        runuser -l \"$USER\" -c \"forever stop $APPLICATION_PATH\" 2>&1 > /dev/null\n        RETVAL=$?\n    else\n        echo \"$NAME is not running.\"\n        RETVAL=0\n    fi\n}\n\nrestart() {\n    stop\n    start\n}\n\nstatus() {\n    echo `runuser -l \"$USER\" -c \"forever list\"` | grep -q \"$APPLICATION_PATH\"\n    if [ \"$?\" -eq \"0\" ]; then\n        echo \"$NAME is running.\"\n        RETVAL=0\n    else\n        echo \"$NAME is not running.\"\n        RETVAL=3\n    fi\n}\n\ncase \"$1\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    status)\n        status\n        ;;\n    restart)\n        restart\n        ;;\n    *)\n        echo \"Usage: {start|stop|status|restart}\"\n        exit 1\n        ;;\nesac\nexit $RETVAL\n```\n[点击下载](/download/srpg-app)\n\n4. td-agent\n``` bash\n####\n## Output descriptions:\n##\n\n# Treasure Data (http://www.treasure-data.com/) provides cloud based data\n# analytics platform, which easily stores and processes data from td-agent.\n# FREE plan is also provided.\n# @see http://docs.fluentd.org/articles/http-to-td\n#\n# This section matches events whose tag is td.DATABASE.TABLE\n<match td.*.*>\n  @type tdlog\n  apikey YOUR_API_KEY\n\n  auto_create_table\n  buffer_type file\n  buffer_path /var/log/td-agent/buffer/td\n\n  <secondary>\n    @type file\n    path /var/log/td-agent/failed_records\n  </secondary>\n</match>\n\n## match tag=debug.** and dump to console\n<match debug.**>\n  @type stdout\n</match>\n\n####\n## Source descriptions:\n##\n\n## built-in TCP input\n## @see http://docs.fluentd.org/articles/in_forward\n<source>\n  @type forward\n</source>\n\n## built-in UNIX socket input\n#<source>\n#  @type unix\n#</source>\n\n# HTTP input\n# POST http://localhost:8888/<tag>?json=<json>\n# POST http://localhost:8888/td.myapp.login?json={\"user\"%3A\"me\"}\n# @see http://docs.fluentd.org/articles/in_http\n<source>\n  @type http\n  port 8888\n</source>\n\n## live debugging agent\n<source>\n  @type debug_agent\n  bind 127.0.0.1\n  port 24230\n</source>\n\n####\n## Examples:\n##\n\n## File input\n## read apache logs continuously and tags td.apache.access\n#<source>\n#  @type tail\n#  format apache\n#  path /var/log/httpd-access.log\n#  tag td.apache.access\n#</source>\n\n## File output\n## match tag=local.** and write to file\n#<match local.**>\n#  @type file\n#  path /var/log/td-agent/access\n#</match>\n\n## Forwarding\n## match tag=system.** and forward to another td-agent server\n#<match system.**>\n#  @type forward\n#  host 192.168.0.11\n#  # secondary host is optional\n#  <secondary>\n#    host 192.168.0.12\n#  </secondary>\n#</match>\n\n## Multiple output\n## match tag=td.*.* and output to Treasure Data AND file\n#<match td.*.*>\n#  @type copy\n#  <store>\n#    @type tdlog\n#    apikey API_KEY\n#  auto_create_table\n#    buffer_type file\n#    buffer_path /var/log/td-agent/buffer/td\n#  </store>\n#  <store>\n#    @type file\n#    path /var/log/td-agent/td-%Y-%m-%d/%H.log\n#  </store>\n#</match>\n#<match *.**>\n#  type file\n#   path /var/log/td-agent/error.log\n#</match>\n\n<match alchemist.**>\n  type forward\n  heartbeat_type tcp\n  buffer_type file\n  buffer_path /var/tmp/td-agent/forward.*.buffer\n  buffer_chunk_limit 8m     # チャンクサイズ\n  buffer_queue_limit 256    # 1queueに保存できるchunk数の上限\n  flush_interval 1s        # 10秒に1回送信\n  flush_at_shutdown true    # シャットダウン時にチャンクを処理するか?(ファイルバッファのみ有効)\n  retry_wait 5s            # 再送実施までの待ち時間\n  retry_limit 2             # 再送実施回数\n  require_ack_response true\n  expire_dns_cache 0\n  dns_round_robin true\n\n  <server>\n    host mongodb.alccn.91dena.cn\n    port 24224\n  </server>\n\n  # ログ送信失敗時のファイル\n  #  # <secondary>\n  #      #  type file\n  #         #   path /var/log/td-agent/failed/forward-failed\n  #           #</secondary>\n </match>\n```\n[点击下载](/download/td-agent.conf)\n\n\n","slug":"项目各种配置文件","published":1,"updated":"2019-11-27T15:26:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck88nc91q00181d8n501x7sbk","content":"<ol>\n<li>srpg.conf<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\"><span class=\"comment\">#    server_name alctwobt.ssl.91dena.cn;</span></span><br><span class=\"line\">    server_name alccn2-release.ssl.91dena.cn;</span><br><span class=\"line\"><span class=\"comment\">#    ssl on;</span></span><br><span class=\"line\">    ssl_certificate /root/cert/91dena_cn.pem;</span><br><span class=\"line\">    ssl_certificate_key /root/cert/91dena_cn.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    proxy_set_header Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## APP  11</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        <span class=\"comment\"># proxy</span></span><br><span class=\"line\">        proxy_pass http://127.0.0.1:5000/;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"comment\"># connect to backend with keepalives</span></span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Connection <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        proxy_send_timeout 30s;</span><br><span class=\"line\">        proxy_read_timeout 60s;</span><br><span class=\"line\">        proxy_connect_timeout 30s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    access_log  /home/<span class=\"built_in\">log</span>/nginxlog/cnrelease/alccn2.ssl.91dena.cn.access.log main;</span><br><span class=\"line\">    error_log   /home/<span class=\"built_in\">log</span>/nginxlog/cnrelease/alccn2.ssl.91dena.cn.error.log;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/nginx.conf\">点击下载</a><br><a id=\"more\"></a></p>\n<ol start=\"2\">\n<li>nginx<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\"></span><br><span class=\"line\">worker_processes  auto;</span><br><span class=\"line\">worker_rlimit_nofile 150000;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log   /tmp/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  65535;</span><br><span class=\"line\">    multi_accept on ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" $request_time'</span></span><br><span class=\"line\">                      <span class=\"string\">' $status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"  $upstream_response_time'</span>;</span><br><span class=\"line\">    access_log  /tmp/access.log;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    tcp_nopush      on;</span><br><span class=\"line\">    keepalive_timeout  120;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">include /etcinx/title/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/nginx.conf\">点击下载</a></p>\n<ol start=\"3\">\n<li>srpg-app<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides:             webapp</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Start:       $syslog $remote_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Stop:        $syslog $remote_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Should-Start:         $local_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Should-Stop:          $local_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Start:        2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Stop:         0 1 6</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description:    Alchemist Webapp</span></span><br><span class=\"line\"><span class=\"comment\"># Description:          Alchemist Webapp</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">### BEGIN CHKCONFIG INFO</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 55 25</span></span><br><span class=\"line\"><span class=\"comment\"># description: Alchemist Webapp</span></span><br><span class=\"line\"><span class=\"comment\">### END CHKCONFIG INFO</span></span><br><span class=\"line\"></span><br><span class=\"line\">USER=<span class=\"string\">\"webapp\"</span></span><br><span class=\"line\">NAME=<span class=\"string\">\"webapp\"</span></span><br><span class=\"line\">NODE_ENV=<span class=\"string\">\"production\"</span></span><br><span class=\"line\">NODE_BIN_DIR=<span class=\"string\">\"/usr/localde/bin\"</span></span><br><span class=\"line\">NODE_PATH=<span class=\"string\">\"/usr/localdebde_modules\"</span></span><br><span class=\"line\">APPLICATION_PATH=<span class=\"string\">\"ar/webapps/alchemist/currentde/app/app.js\"</span></span><br><span class=\"line\">APPLICATION_WORKDIR=<span class=\"string\">\"ar/webapps/alchemist/currentde/app/\"</span></span><br><span class=\"line\">APPLICATION_OPTION=<span class=\"string\">\"\"</span></span><br><span class=\"line\">LOGFILE=<span class=\"string\">\"ar/webapps/alchemist/log/forever/app.log\"</span></span><br><span class=\"line\">MIN_UPTIME=<span class=\"string\">\"5000\"</span></span><br><span class=\"line\">SPIN_SLEEP_TIME=<span class=\"string\">\"10000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=<span class=\"variable\">$NODE_BIN_DIR</span>:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_PATH=<span class=\"variable\">$NODE_PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> `runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"forever list\"</span>` | grep -q <span class=\"string\">\"<span class=\"variable\">$APPLICATION_PATH</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"$?\"</span> -eq <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is already running.\"</span></span><br><span class=\"line\">        RETVAL=0</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Starting <span class=\"variable\">$NAME</span>\"</span></span><br><span class=\"line\">        runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"\\</span></span><br><span class=\"line\"><span class=\"string\">        export NODE_ENV=<span class=\"variable\">$NODE_ENV</span> &amp;&amp;</span></span><br><span class=\"line\"><span class=\"string\">        forever \\</span></span><br><span class=\"line\"><span class=\"string\">        -a \\</span></span><br><span class=\"line\"><span class=\"string\">        -l <span class=\"variable\">$LOGFILE</span> \\</span></span><br><span class=\"line\"><span class=\"string\">        --minUptime <span class=\"variable\">$MIN_UPTIME</span> \\</span></span><br><span class=\"line\"><span class=\"string\">        --spinSleepTime <span class=\"variable\">$SPIN_SLEEP_TIME</span> \\</span></span><br><span class=\"line\"><span class=\"string\">        --workingDir <span class=\"variable\">$APPLICATION_WORKDIR</span> \\</span></span><br><span class=\"line\"><span class=\"string\">        start <span class=\"variable\">$APPLICATION_PATH</span> <span class=\"variable\">$APPLICATION_OPTION</span>\"</span> 2&gt;&amp;1 &gt; /dev/null &amp;</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> `runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"forever list\"</span>` | grep -q <span class=\"string\">\"<span class=\"variable\">$APPLICATION_PATH</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"$?\"</span> -eq <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Shutting down <span class=\"variable\">$NAME</span>\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Tell Forever to stop the process.</span></span><br><span class=\"line\">        runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"forever stop <span class=\"variable\">$APPLICATION_PATH</span>\"</span> 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is not running.\"</span></span><br><span class=\"line\">        RETVAL=0</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>() &#123;</span><br><span class=\"line\">    stop</span><br><span class=\"line\">    start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">status</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> `runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"forever list\"</span>` | grep -q <span class=\"string\">\"<span class=\"variable\">$APPLICATION_PATH</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"$?\"</span> -eq <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is running.\"</span></span><br><span class=\"line\">        RETVAL=0</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is not running.\"</span></span><br><span class=\"line\">        RETVAL=3</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        status</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        restart</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: &#123;start|stop|status|restart&#125;\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$RETVAL</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/srpg-app\">点击下载</a></p>\n<ol start=\"4\">\n<li>td-agent<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">####</span></span><br><span class=\"line\"><span class=\"comment\">## Output descriptions:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Treasure Data (http://www.treasure-data.com/) provides cloud based data</span></span><br><span class=\"line\"><span class=\"comment\"># analytics platform, which easily stores and processes data from td-agent.</span></span><br><span class=\"line\"><span class=\"comment\"># FREE plan is also provided.</span></span><br><span class=\"line\"><span class=\"comment\"># @see http://docs.fluentd.org/articles/http-to-td</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This section matches events whose tag is td.DATABASE.TABLE</span></span><br><span class=\"line\">&lt;match td.*.*&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> tdlog</span><br><span class=\"line\">  apikey YOUR_API_KEY</span><br><span class=\"line\"></span><br><span class=\"line\">  auto_create_table</span><br><span class=\"line\">  buffer_type file</span><br><span class=\"line\">  buffer_path /var/<span class=\"built_in\">log</span>/td-agent/buffer/td</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;secondary&gt;</span><br><span class=\"line\">    @<span class=\"built_in\">type</span> file</span><br><span class=\"line\">    path /var/<span class=\"built_in\">log</span>/td-agent/failed_records</span><br><span class=\"line\">  &lt;/secondary&gt;</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## match tag=debug.** and dump to console</span></span><br><span class=\"line\">&lt;match debug.**&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####</span></span><br><span class=\"line\"><span class=\"comment\">## Source descriptions:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## built-in TCP input</span></span><br><span class=\"line\"><span class=\"comment\">## @see http://docs.fluentd.org/articles/in_forward</span></span><br><span class=\"line\">&lt;<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> forward</span><br><span class=\"line\">&lt;/<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## built-in UNIX socket input</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;source&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type unix</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/source&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTP input</span></span><br><span class=\"line\"><span class=\"comment\"># POST http://localhost:8888/&lt;tag&gt;?json=&lt;json&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># POST http://localhost:8888/td.myapp.login?json=&#123;\"user\"%3A\"me\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># @see http://docs.fluentd.org/articles/in_http</span></span><br><span class=\"line\">&lt;<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> http</span><br><span class=\"line\">  port 8888</span><br><span class=\"line\">&lt;/<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## live debugging agent</span></span><br><span class=\"line\">&lt;<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> debug_agent</span><br><span class=\"line\">  <span class=\"built_in\">bind</span> 127.0.0.1</span><br><span class=\"line\">  port 24230</span><br><span class=\"line\">&lt;/<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####</span></span><br><span class=\"line\"><span class=\"comment\">## Examples:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## File input</span></span><br><span class=\"line\"><span class=\"comment\">## read apache logs continuously and tags td.apache.access</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;source&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type tail</span></span><br><span class=\"line\"><span class=\"comment\">#  format apache</span></span><br><span class=\"line\"><span class=\"comment\">#  path /var/log/httpd-access.log</span></span><br><span class=\"line\"><span class=\"comment\">#  tag td.apache.access</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/source&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## File output</span></span><br><span class=\"line\"><span class=\"comment\">## match tag=local.** and write to file</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;match local.**&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type file</span></span><br><span class=\"line\"><span class=\"comment\">#  path /var/log/td-agent/access</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/match&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Forwarding</span></span><br><span class=\"line\"><span class=\"comment\">## match tag=system.** and forward to another td-agent server</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;match system.**&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type forward</span></span><br><span class=\"line\"><span class=\"comment\">#  host 192.168.0.11</span></span><br><span class=\"line\"><span class=\"comment\">#  # secondary host is optional</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;secondary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#    host 192.168.0.12</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;/secondary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/match&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Multiple output</span></span><br><span class=\"line\"><span class=\"comment\">## match tag=td.*.* and output to Treasure Data AND file</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;match td.*.*&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type copy</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;store&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#    @type tdlog</span></span><br><span class=\"line\"><span class=\"comment\">#    apikey API_KEY</span></span><br><span class=\"line\"><span class=\"comment\">#  auto_create_table</span></span><br><span class=\"line\"><span class=\"comment\">#    buffer_type file</span></span><br><span class=\"line\"><span class=\"comment\">#    buffer_path /var/log/td-agent/buffer/td</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;/store&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;store&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#    @type file</span></span><br><span class=\"line\"><span class=\"comment\">#    path /var/log/td-agent/td-%Y-%m-%d/%H.log</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;/store&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/match&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;match *.**&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  type file</span></span><br><span class=\"line\"><span class=\"comment\">#   path /var/log/td-agent/error.log</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/match&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match alchemist.**&gt;</span><br><span class=\"line\">  <span class=\"built_in\">type</span> forward</span><br><span class=\"line\">  heartbeat_type tcp</span><br><span class=\"line\">  buffer_type file</span><br><span class=\"line\">  buffer_path /var/tmp/td-agent/forward.*.buffer</span><br><span class=\"line\">  buffer_chunk_limit 8m     <span class=\"comment\"># チャンクサイズ</span></span><br><span class=\"line\">  buffer_queue_limit 256    <span class=\"comment\"># 1queueに保存できるchunk数の上限</span></span><br><span class=\"line\">  flush_interval 1s        <span class=\"comment\"># 10秒に1回送信</span></span><br><span class=\"line\">  flush_at_shutdown <span class=\"literal\">true</span>    <span class=\"comment\"># シャットダウン時にチャンクを処理するか?(ファイルバッファのみ有効)</span></span><br><span class=\"line\">  retry_wait 5s            <span class=\"comment\"># 再送実施までの待ち時間</span></span><br><span class=\"line\">  retry_limit 2             <span class=\"comment\"># 再送実施回数</span></span><br><span class=\"line\">  require_ack_response <span class=\"literal\">true</span></span><br><span class=\"line\">  expire_dns_cache 0</span><br><span class=\"line\">  dns_round_robin <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;server&gt;</span><br><span class=\"line\">    host mongodb.alccn.91dena.cn</span><br><span class=\"line\">    port 24224</span><br><span class=\"line\">  &lt;/server&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># ログ送信失敗時のファイル</span></span><br><span class=\"line\">  <span class=\"comment\">#  # &lt;secondary&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#      #  type file</span></span><br><span class=\"line\">  <span class=\"comment\">#         #   path /var/log/td-agent/failed/forward-failed</span></span><br><span class=\"line\">  <span class=\"comment\">#           #&lt;/secondary&gt;</span></span><br><span class=\"line\"> &lt;/match&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/td-agent.conf\">点击下载</a></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>srpg.conf<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\"><span class=\"comment\">#    server_name alctwobt.ssl.91dena.cn;</span></span><br><span class=\"line\">    server_name alccn2-release.ssl.91dena.cn;</span><br><span class=\"line\"><span class=\"comment\">#    ssl on;</span></span><br><span class=\"line\">    ssl_certificate /root/cert/91dena_cn.pem;</span><br><span class=\"line\">    ssl_certificate_key /root/cert/91dena_cn.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    proxy_set_header Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## APP  11</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        <span class=\"comment\"># proxy</span></span><br><span class=\"line\">        proxy_pass http://127.0.0.1:5000/;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"comment\"># connect to backend with keepalives</span></span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Connection <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        proxy_send_timeout 30s;</span><br><span class=\"line\">        proxy_read_timeout 60s;</span><br><span class=\"line\">        proxy_connect_timeout 30s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    access_log  /home/<span class=\"built_in\">log</span>/nginxlog/cnrelease/alccn2.ssl.91dena.cn.access.log main;</span><br><span class=\"line\">    error_log   /home/<span class=\"built_in\">log</span>/nginxlog/cnrelease/alccn2.ssl.91dena.cn.error.log;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/nginx.conf\">点击下载</a><br>","more":"</p>\n<ol start=\"2\">\n<li>nginx<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\"></span><br><span class=\"line\">worker_processes  auto;</span><br><span class=\"line\">worker_rlimit_nofile 150000;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log   /tmp/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  65535;</span><br><span class=\"line\">    multi_accept on ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" $request_time'</span></span><br><span class=\"line\">                      <span class=\"string\">' $status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"  $upstream_response_time'</span>;</span><br><span class=\"line\">    access_log  /tmp/access.log;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    tcp_nopush      on;</span><br><span class=\"line\">    keepalive_timeout  120;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">include /etcinx/title/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/nginx.conf\">点击下载</a></p>\n<ol start=\"3\">\n<li>srpg-app<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\"># Provides:             webapp</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Start:       $syslog $remote_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Required-Stop:        $syslog $remote_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Should-Start:         $local_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Should-Stop:          $local_fs</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Start:        2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\"># Default-Stop:         0 1 6</span></span><br><span class=\"line\"><span class=\"comment\"># Short-Description:    Alchemist Webapp</span></span><br><span class=\"line\"><span class=\"comment\"># Description:          Alchemist Webapp</span></span><br><span class=\"line\"><span class=\"comment\">### END INIT INFO</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">### BEGIN CHKCONFIG INFO</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 55 25</span></span><br><span class=\"line\"><span class=\"comment\"># description: Alchemist Webapp</span></span><br><span class=\"line\"><span class=\"comment\">### END CHKCONFIG INFO</span></span><br><span class=\"line\"></span><br><span class=\"line\">USER=<span class=\"string\">\"webapp\"</span></span><br><span class=\"line\">NAME=<span class=\"string\">\"webapp\"</span></span><br><span class=\"line\">NODE_ENV=<span class=\"string\">\"production\"</span></span><br><span class=\"line\">NODE_BIN_DIR=<span class=\"string\">\"/usr/localde/bin\"</span></span><br><span class=\"line\">NODE_PATH=<span class=\"string\">\"/usr/localdebde_modules\"</span></span><br><span class=\"line\">APPLICATION_PATH=<span class=\"string\">\"ar/webapps/alchemist/currentde/app/app.js\"</span></span><br><span class=\"line\">APPLICATION_WORKDIR=<span class=\"string\">\"ar/webapps/alchemist/currentde/app/\"</span></span><br><span class=\"line\">APPLICATION_OPTION=<span class=\"string\">\"\"</span></span><br><span class=\"line\">LOGFILE=<span class=\"string\">\"ar/webapps/alchemist/log/forever/app.log\"</span></span><br><span class=\"line\">MIN_UPTIME=<span class=\"string\">\"5000\"</span></span><br><span class=\"line\">SPIN_SLEEP_TIME=<span class=\"string\">\"10000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=<span class=\"variable\">$NODE_BIN_DIR</span>:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_PATH=<span class=\"variable\">$NODE_PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> `runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"forever list\"</span>` | grep -q <span class=\"string\">\"<span class=\"variable\">$APPLICATION_PATH</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"$?\"</span> -eq <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is already running.\"</span></span><br><span class=\"line\">        RETVAL=0</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Starting <span class=\"variable\">$NAME</span>\"</span></span><br><span class=\"line\">        runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"\\</span></span><br><span class=\"line\"><span class=\"string\">        export NODE_ENV=<span class=\"variable\">$NODE_ENV</span> &amp;&amp;</span></span><br><span class=\"line\"><span class=\"string\">        forever \\</span></span><br><span class=\"line\"><span class=\"string\">        -a \\</span></span><br><span class=\"line\"><span class=\"string\">        -l <span class=\"variable\">$LOGFILE</span> \\</span></span><br><span class=\"line\"><span class=\"string\">        --minUptime <span class=\"variable\">$MIN_UPTIME</span> \\</span></span><br><span class=\"line\"><span class=\"string\">        --spinSleepTime <span class=\"variable\">$SPIN_SLEEP_TIME</span> \\</span></span><br><span class=\"line\"><span class=\"string\">        --workingDir <span class=\"variable\">$APPLICATION_WORKDIR</span> \\</span></span><br><span class=\"line\"><span class=\"string\">        start <span class=\"variable\">$APPLICATION_PATH</span> <span class=\"variable\">$APPLICATION_OPTION</span>\"</span> 2&gt;&amp;1 &gt; /dev/null &amp;</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> `runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"forever list\"</span>` | grep -q <span class=\"string\">\"<span class=\"variable\">$APPLICATION_PATH</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"$?\"</span> -eq <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Shutting down <span class=\"variable\">$NAME</span>\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Tell Forever to stop the process.</span></span><br><span class=\"line\">        runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"forever stop <span class=\"variable\">$APPLICATION_PATH</span>\"</span> 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is not running.\"</span></span><br><span class=\"line\">        RETVAL=0</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>() &#123;</span><br><span class=\"line\">    stop</span><br><span class=\"line\">    start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">status</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> `runuser -l <span class=\"string\">\"<span class=\"variable\">$USER</span>\"</span> -c <span class=\"string\">\"forever list\"</span>` | grep -q <span class=\"string\">\"<span class=\"variable\">$APPLICATION_PATH</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"$?\"</span> -eq <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is running.\"</span></span><br><span class=\"line\">        RETVAL=0</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is not running.\"</span></span><br><span class=\"line\">        RETVAL=3</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        status</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        restart</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: &#123;start|stop|status|restart&#125;\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$RETVAL</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/srpg-app\">点击下载</a></p>\n<ol start=\"4\">\n<li>td-agent<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">####</span></span><br><span class=\"line\"><span class=\"comment\">## Output descriptions:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Treasure Data (http://www.treasure-data.com/) provides cloud based data</span></span><br><span class=\"line\"><span class=\"comment\"># analytics platform, which easily stores and processes data from td-agent.</span></span><br><span class=\"line\"><span class=\"comment\"># FREE plan is also provided.</span></span><br><span class=\"line\"><span class=\"comment\"># @see http://docs.fluentd.org/articles/http-to-td</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This section matches events whose tag is td.DATABASE.TABLE</span></span><br><span class=\"line\">&lt;match td.*.*&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> tdlog</span><br><span class=\"line\">  apikey YOUR_API_KEY</span><br><span class=\"line\"></span><br><span class=\"line\">  auto_create_table</span><br><span class=\"line\">  buffer_type file</span><br><span class=\"line\">  buffer_path /var/<span class=\"built_in\">log</span>/td-agent/buffer/td</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;secondary&gt;</span><br><span class=\"line\">    @<span class=\"built_in\">type</span> file</span><br><span class=\"line\">    path /var/<span class=\"built_in\">log</span>/td-agent/failed_records</span><br><span class=\"line\">  &lt;/secondary&gt;</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## match tag=debug.** and dump to console</span></span><br><span class=\"line\">&lt;match debug.**&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####</span></span><br><span class=\"line\"><span class=\"comment\">## Source descriptions:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## built-in TCP input</span></span><br><span class=\"line\"><span class=\"comment\">## @see http://docs.fluentd.org/articles/in_forward</span></span><br><span class=\"line\">&lt;<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> forward</span><br><span class=\"line\">&lt;/<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## built-in UNIX socket input</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;source&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type unix</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/source&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTP input</span></span><br><span class=\"line\"><span class=\"comment\"># POST http://localhost:8888/&lt;tag&gt;?json=&lt;json&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># POST http://localhost:8888/td.myapp.login?json=&#123;\"user\"%3A\"me\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># @see http://docs.fluentd.org/articles/in_http</span></span><br><span class=\"line\">&lt;<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> http</span><br><span class=\"line\">  port 8888</span><br><span class=\"line\">&lt;/<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## live debugging agent</span></span><br><span class=\"line\">&lt;<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\">  @<span class=\"built_in\">type</span> debug_agent</span><br><span class=\"line\">  <span class=\"built_in\">bind</span> 127.0.0.1</span><br><span class=\"line\">  port 24230</span><br><span class=\"line\">&lt;/<span class=\"built_in\">source</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####</span></span><br><span class=\"line\"><span class=\"comment\">## Examples:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## File input</span></span><br><span class=\"line\"><span class=\"comment\">## read apache logs continuously and tags td.apache.access</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;source&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type tail</span></span><br><span class=\"line\"><span class=\"comment\">#  format apache</span></span><br><span class=\"line\"><span class=\"comment\">#  path /var/log/httpd-access.log</span></span><br><span class=\"line\"><span class=\"comment\">#  tag td.apache.access</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/source&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## File output</span></span><br><span class=\"line\"><span class=\"comment\">## match tag=local.** and write to file</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;match local.**&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type file</span></span><br><span class=\"line\"><span class=\"comment\">#  path /var/log/td-agent/access</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/match&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Forwarding</span></span><br><span class=\"line\"><span class=\"comment\">## match tag=system.** and forward to another td-agent server</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;match system.**&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type forward</span></span><br><span class=\"line\"><span class=\"comment\">#  host 192.168.0.11</span></span><br><span class=\"line\"><span class=\"comment\">#  # secondary host is optional</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;secondary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#    host 192.168.0.12</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;/secondary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/match&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Multiple output</span></span><br><span class=\"line\"><span class=\"comment\">## match tag=td.*.* and output to Treasure Data AND file</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;match td.*.*&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  @type copy</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;store&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#    @type tdlog</span></span><br><span class=\"line\"><span class=\"comment\">#    apikey API_KEY</span></span><br><span class=\"line\"><span class=\"comment\">#  auto_create_table</span></span><br><span class=\"line\"><span class=\"comment\">#    buffer_type file</span></span><br><span class=\"line\"><span class=\"comment\">#    buffer_path /var/log/td-agent/buffer/td</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;/store&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;store&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#    @type file</span></span><br><span class=\"line\"><span class=\"comment\">#    path /var/log/td-agent/td-%Y-%m-%d/%H.log</span></span><br><span class=\"line\"><span class=\"comment\">#  &lt;/store&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/match&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;match *.**&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#  type file</span></span><br><span class=\"line\"><span class=\"comment\">#   path /var/log/td-agent/error.log</span></span><br><span class=\"line\"><span class=\"comment\">#&lt;/match&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match alchemist.**&gt;</span><br><span class=\"line\">  <span class=\"built_in\">type</span> forward</span><br><span class=\"line\">  heartbeat_type tcp</span><br><span class=\"line\">  buffer_type file</span><br><span class=\"line\">  buffer_path /var/tmp/td-agent/forward.*.buffer</span><br><span class=\"line\">  buffer_chunk_limit 8m     <span class=\"comment\"># チャンクサイズ</span></span><br><span class=\"line\">  buffer_queue_limit 256    <span class=\"comment\"># 1queueに保存できるchunk数の上限</span></span><br><span class=\"line\">  flush_interval 1s        <span class=\"comment\"># 10秒に1回送信</span></span><br><span class=\"line\">  flush_at_shutdown <span class=\"literal\">true</span>    <span class=\"comment\"># シャットダウン時にチャンクを処理するか?(ファイルバッファのみ有効)</span></span><br><span class=\"line\">  retry_wait 5s            <span class=\"comment\"># 再送実施までの待ち時間</span></span><br><span class=\"line\">  retry_limit 2             <span class=\"comment\"># 再送実施回数</span></span><br><span class=\"line\">  require_ack_response <span class=\"literal\">true</span></span><br><span class=\"line\">  expire_dns_cache 0</span><br><span class=\"line\">  dns_round_robin <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;server&gt;</span><br><span class=\"line\">    host mongodb.alccn.91dena.cn</span><br><span class=\"line\">    port 24224</span><br><span class=\"line\">  &lt;/server&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># ログ送信失敗時のファイル</span></span><br><span class=\"line\">  <span class=\"comment\">#  # &lt;secondary&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#      #  type file</span></span><br><span class=\"line\">  <span class=\"comment\">#         #   path /var/log/td-agent/failed/forward-failed</span></span><br><span class=\"line\">  <span class=\"comment\">#           #&lt;/secondary&gt;</span></span><br><span class=\"line\"> &lt;/match&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"/download/td-agent.conf\">点击下载</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck88nc90f00021d8nu6tmgja9","category_id":"ck88nc90v00071d8njqfp6sf1","_id":"ck88nc91a000h1d8ngeidu4kt"},{"post_id":"ck88nc90n00051d8n3fq4gh7n","category_id":"ck88nc914000d1d8ni08omwpg","_id":"ck88nc91f000p1d8nt482ovbl"},{"post_id":"ck88nc90x00091d8n3nixzklw","category_id":"ck88nc914000d1d8ni08omwpg","_id":"ck88nc91k000v1d8nf8chyu95"},{"post_id":"ck88nc90z000c1d8nndpo53ze","category_id":"ck88nc914000d1d8ni08omwpg","_id":"ck88nc91n00101d8nt49e6xqf"},{"post_id":"ck88nc91h000t1d8nr5m1n6ta","category_id":"ck88nc90v00071d8njqfp6sf1","_id":"ck88nc91o00131d8n85vq9wo2"},{"post_id":"ck88nc91c000k1d8n2yec7nue","category_id":"ck88nc91k000u1d8noqfb1brg","_id":"ck88nc91q00161d8nmweoubu1"},{"post_id":"ck88nc91e000n1d8nbo5phz8e","category_id":"ck88nc91n00111d8nl8gs8qm0","_id":"ck88nc91s001c1d8n8n75trco"},{"post_id":"ck88nc91q00181d8n501x7sbk","category_id":"ck88nc914000d1d8ni08omwpg","_id":"ck88nc91s001d1d8n5gngfu8a"},{"post_id":"ck88nc91o00121d8ncyrsxjok","category_id":"ck88nc91q00171d8nunuecmxh","_id":"ck88nc91t001f1d8nplu8rk74"}],"PostTag":[{"post_id":"ck88nc90a00001d8n040vxf7q","tag_id":"ck88nc90i00041d8nxpn6crdd","_id":"ck88nc90z000b1d8n5tok2zaq"},{"post_id":"ck88nc90f00021d8nu6tmgja9","tag_id":"ck88nc90y000a1d8nj1p7xuw5","_id":"ck88nc91a000i1d8nij9xvhkn"},{"post_id":"ck88nc919000g1d8n384fzz5f","tag_id":"ck88nc90i00041d8nxpn6crdd","_id":"ck88nc91d000m1d8nwm4fyalg"},{"post_id":"ck88nc90n00051d8n3fq4gh7n","tag_id":"ck88nc918000f1d8nz3jvroba","_id":"ck88nc91f000q1d8nl9gbl5m3"},{"post_id":"ck88nc90w00081d8nq7cgg1wz","tag_id":"ck88nc91d000l1d8nnoonuxtx","_id":"ck88nc91k000w1d8nvudwv110"},{"post_id":"ck88nc90x00091d8n3nixzklw","tag_id":"ck88nc91h000s1d8ngvnrarnf","_id":"ck88nc91r00191d8ncuym5wg2"},{"post_id":"ck88nc90x00091d8n3nixzklw","tag_id":"ck88nc91n000z1d8n4sxiweyc","_id":"ck88nc91r001a1d8nb31a2s3e"},{"post_id":"ck88nc90z000c1d8nndpo53ze","tag_id":"ck88nc91q00151d8no2ijfsqo","_id":"ck88nc91t001g1d8nge3s91fy"},{"post_id":"ck88nc90z000c1d8nndpo53ze","tag_id":"ck88nc91s001b1d8nsw88gyr2","_id":"ck88nc91t001h1d8nu46ri0el"},{"post_id":"ck88nc91c000k1d8n2yec7nue","tag_id":"ck88nc91q00151d8no2ijfsqo","_id":"ck88nc91u001j1d8n29ztvdsy"},{"post_id":"ck88nc91e000n1d8nbo5phz8e","tag_id":"ck88nc91q00151d8no2ijfsqo","_id":"ck88nc91v001l1d8n4vkawr5x"},{"post_id":"ck88nc91h000t1d8nr5m1n6ta","tag_id":"ck88nc91u001k1d8n4zwsqoey","_id":"ck88nc91v001n1d8n101z8wk3"},{"post_id":"ck88nc91l000x1d8nkcut94da","tag_id":"ck88nc91v001m1d8nmg1nm2iv","_id":"ck88nc91w001p1d8naaomwe8n"},{"post_id":"ck88nc91m000y1d8n0y7l0uye","tag_id":"ck88nc91v001m1d8nmg1nm2iv","_id":"ck88nc91x001r1d8n72s6bpai"},{"post_id":"ck88nc91p00141d8nmptoyqiz","tag_id":"ck88nc91v001m1d8nmg1nm2iv","_id":"ck88nc921001t1d8nz881ocq0"},{"post_id":"ck88nc91q00181d8n501x7sbk","tag_id":"ck88nc920001s1d8nb5ulddt9","_id":"ck88nc921001v1d8n435zwmab"},{"post_id":"ck88nc91q00181d8n501x7sbk","tag_id":"ck88nc921001u1d8noknssofo","_id":"ck88nc921001w1d8nb1h3waxn"}],"Tag":[{"name":"Erlang","_id":"ck88nc90i00041d8nxpn6crdd"},{"name":"mysql","_id":"ck88nc90y000a1d8nj1p7xuw5"},{"name":"Sentry","_id":"ck88nc918000f1d8nz3jvroba"},{"name":"c++ 设计模式","_id":"ck88nc91d000l1d8nnoonuxtx"},{"name":"Ruby on Rails","_id":"ck88nc91h000s1d8ngvnrarnf"},{"name":"Capistrano 自动部署工具","_id":"ck88nc91n000z1d8n4sxiweyc"},{"name":"node.js","_id":"ck88nc91q00151d8no2ijfsqo"},{"name":"hexo","_id":"ck88nc91s001b1d8nsw88gyr2"},{"name":"redis","_id":"ck88nc91u001k1d8n4zwsqoey"},{"name":"游戏","_id":"ck88nc91v001m1d8nmg1nm2iv"},{"name":"nginx","_id":"ck88nc920001s1d8nb5ulddt9"},{"name":"td-agent","_id":"ck88nc921001u1d8noknssofo"}]}}