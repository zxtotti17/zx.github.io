{"title":"node笔记","slug":"node笔记","date":"2018-08-21T09:04:37.000Z","updated":"2020-04-07T03:13:02.450Z","comments":true,"path":"api/articles/node笔记.json","photos":[],"link":"","excerpt":"第一章 node简介<br>1.1 node的特点<br>    1.1.1 异步I/O 绝大多数操作以异步方式进行调用<br>    1.1.2 事件与回调函数<br>    1.1.3 单线程，但是可以用WebWorkers的方式解决单线程的问题（子进程），用Master-Worker用master统一管理子进程<br>    1.1.4 跨平台<br>    1.1.5 c++速度大约是node的2.5倍1.2 模块机制<br>    1.2.1 分为核心模块和文件模块，require没带路径的为核心模块，直接加载进内存，带路径的为文件模块,核心模块中有c++和javascript两部分，其中buffer、crypto、evals、fs、os、等都是c++部分的<br>    1.2.2 npm安装的核心模块插件在package.json中定义1.3 异步I/O<br>    1.3.1 操作系统内核对I/O只有：阻塞I/O和非阻塞I/O，node中的异步I/O模型由事件循环、观察者、请求对象、I/O线程池<br>    整个系统可以理解为事件循环相当于厨子，不停的询问是否有新的订单，观察者相当于收银员，收到用户的订单将订单分给厨子，而订单相当于请求对象，参数、方法、回调函数斗封装在请求对象中,<br>    以上是异步I/O的第一步，io线程池相当于放订单的桌子，  请求对象-&gt;I/O线程池-&gt;观察者-&gt;事件循环<br>    1.3.2 非异步的I/O主要是setTimeout(),setInterval(),setImmediate(),process.nextTick()","covers":null,"content":"<p>第一章 node简介<br>1.1 node的特点<br>    1.1.1 异步I/O 绝大多数操作以异步方式进行调用<br>    1.1.2 事件与回调函数<br>    1.1.3 单线程，但是可以用WebWorkers的方式解决单线程的问题（子进程），用Master-Worker用master统一管理子进程<br>    1.1.4 跨平台<br>    1.1.5 c++速度大约是node的2.5倍</p>\n<p>1.2 模块机制<br>    1.2.1 分为核心模块和文件模块，require没带路径的为核心模块，直接加载进内存，带路径的为文件模块,核心模块中有c++和javascript两部分，其中buffer、crypto、evals、fs、os、等都是c++部分的<br>    1.2.2 npm安装的核心模块插件在package.json中定义</p>\n<p>1.3 异步I/O<br>    1.3.1 操作系统内核对I/O只有：阻塞I/O和非阻塞I/O，node中的异步I/O模型由事件循环、观察者、请求对象、I/O线程池<br>    整个系统可以理解为事件循环相当于厨子，不停的询问是否有新的订单，观察者相当于收银员，收到用户的订单将订单分给厨子，而订单相当于请求对象，参数、方法、回调函数斗封装在请求对象中,<br>    以上是异步I/O的第一步，io线程池相当于放订单的桌子，  请求对象-&gt;I/O线程池-&gt;观察者-&gt;事件循环<br>    1.3.2 非异步的I/O主要是setTimeout(),setInterval(),setImmediate(),process.nextTick()</p>\n<a id=\"more\"></a>\n<p>1.4 异步编程<br>    1.4.1 异步编程的解决方案分为3个：<br>        1）事件发布/订阅模式<br>        2）Promise/Deferred模式<br>        3）流程控制库<br>    1.4.2 事件发布/订阅模式<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//订阅</span><br><span class=\"line\">emitter.on(<span class=\"string\">\"event1\"</span>,<span class=\"keyword\">function</span>(message)&#123;</span><br><span class=\"line\">\tconsole.log(message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//发布</span><br><span class=\"line\">emitter.emit(<span class=\"string\">'event1'</span>,<span class=\"string\">\"I Love you\"</span>);</span><br></pre></td></tr></table></figure></p>\n<pre><code>1）继承events模块\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var events = require(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">Stream</span></span>()&#123;</span><br><span class=\"line\">\tevents.EventEmitter.call(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(Stream,events.EventEmitter);</span><br></pre></td></tr></table></figure>\n\n2)利用事件队列解决崩溃问题\n事件发布/订阅模式中一般只有一个once()方法，用一个『状态锁』或者『事件队列』防止崩溃\n状态锁\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var status = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">var select = <span class=\"keyword\">function</span>(callback)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(status == <span class=\"string\">\"ready\"</span> )&#123;</span><br><span class=\"line\">\t\tstatus = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">\t\tdb.select(<span class=\"string\">\"SQL\"</span>, <span class=\"keyword\">function</span>(results)&#123;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">\t\t\tcallback(results);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n事件队列\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = new events.EventEmitter();</span><br><span class=\"line\">var status = <span class=\"keyword\">function</span> (callback) </span><br><span class=\"line\">\tproxy.once(<span class=\"string\">\"selected\"</span>, callback);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(status === <span class=\"string\">\"ready\"</span>)&#123;</span><br><span class=\"line\">\t\tstatus = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">\t\tdb.select(<span class=\"string\">\"SQL\"</span>, <span class=\"keyword\">function</span>(result)&#123;</span><br><span class=\"line\">\t\t\tproxy.emit(<span class=\"string\">\"selected\"</span>,result);</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"ready\"</span>;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n3）多异步之间的协作方案\n借组一个第三方函数和第三方变量来处理异步协作的结果\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var after = <span class=\"keyword\">function</span> (<span class=\"built_in\">times</span>,callback)&#123;</span><br><span class=\"line\">\tvar count = 0, results = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"keyword\">function</span> (key, value)&#123;</span><br><span class=\"line\">\t\tresult[key] = value;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count === <span class=\"built_in\">times</span>)&#123;</span><br><span class=\"line\">\t\t\tcallback(results);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var <span class=\"keyword\">done</span> = after(<span class=\"built_in\">times</span>, render);</span><br></pre></td></tr></table></figure>\n\n1.4.3 Promise/Deferred模式\nPromise是高级接口，事件是低级接口，Promise更像链表\n1.4.4 async流程控制模块\n1）async的series()方法实现串行（不传参）\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async.series([</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],<span class=\"keyword\">function</span> (err,result)&#123;</span><br><span class=\"line\">\t//result = [file1.txt,file2.txt]等价于先处理file1.txt，在处理file2.txt，错误回调</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n2）async的parallel()方法实现并行\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async.parallel([</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,calback);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],<span class=\"keyword\">function</span> (err,result)&#123;</span><br><span class=\"line\">\t//result = [file1.txt,file2.txt]等价于并行处理file1.txt，在处理file2.txt，错误回调</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n3）async的waterfall()方法实现串行（传参）\n略\n4）async.auto()可以根据依赖关系自动分析，以最佳顺序执行\n略\n1.4.5 流程控制模块Step\n1)Step接受任意数量任务，所有任务传行执行\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step(</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,this);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,this);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"keyword\">done</span>(err, content) &#123;</span><br><span class=\"line\">\t\t console.log(content);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n2)Step实现异步任务并行执行要用this的parallel()\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step(</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file1.txt'</span>,<span class=\"string\">'utf-8'</span>,this.parallel());</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> (callback)&#123;</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">'file2.txt'</span>,<span class=\"string\">'utf-8'</span>,this.parallel());</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"keyword\">done</span>(err, content) &#123;</span><br><span class=\"line\">\t\t console.log(arguments);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n1.4.6流程控制模块wind\n1)wind的$await()方法实现异步等待\n2）wind的whenAll()处理并发\n</code></pre><p>1.5 异步并发控制<br>    1.5.1 bagpipe解决办法（API添加过载保护，用队列控制并发）<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Bagpipe = require(<span class=\"string\">'bagpipe'</span>);</span><br><span class=\"line\">//设定最大并发数为10</span><br><span class=\"line\">var bagpipe = new Bagpipe(10);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i&lt; 100;i++)&#123;</span><br><span class=\"line\">\tbagpipe.push(async, <span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bagpipe.on(<span class=\"string\">'full'</span>,<span class=\"keyword\">function</span> (length)&#123;</span><br><span class=\"line\">\tconsole.warn(<span class=\"string\">'底层系统处理不及时'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.5.2 拒绝模式\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bagpipe = new Bagpipe(10,&#123;</span><br><span class=\"line\">\trefuse: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.5.3 超时控制\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bagpipe = new Bagpipe(10, &#123;</span><br><span class=\"line\">\ttimeout: 3000</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.6 内存管理<br>    1.6.1 v8内存分为新生代和老生代的<br>    node –max-old-space-size 2048 xxx.js 调整内存大小执行某个脚本<br>    v8堆内存64位系统是1.4G,32位系统是0.7G<br>    新生代内存的回收机制是将堆内存一分为2，使用中的是From，空的是to，进行垃圾回收时，是将from中的存活对象复制到to中，然后释放非存活的，同时from和to对换，缺点是只能使用一半的内存空间<br>    老生带内存的回收机制是将from中的使用的标记，回收未使用的<br>    1.6.2 外部访问内部的变量的方法叫闭包   还有的说是内部变量无法被外部访问的过程叫闭包<br>    1.6.3 查看内存使用process.memoryUsage() os.totalmem os.freemem </p>\n<p>1.7 Buffer<br>    1.7.1 Buffer与字符串转换<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Buffer(str, [encoding]);</span><br><span class=\"line\">buf.write(string, [offset], [length], [encodeing]);</span><br><span class=\"line\">buf.tostring([encoding], [start], [end]);</span><br></pre></td></tr></table></figure></p>\n<p>1.8 网络<br>    1.8.1 tcp协议中的osi模型（分为 物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）<br>    server<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var net = require(<span class=\"string\">'net'</span>);</span><br><span class=\"line\">var server = net.createServer(<span class=\"keyword\">function</span>(socket)&#123;</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'end'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tserver.write(<span class=\"string\">'data'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<pre><code>client\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var net = require(<span class=\"string\">'net'</span>);</span><br><span class=\"line\">var client = net.connect(&#123;port: 8124&#125;,<span class=\"keyword\">function</span>(socket)&#123;</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'end'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tclient.write(<span class=\"string\">'data'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.8.2 UDP是用户数据包协议，一个套接字可以与多个UDP通信\nserver\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dgrm = require(<span class=\"string\">\"dgrm\"</span>);</span><br><span class=\"line\">var server = dgrm.createSocket(<span class=\"string\">\"udp4\"</span>);</span><br><span class=\"line\">server.on(<span class=\"string\">\"message\"</span>, <span class=\"keyword\">function</span> (msg, rinfo)&#123;</span><br><span class=\"line\">\tconsole.log(<span class=\"string\">\"xxx\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">\tvar address = server.address();</span><br><span class=\"line\">\tconsole.log(<span class=\"string\">\"xxx\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.bind(41234);</span><br></pre></td></tr></table></figure>\n\nclient\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dgram = require(<span class=\"string\">'dgram'</span>);</span><br><span class=\"line\">var messgae = new Buffer(<span class=\"string\">\"xxxx\"</span>);</span><br><span class=\"line\">var client = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</span><br><span class=\"line\">clinet.send(message, 0, message.length, 41234, <span class=\"string\">\"localhost\"</span>, <span class=\"keyword\">function</span>(err,bytes)&#123;</span><br><span class=\"line\">\tclient.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n1.8.3 HTTP是构建在TCP之上属于应用层协议\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https_request : <span class=\"keyword\">function</span>(host, path, post_data, cb)&#123;</span><br><span class=\"line\">    var reqdata = JSON.stringify(post_data);</span><br><span class=\"line\">\tvar options = &#123;</span><br><span class=\"line\">\t    hostname: host,</span><br><span class=\"line\">\t    port: 443,</span><br><span class=\"line\">\t    method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">\t    path: path,</span><br><span class=\"line\">\t    headers: &#123;</span><br><span class=\"line\">\t        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar req_time_out = setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    \t\treq.abort();</span><br><span class=\"line\">    \t\tcb(400, &#123;code:400,message:<span class=\"string\">'请求超时'</span>&#125;);</span><br><span class=\"line\">    \t\tlogger.n.info(<span class=\"string\">'Got Request Timeout.'</span>);</span><br><span class=\"line\">\t&#125;, 10000);</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar req = https.request(options, <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">\t\tclearTimeout(req_time_out);</span><br><span class=\"line\">\t\t//等待响应60秒超时</span><br><span class=\"line\">\t\tvar res_time_out = setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">\t\t\tres.destroy();</span><br><span class=\"line\">\t\t\tcb(400, &#123;code:400,message:<span class=\"string\">'响应超时'</span>&#125;);</span><br><span class=\"line\">\t\t\tlogger.n.info(<span class=\"string\">'Got Response Timeout.'</span>);</span><br><span class=\"line\">\t\t&#125;, 60000);</span><br><span class=\"line\">\t\tvar status_code = res.statusCode;</span><br><span class=\"line\">\t\tvar body = null;</span><br><span class=\"line\">\t\tlogger.n.info(<span class=\"string\">\"Got status_code: \"</span> + status_code);</span><br><span class=\"line\">\t\tres.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">            body = JSON.parse(data);</span><br><span class=\"line\">        &#125;).on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        \tclearTimeout(res_time_out);</span><br><span class=\"line\">        \tcb(status_code, body);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">\t&#125;).on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span>(e) &#123;</span><br><span class=\"line\">\t\tcb(400, &#123;code:400,message:e.message&#125;);</span><br><span class=\"line\">\t\tlogger.n.info(<span class=\"string\">\"Got error: \"</span> + e.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\treq.write(reqdata);</span><br><span class=\"line\">\treq.end();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n1.8.4 WebSocket\nclient\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var client= new net.Socket();</span><br><span class=\"line\">var flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">var port = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">'connect'</span>,<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">    //正常连接</span><br><span class=\"line\">    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    logger.boot.info(<span class=\"string\">'socket Connection succeed'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    //flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.warn(<span class=\"string\">'!!!!!tcp_client disconnected'</span>);</span><br><span class=\"line\">    setTimeout(Fight_Service.tcp_reconnect, 1000);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'data'</span>,<span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">    //得到服务端返回来的数据</span><br><span class=\"line\">    Fight_Service.processResp(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>,<span class=\"keyword\">function</span>(error)&#123;</span><br><span class=\"line\">    //错误出现之后关闭连接</span><br><span class=\"line\">    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.error(<span class=\"string\">'socket error:'</span> + error);</span><br><span class=\"line\">    client.destroy();</span><br><span class=\"line\">    setTimeout(Fight_Service.tcp_reconnect, 1000);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">client.on(<span class=\"string\">'close'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    //正常关闭连接</span><br><span class=\"line\">    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    logger.n.warn(<span class=\"string\">'socket Connection closed'</span>);</span><br><span class=\"line\">    client.destroy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Fight_Service.tcp_reconnect = <span class=\"keyword\">function</span>(worker_id)&#123;</span><br><span class=\"line\">   //创建socket客户端</span><br><span class=\"line\">   client.setEncoding(<span class=\"string\">'binary'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (port == 0 )&#123;</span><br><span class=\"line\">       //连接到服务端115.159.186.60 8400</span><br><span class=\"line\">       // logger.boot.info(<span class=\"string\">\"socket process_work_id:\"</span> + worker_id);</span><br><span class=\"line\">       worker_id = worker_id % 8;</span><br><span class=\"line\">       port = 8400 + worker_id;</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       logger.boot.info(<span class=\"string\">\"socket tcp_reconnect\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   logger.boot.info(<span class=\"string\">\"socket_port_id:\"</span> + port);</span><br><span class=\"line\"></span><br><span class=\"line\">   client.connect(port,<span class=\"string\">\"10.96.71.91\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.9 多进程<br>    1.9.1 child_process模块<br>    1）spawn()启动一个子进程执行命令，无回调，无超时<br>    2）exec()启动一个子进程执行命令，有回调，有超时<br>    3）execFile()启动一个子进程执行可执行文件<br>    4）fork()启动node子进程执行js文件模块<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fork = require(<span class=\"string\">'child_process'</span>).fork;</span><br><span class=\"line\">var cpus = require(<span class=\"string\">'os'</span>).cpus();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i &lt; cpus.length; i++)&#123;</span><br><span class=\"line\">\tfork(<span class=\"string\">'./worker.js'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.9.2 进程间通信IPC，主线程与工作线程之间通过onmessage()和postMessage()进行通信，子进程对象则由send()方法实现主进程向子进程发送数据\n1.9.3 句柄是一种用来标识资源的引用，用来拓展有限的文件描述符\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child.send(message,[sandHandle])如（child.send(<span class=\"string\">'server'</span>,server)）;</span><br><span class=\"line\">子进程代码</span><br><span class=\"line\">process.on(<span class=\"string\">'message'</span>,<span class=\"keyword\">function</span>(m, server)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(m == <span class=\"string\">'server'</span>)&#123;</span><br><span class=\"line\">\txxxxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n1.9.4 父进程可以通过kill()方法给子进程发送一个SIGTERM信号杀进程\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chid.kill([signal]);</span><br><span class=\"line\">process.kill(pid, [signal]);</span><br><span class=\"line\">``` </span><br><span class=\"line\">在退出中加入自动重启可能会有新用户进来请求丢失的情况，工作进程在得知退出时，向主进程发送一个自杀信号（达到先创建在退出进程）</span><br><span class=\"line\">``` bash</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * cluster mode</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">if</span> (   opts.get(<span class=\"string\">'cluster'</span>)</span><br><span class=\"line\">    || config.APP_CLUSTER.ENABLE) &#123;</span><br><span class=\"line\">    var cluster = require(<span class=\"string\">'cluster'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cluster.isMaster) &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'[CLUSTER MODE] MASTER'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var i=0; i&lt;config.APP_CLUSTER.NUM; i++) &#123;</span><br><span class=\"line\">            cluster.fork();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cluster.on(<span class=\"string\">'exit'</span>, <span class=\"keyword\">function</span>(worker, code, signal) &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'worker '</span> + worker.process.pid + <span class=\"string\">' died'</span>);</span><br><span class=\"line\">            cluster.fork();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(<span class=\"string\">'[CLUSTER MODE] WORKER'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>1.10 插件<br>    1.10.1 Sequelizejs  此插件在option索引的位置千万不能写错，写错有大几率导致db堵塞<br>    <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\"> \t\tattributes: [<span class=\"string\">'foo'</span>, [<span class=\"string\">'bar'</span>, <span class=\"string\">'baz'</span>]]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT foo, bar AS baz ...</span><br><span class=\"line\"></span><br><span class=\"line\">Model.findAll(&#123;</span><br><span class=\"line\">  attributes: [[sequelize.fn(<span class=\"string\">'COUNT'</span>, sequelize.col(<span class=\"string\">'hats'</span>)), <span class=\"string\">'no_hats'</span>]]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT COUNT(hats) AS no_hats ...</span><br><span class=\"line\"></span><br><span class=\"line\">Post.findAll(&#123;</span><br><span class=\"line\">  <span class=\"built_in\">where</span>: &#123;</span><br><span class=\"line\">    [Op.or]: [&#123;authorId: 12&#125;, &#123;authorId: 13&#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SELECT * FROM post WHERE authorId = 12 OR authorId = 13;</span><br><span class=\"line\"></span><br><span class=\"line\">Order.findAll(&#123;attributes:[<span class=\"string\">'name'</span>, [sequelize.fn(<span class=\"string\">'SUM'</span>, sequelize.col(<span class=\"string\">'price'</span>)), <span class=\"string\">'sum'</span>]], group:<span class=\"string\">'name'</span>, having:[<span class=\"string\">'COUNT(?)&gt;?'</span>, <span class=\"string\">'name'</span>, 1], raw:<span class=\"literal\">true</span>&#125;).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(result)&#123;</span><br><span class=\"line\"> console.log(result);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">SELECT `name`, sum(`price`) AS `sum` FROM `orders` AS `Orders` GROUP BY name HAVING COUNT(<span class=\"string\">'name'</span>)&gt;1;</span><br></pre></td></tr></table></figure></p>\n<pre><code>1.10.2 Lodashjs\n[文档](https://www.lodashjs.com/docs/4.17.5.html)\n\n_.indexOf(array, value, [fromIndex=0])\nnumber): Returns the index of the matched value, else -1.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf([1, 2, 1, 2], 2);</span><br><span class=\"line\">// =&gt; 1</span><br><span class=\"line\"> </span><br><span class=\"line\">// Search from the `fromIndex`.</span><br><span class=\"line\">_.indexOf([1, 2, 1, 2], 2, 2);</span><br><span class=\"line\">// =&gt; 3</span><br></pre></td></tr></table></figure>\n\n_.dropRight(array, [n=1])\n(Array): Returns the slice of array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.dropRight([1, 2, 3]);</span><br><span class=\"line\">// =&gt; [1, 2]</span><br><span class=\"line\"> </span><br><span class=\"line\">_.dropRight([1, 2, 3], 2);</span><br><span class=\"line\">// =&gt; [1]</span><br><span class=\"line\"></span><br><span class=\"line\">_.dropRight([1, 2, 3], 0);</span><br><span class=\"line\">// =&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n\n_.filter(collection, [predicate=_.identity])\n(Array): Returns the new filtered array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>, <span class=\"string\">'age'</span>: 36, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,   <span class=\"string\">'age'</span>: 40, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"> </span><br><span class=\"line\">_.filter(users, <span class=\"keyword\">function</span>(o) &#123; <span class=\"built_in\">return</span> !o.active; &#125;);</span><br><span class=\"line\">// =&gt; objects <span class=\"keyword\">for</span> [<span class=\"string\">'fred'</span>]</span><br></pre></td></tr></table></figure>\n\n_.find(collection, [predicate=_.identity], [fromIndex=0])\n(*): Returns the matched element, else undefined.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tvar users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: 36, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: 40, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: 1,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"> </span><br><span class=\"line\">_.find(users, <span class=\"keyword\">function</span>(o) &#123; <span class=\"built_in\">return</span> o.age &lt; 40; &#125;);</span><br><span class=\"line\">// =&gt; object <span class=\"keyword\">for</span> <span class=\"string\">'barney'</span></span><br></pre></td></tr></table></figure>\n\n_.forEach(collection, [iteratee=_.identity])\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.forEach([1, 2], <span class=\"keyword\">function</span>(value) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// =&gt; Logs `1` <span class=\"keyword\">then</span> `2`.</span><br><span class=\"line\"> </span><br><span class=\"line\">_.forEach(&#123; <span class=\"string\">'a'</span>: 1, <span class=\"string\">'b'</span>: 2 &#125;, <span class=\"keyword\">function</span>(value, key) &#123;</span><br><span class=\"line\">  console.log(key);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n_.groupBy(collection, [iteratee=_.identity])\n(Object): Returns the composed aggregate object.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([6.1, 4.2, 6.3], Math.floor);</span><br><span class=\"line\">// =&gt; &#123; <span class=\"string\">'4'</span>: [4.2], <span class=\"string\">'6'</span>: [6.1, 6.3] &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// The `_.property` iteratee shorthand.</span><br><span class=\"line\">_.groupBy([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], <span class=\"string\">'length'</span>);</span><br><span class=\"line\">// =&gt; &#123; <span class=\"string\">'3'</span>: [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>], <span class=\"string\">'5'</span>: [<span class=\"string\">'three'</span>] &#125;</span><br></pre></td></tr></table></figure>\n\n#Promise.map Promise.all 相当于事务 \n_.map(collection, [iteratee=_.identity])\n(Array): Returns the new mapped array.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> square(n) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> n * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_.map([4, 8], square);</span><br><span class=\"line\">// =&gt; [16, 64]</span><br><span class=\"line\"> </span><br><span class=\"line\">_.map(&#123; <span class=\"string\">'a'</span>: 4, <span class=\"string\">'b'</span>: 8 &#125;, square);</span><br><span class=\"line\">// =&gt; [16, 64] (iteration order is not guaranteed)</span><br></pre></td></tr></table></figure>\n\n#Promise.reduce是顺序执行\n_.reduce(collection, [iteratee=_.identity], [accumulator])  -\n(*): Returns the accumulated value.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f_.reduce([1, 2], <span class=\"keyword\">function</span>(sum, n) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> sum + n;</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\">// =&gt; 3</span><br></pre></td></tr></table></figure>\n\n_.isEmpty(value)\n(boolean): Returns true if value is empty, else false.\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isEmpty(null);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(<span class=\"literal\">true</span>);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(1);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty([1, 2, 3]);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">_.isEmpty(&#123; <span class=\"string\">'a'</span>: 1 &#125;);</span><br><span class=\"line\">// =&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n项目案例 略\n\n1.10.3 Moment.js\n[文档](http://momentjs.cn)\n案例使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment(event.start_time).startOf(<span class=\"string\">'day'</span>)/1000;</span><br><span class=\"line\">moment.unix(moment().startOf(<span class=\"string\">'month'</span>)/1000).utcOffset(config.TIME_ZONE_DIFF).format(<span class=\"string\">\"YYYY-MM-DD HH:mm:ss\"</span>);</span><br></pre></td></tr></table></figure>\n</code></pre><p>js中数组及数据类型对象都是按址传递</p>\n","categories":[{"name":"开发语言","slug":"开发语言","count":1,"path":"api/categories/开发语言.json"}],"tags":[{"name":"node.js","slug":"node-js","count":3,"path":"api/tags/node-js.json"}]}