{"title":"pomelo学习笔记","slug":"pomelo学习笔记","date":"2018-10-23T11:34:45.000Z","updated":"2019-11-27T15:26:48.000Z","comments":true,"path":"api/articles/pomelo学习笔记.json","photos":[],"link":"","excerpt":"环境<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>getBase()\t Application.getBase(); 获取应用程序的基本路径<br>set(setting, val, attach);\t Application.set();  setting:应用程序的配置；val:需要设置的值；attach:是否将设配置应用到程序。设置或返回配置的值。<br>get(setting)\t Application.get(); setting:应用程序的配置。获取配置的值<br>enabled(setting)\t Application.enabled(); setting:应用程序的配置。检查配置是否启用<br>disabled(setting)\t Application.disabled(); setting:应用程序的配置。检查配置是否禁用<br>enbale(setting)\t Application.enbale(); setting:应用程序的配置。启用配置<br>disable(setting)\t Application.disabled(); setting:应用程序的配置。禁用配置<br>configure(env,fn,type)\tApplication.configure();env:应用环境;fn:回调函数;type:服务类型.<br>初始化1<br>2<br>3<br>4<br>5<br>6<br>7<br>start()\t Application.start(); 启动应用程序。它会加载默认的组件和启动所有加载的组件。<br>registerAdmin(moduleId,module,opts)\t Application.registerAdmin();  moduleId:(可选参数)模块id或者有modeule提供的模块Id;module:模块对象或者模块的工程函数;opts:模块构造函数的参数。<br>filter(filter)\t Application.filter(); filter:provide before and after filter method。add a filter to before and after filter<br>before(bf)\t Application.before(); bf:before filter。Add before filter<br>after(af)\t Application.after(); af:after filter。Add after filter<br>load(name, component, opts)\t Application.load(); name:组件的名称（可选）；component：组件的实例或者组件的工厂函数；opts：组件构造函数的参数（可选）。加载组件<br>loadConfig(key,val)\t Application.loadConfig(); key:环境配置的关键字;val:环境配置的值。导入json文件来配置环境。<br>","covers":null,"content":"<p>环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getBase()\t Application.getBase(); 获取应用程序的基本路径</span><br><span class=\"line\"><span class=\"built_in\">set</span>(setting, val, attach);\t Application.set();  setting:应用程序的配置；val:需要设置的值；attach:是否将设配置应用到程序。设置或返回配置的值。</span><br><span class=\"line\">get(setting)\t Application.get(); setting:应用程序的配置。获取配置的值</span><br><span class=\"line\">enabled(setting)\t Application.enabled(); setting:应用程序的配置。检查配置是否启用</span><br><span class=\"line\">disabled(setting)\t Application.disabled(); setting:应用程序的配置。检查配置是否禁用</span><br><span class=\"line\">enbale(setting)\t Application.enbale(); setting:应用程序的配置。启用配置</span><br><span class=\"line\"><span class=\"built_in\">disable</span>(setting)\t Application.disabled(); setting:应用程序的配置。禁用配置</span><br><span class=\"line\">configure(env,fn,<span class=\"built_in\">type</span>)\tApplication.configure();env:应用环境;fn:回调函数;<span class=\"built_in\">type</span>:服务类型.</span><br></pre></td></tr></table></figure></p>\n<p>初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start()\t Application.start(); 启动应用程序。它会加载默认的组件和启动所有加载的组件。</span><br><span class=\"line\">registerAdmin(moduleId,module,opts)\t Application.registerAdmin();  moduleId:(可选参数)模块id或者有modeule提供的模块Id;module:模块对象或者模块的工程函数;opts:模块构造函数的参数。</span><br><span class=\"line\">filter(filter)\t Application.filter(); filter:provide before and after filter method。add a filter to before and after filter</span><br><span class=\"line\">before(bf)\t Application.before(); bf:before filter。Add before filter</span><br><span class=\"line\">after(af)\t Application.after(); af:after filter。Add after filter</span><br><span class=\"line\">load(name, component, opts)\t Application.load(); name:组件的名称（可选）；component：组件的实例或者组件的工厂函数；opts：组件构造函数的参数（可选）。加载组件</span><br><span class=\"line\">loadConfig(key,val)\t Application.loadConfig(); key:环境配置的关键字;val:环境配置的值。导入json文件来配置环境。</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>组件相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route(serverType, routeFunc)\t</span><br><span class=\"line\"> Application.route(); serverType:服务类型;routeFunc:路由功能函数,如：routeFunc(session, msg, app, cb)</span><br><span class=\"line\"></span><br><span class=\"line\">未指定的服务类型设置路由功能。如：</span><br><span class=\"line\"></span><br><span class=\"line\">app.route(<span class=\"string\">'area'</span>, routeFunc);</span><br><span class=\"line\"></span><br><span class=\"line\">var routeFunc = <span class=\"keyword\">function</span>(session, msg, app, cb) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　// all request to area would be route to the first area server</span><br><span class=\"line\"></span><br><span class=\"line\">　　var areas = app.getServersByType(<span class=\"string\">'area'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　　cb(null, areas[0].id);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取相关配置，组件方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMaster()\tApplication.getMaster() 获得Maseter服务的信息</span><br><span class=\"line\">getCurServer()\tApplication.getCurServer() 获得当前服务的信息</span><br><span class=\"line\">getServerId()\tApplication.getServerId() 获得当前服务的ID</span><br><span class=\"line\">getServerType()\tApplication.getServerType() 获得当前服务的类型</span><br><span class=\"line\">getServers()\tApplication.getServers() 获得所有当前服务的信息</span><br><span class=\"line\">getServersFromConfig()\tApplication.getServersFromConfig() 从server.json中获得所有服务的信息</span><br><span class=\"line\">getServerTypes()\tApplication.getServerTypes() 获得所有服务的类型</span><br><span class=\"line\">getServerById(serverId)\tApplication.getServerById() 根据服务ID从服务集群中获得服务的信息</span><br><span class=\"line\">getServerFromConfig(serverId)\tApplication.getServerFromConfig() 根据服务ID从server.json中获得服务的信息</span><br><span class=\"line\">getServersByType(serverType)\tApplication.getServersByType() 根据服务类型获取服务信息</span><br><span class=\"line\">isFrontend(server)\tApplication.isFrontend() 检查服务是否是一个前端服务</span><br><span class=\"line\">isBackend(server)\tApplication.isBackend() 检查服务是否是一个后端服务</span><br><span class=\"line\">isMaster()\tApplication.isMaster() 检查当前服务是否是主服务</span><br><span class=\"line\">addServers(servers)\tApplication.addServers() servers：新服务信息列表。添加新服务信息到正在运行的应用程序中</span><br><span class=\"line\">removerServers(ids)\tApplication.removerServers() ids：服务id列表。从当前运行的应用程序中删除服务信息。</span><br></pre></td></tr></table></figure>\n<p>创建和维护本地服务的信道。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createChannel(name)\tChannelService.prototype.createChannel() 根据信道名称创建信道，如果该信道已存在则返回已存在的信道</span><br><span class=\"line\">getChannel(name,create)\tChannelService.prototype.getChannel() name:信道名称，create:如果为<span class=\"literal\">true</span>，并且信道不存在时，则创建新的信道。根据信道名称获取信道</span><br><span class=\"line\">destroyChannel(name)\tChannelService.prototype.destroyChannel() 根据信道名称，删除信道</span><br><span class=\"line\">pushMessageByUids(route, msg, uids, cb)\tChannelService.prototype.pushMessageByUids() route：消息路由；msg：发送到客户端的消息；uids：接收消息的客户端列表，格式 [&#123;uid: userId, sid: frontendServerId&#125;]；cb：回调函数 cb(err)。根据uids将消息推送给客户端，如果uids中的sid未指定，则忽略相应的客户端</span><br><span class=\"line\">broadcast(stype,route, msg, opts, cb)\tChannelService.prototype.broadcast() stype：前端服务的类型;route：路由;msg：消息;opts：广播参数;cb：回调函数。广播消息到所有连接的客户端。</span><br></pre></td></tr></table></figure>\n<p>Channel</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(uid,sid)\tChannel.prototype.add() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。</span><br><span class=\"line\">leave(uid,sid)\tChannel.prototype.leave() uid:用户编号；sid：用户连接到的前端服务id。从信道中移除用户。</span><br><span class=\"line\">getMembers()\tChannel.prototype.getMembers() 获得信道中的成员</span><br><span class=\"line\">getMember(uid)\tChannel.prototype.getMember() 根据uid获取成员信息</span><br><span class=\"line\">destroy()\tChannel.prototype.destroy() 销毁信道</span><br><span class=\"line\">pushMessage(route,msg,cb)\tChannel.prototype.pushMessage()  route：消息路由，msg：要推送的消息，cb：回调函数。将消息推送给信道的所有成员。</span><br></pre></td></tr></table></figure>\n<p>GlobalChannelService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">destroyChannel(name,cb)\tGlobalChannelService.prototype.destroyChannel() uid:用户编号；sid：用户连接到的前端服务id。添加指定用户到信道。</span><br><span class=\"line\">add(name,uid,sid,cb)\t</span><br><span class=\"line\">GlobalChannelService.prototype.add() name:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。</span><br><span class=\"line\"></span><br><span class=\"line\">添加成员到信道。</span><br><span class=\"line\"></span><br><span class=\"line\">leave(name,uid,sid,cb)\tGlobalChannelService.prototype.leave() </span><br><span class=\"line\">name:信道名称；uid：用户id；sid：前端服务id；cb：回调函数。</span><br><span class=\"line\"></span><br><span class=\"line\">从信道中移除成员。</span><br><span class=\"line\"></span><br><span class=\"line\">pushMessage()\t</span><br><span class=\"line\">GlobalChannelService.prototype.pushMessage(serverType, route, msg,channelName, opts, cb)</span><br><span class=\"line\"></span><br><span class=\"line\">serverType：前端服务的类型, route：路由, msg：需要推送的消息,channelName：信道名称, opts：参数, cb：回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">通过全局信道发送消息</span><br></pre></td></tr></table></figure>\n<p>LocalSessionService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get(frontendId,sid,cb)\tLocalSeesionService.prototype.get() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据前端服务和会话id获得本地会话</span><br><span class=\"line\">getByUid(name,uid,sid,cb)\t</span><br><span class=\"line\">LocalSeesionService.prototype.getByUid()  frontendId:会话链接的前端服务id,uid：绑定到会话的用户id，cb：回调函数。args: cb(err, localSessions)。根据前端服务和用户id获取本地会话。</span><br><span class=\"line\"></span><br><span class=\"line\">kickBySid(name,uid,sid,cb)\tLocalSeesionService.prototype.kickBySid() frontendId:会话链接的前端服务id,sid:会话Id,cb:回调函数。根据会话id踢掉该会话。</span><br><span class=\"line\">kickByUid()\t</span><br><span class=\"line\">LocalSeesionService.prototype.kickByUid() frontendId:会话链接的前端服务id,uid：用户id,cb:回调函数。根据用户id踢掉该会话。</span><br></pre></td></tr></table></figure>\n<p>LocalSession</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span>(uid,cb)\tLocalSeesion.prototype.bind() uid:用户编号;cb:回调函数。callfunction(err)。绑定当前会话，用于前端服务的推送和全局会话的绑定。</span><br><span class=\"line\">unbind(uid,cb)\t</span><br><span class=\"line\">LocalSeesion.prototype.unbind() uid:用户编号;cb:回调函数。callfunction(err)。取消绑定。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>(key,value)\tLocalSeesion.prototype.set() 将key/value添加到本地会话中</span><br><span class=\"line\">get(key)\t</span><br><span class=\"line\">LocalSeesion.prototype.get() 根据key从本地会话中获取值。</span><br><span class=\"line\"></span><br><span class=\"line\">push(key,cb)\t</span><br><span class=\"line\">LocalSeesion.prototype.push() 将本地会话中的key/value添加到全局会话中</span><br><span class=\"line\"></span><br><span class=\"line\">pushAll(cb)\tLocalSeesion.prototype.pushAll() 将本地会话中的所有key/value添加到全会话中</span><br></pre></td></tr></table></figure>\n<p>SessionService</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kick(uid,cb)\tSeesionService.prototype.kick() 踢掉该用户的所有离线会话</span><br><span class=\"line\">kickBySession(sid,cb)\t</span><br><span class=\"line\">SeesionService.prototype.kickBySession() sid:会话编号;cb:回调函数。根据会话id踢掉一个在线用户</span><br><span class=\"line\"></span><br><span class=\"line\">sendMessage(sid,msg)\tSeesionService.prototype.sendMessage()根据会话id向客户端发送消息</span><br><span class=\"line\">sendMessageByUid(uid,msg)\t</span><br><span class=\"line\">SeesionService.prototype.sendMessageByUid() 根据用户id向客户端发送消息</span><br></pre></td></tr></table></figure>\n<p>Pomelo</p>\n<p><code>`</code> bash<br>createApp(opts)    Pomelo.create() 创建一个Pomelo 应用程序</p>\n","categories":[{"name":"服务端框架","slug":"服务端框架","count":1,"path":"api/categories/服务端框架.json"}],"tags":[{"name":"node.js","slug":"node-js","count":3,"path":"api/tags/node-js.json"}]}