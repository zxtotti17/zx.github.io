{"name":"node.js","slug":"node-js","count":3,"postlist":[{"title":"hexo 常用笔记","slug":"hexo-安装遇到的问题","date":"2018-07-03T09:39:12.000Z","updated":"2019-11-27T15:26:48.000Z","comments":true,"path":"api/articles/hexo-安装遇到的问题.json","excerpt":"","keywords":null,"cover":null,"content":"<p>建站的过程网上一大把就不记录了，主要写下遇到的几个问题</p>\n<ol>\n<li>github上的项目名称一定要和自己在github上的用户名一致，否则会生成静态文件后点开会白屏</li>\n<li>多看看官方手册上面有详细记录<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs</a></li>\n</ol>\n<p>hexo g -d<br>hexo clean<br>hexo s<br>hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件,再运行hexo n “xxxx”来生成md博文</p>\n","text":"建站的过程网上一大把就不记录了，主要写下遇到的几个问题github上的项目名称一定要和自己在github上的用户名一致，否则会生成静态文件后点开会白屏多看看官方手册上面有详细记录https://hexo.io/zh-cn/docshexo g -d<br>hexo clean<b","link":"","raw":null,"photos":[],"categories":[{"name":"开发环境安装","slug":"开发环境安装","count":4,"path":"api/categories/开发环境安装.json"}],"tags":[{"name":"node.js","slug":"node-js","count":3,"path":"api/tags/node-js.json"},{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}]},{"title":"pomelo学习笔记","slug":"pomelo学习笔记","date":"2018-10-23T11:34:45.000Z","updated":"2019-11-27T15:26:48.000Z","comments":true,"path":"api/articles/pomelo学习笔记.json","excerpt":"<p>环境<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getBase()\t Application.getBase(); 获取应用程序的基本路径</span><br><span class=\"line\"><span class=\"built_in\">set</span>(setting, val, attach);\t Application.set();  setting:应用程序的配置；val:需要设置的值；attach:是否将设配置应用到程序。设置或返回配置的值。</span><br><span class=\"line\">get(setting)\t Application.get(); setting:应用程序的配置。获取配置的值</span><br><span class=\"line\">enabled(setting)\t Application.enabled(); setting:应用程序的配置。检查配置是否启用</span><br><span class=\"line\">disabled(setting)\t Application.disabled(); setting:应用程序的配置。检查配置是否禁用</span><br><span class=\"line\">enbale(setting)\t Application.enbale(); setting:应用程序的配置。启用配置</span><br><span class=\"line\"><span class=\"built_in\">disable</span>(setting)\t Application.disabled(); setting:应用程序的配置。禁用配置</span><br><span class=\"line\">configure(env,fn,<span class=\"built_in\">type</span>)\tApplication.configure();env:应用环境;fn:回调函数;<span class=\"built_in\">type</span>:服务类型.</span><br></pre></td></tr></table></figure></p>\n<p>初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start()\t Application.start(); 启动应用程序。它会加载默认的组件和启动所有加载的组件。</span><br><span class=\"line\">registerAdmin(moduleId,module,opts)\t Application.registerAdmin();  moduleId:(可选参数)模块id或者有modeule提供的模块Id;module:模块对象或者模块的工程函数;opts:模块构造函数的参数。</span><br><span class=\"line\">filter(filter)\t Application.filter(); filter:provide before and after filter method。add a filter to before and after filter</span><br><span class=\"line\">before(bf)\t Application.before(); bf:before filter。Add before filter</span><br><span class=\"line\">after(af)\t Application.after(); af:after filter。Add after filter</span><br><span class=\"line\">load(name, component, opts)\t Application.load(); name:组件的名称（可选）；component：组件的实例或者组件的工厂函数；opts：组件构造函数的参数（可选）。加载组件</span><br><span class=\"line\">loadConfig(key,val)\t Application.loadConfig(); key:环境配置的关键字;val:环境配置的值。导入json文件来配置环境。</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"环境<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>getBase()\t Application.getBase(); 获取应用程序的基本路径<br>set(setting, val, attach);\t Application.set()","link":"","raw":null,"photos":[],"categories":[{"name":"服务端框架","slug":"服务端框架","count":1,"path":"api/categories/服务端框架.json"}],"tags":[{"name":"node.js","slug":"node-js","count":3,"path":"api/tags/node-js.json"}]},{"title":"node笔记","slug":"node笔记","date":"2018-08-21T09:04:37.000Z","updated":"2020-04-07T03:13:02.450Z","comments":true,"path":"api/articles/node笔记.json","excerpt":"<p>第一章 node简介<br>1.1 node的特点<br>    1.1.1 异步I/O 绝大多数操作以异步方式进行调用<br>    1.1.2 事件与回调函数<br>    1.1.3 单线程，但是可以用WebWorkers的方式解决单线程的问题（子进程），用Master-Worker用master统一管理子进程<br>    1.1.4 跨平台<br>    1.1.5 c++速度大约是node的2.5倍</p>\n<p>1.2 模块机制<br>    1.2.1 分为核心模块和文件模块，require没带路径的为核心模块，直接加载进内存，带路径的为文件模块,核心模块中有c++和javascript两部分，其中buffer、crypto、evals、fs、os、等都是c++部分的<br>    1.2.2 npm安装的核心模块插件在package.json中定义</p>\n<p>1.3 异步I/O<br>    1.3.1 操作系统内核对I/O只有：阻塞I/O和非阻塞I/O，node中的异步I/O模型由事件循环、观察者、请求对象、I/O线程池<br>    整个系统可以理解为事件循环相当于厨子，不停的询问是否有新的订单，观察者相当于收银员，收到用户的订单将订单分给厨子，而订单相当于请求对象，参数、方法、回调函数斗封装在请求对象中,<br>    以上是异步I/O的第一步，io线程池相当于放订单的桌子，  请求对象-&gt;I/O线程池-&gt;观察者-&gt;事件循环<br>    1.3.2 非异步的I/O主要是setTimeout(),setInterval(),setImmediate(),process.nextTick()</p>","keywords":null,"cover":null,"content":null,"text":"第一章 node简介<br>1.1 node的特点<br>    1.1.1 异步I/O 绝大多数操作以异步方式进行调用<br>    1.1.2 事件与回调函数<br>    1.1.3 单线程，但是可以用WebWorkers的方式解决单线程的问题（子进程），用Master-W","link":"","raw":null,"photos":[],"categories":[{"name":"开发语言","slug":"开发语言","count":1,"path":"api/categories/开发语言.json"}],"tags":[{"name":"node.js","slug":"node-js","count":3,"path":"api/tags/node-js.json"}]}]}